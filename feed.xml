<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>보노의 블로그</title>
  <icon>https://www.gravatar.com/avatar/e9b052a52621754eede9ed8d52735ccf</icon>
  <subtitle>Infinite Finitude</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://blueshw.github.io/"/>
  <updated>2018-03-25T14:59:06.000Z</updated>
  <id>http://blueshw.github.io/</id>
  
  <author>
    <name>bono</name>
    <email>blueshw83@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CSS] styled-jsx의 CSS 선택자 우선순위 (feat. stylis)</title>
    <link href="http://blueshw.github.io/2018/03/25/priority-css-selector/"/>
    <id>http://blueshw.github.io/2018/03/25/priority-css-selector/</id>
    <published>2018-03-25T03:09:41.000Z</published>
    <updated>2018-03-25T14:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS는 일련의 가중치에 따라서 어떤 속성을 우선적으로 적용할 것인지 결정합니다. 우선순위에 대한 정보는 조금만 검색해보면 나오므로 간단히 <a href="https://gist.github.com/mjj2000/5873872" rel="external nofollow noopener noreferrer" target="_blank">링크</a>로 대체합니다.</p><p>현재 회사에서는 <a href="(https://github.com/zeit/next.js/">nextjs</a>를 사용한 프로젝트를 진행하고 있습니다. nextjs는 서버사이드렌더링(SSR)을 지원하는 리액트 전용 프레임워크입니다. <a href="https://github.com/facebook/create-react-app" rel="external nofollow noopener noreferrer" target="_blank">create-react-app</a>처럼 <code>non-configuration</code>을 지향하며 create-react-app과는 다르게 일부 설정을 수정할 수 있습니다. nextjs는 내부적으로 다양한 라이브러리들이 사용되고 있는데, react 컴포넌트(jsx)에서 CSS 코드를 작성하기 위해서 <a href="https://github.com/zeit/styled-jsx" rel="external nofollow noopener noreferrer" target="_blank">styled-jsx</a>를 사용합니다.</p><p>styled-jsx는 서버와 클라이언트에서 모두 사용가능하고, 컴포넌트별 scope를 지원합니다. 컴포넌트 scope를 지원하기 위한 방법으로 <code>.jsx-xxxxxxxx</code>과 같은 클래스를 css 정의 요소에 붙여주는데요. 덕분에 대체로 아주 편리하게 사용하고 있었지만, 최근 한 가지 문제점을 발견했습니다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> className=<span class="string">"title"</span>&gt;빨간색으로 나와야 할텐데..&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style jsx&gt;&#123;`</span><br><span class="line">  <span class="selector-tag">div</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">`&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;span&gt;</code>의 텍스트에 색상을 입히는 스타일이 두가지가 있습니다. 위쪽은 <code>div &gt; div &gt; span</code>처럼 element의 cascade 형태로 정의하고, 아래쪽은 class 이름으로 정의합니다. class가 10점이라고 하면 element는 개당 1점이므로 <code>.title</code>의 가중치가 높아 <code>red</code> 색상의 텍스트가 출력되어야 합니다. 하지만, 결과는 아래와 같았습니다.</p><p><span style="color:#00f">빨간색으로 나와야 할텐데..</span></p><p>우리가 익히 알고 있는 css 선택자는 <code>class</code>가 <code>element</code> 보다 명시도(가중치 또는 우선순위)가 높습니다. 위에서 언급한것처럼 element가 1점이라면 class는 10점으로 평가되기 때문입니다. 위의 CSS 코드에 점수를 매겨보면, 첫번째 스타일은 3점이고 두번째 스타일은 10점이 됩니다.</p><table><thead><tr><th style="text-align:center">css</th><th style="text-align:center">specificity(명시도)</th></tr></thead><tbody><tr><td style="text-align:center">div&gt;div&gt;span</td><td style="text-align:center">0 0 0 3</td></tr><tr><td style="text-align:center">.title</td><td style="text-align:center">0 0 1 0</td></tr></tbody></table><p>그런데 styled-jsx(<code>v2.2.x</code> 사용)를 통해서 컴파일이 완료되면 실제 명시도는 아래처럼 변경됩니다.</p><table><thead><tr><th style="text-align:center">css</th><th style="text-align:center">specificity(명시도)</th></tr></thead><tbody><tr><td style="text-align:center">div.jsx-1234&gt;div.jsx-1234&gt;span.jsx-1234</td><td style="text-align:center">0 0 3 3</td></tr><tr><td style="text-align:center">.title.jsx-1234</td><td style="text-align:center">0 0 2 0</td></tr></tbody></table><p>첫번째 스타일이 두번째 스타일보다 명시도가 높게 변했습니다. 원래 기대했던 것과는 전혀 다른 결과가 나왔네요. 사용법에 문제가 있었던 것인지, 아니면 이미 보고된 버그인지 확인하기 위해 styled-jsx github 페이지의 이슈를 검색해보았지만, 마땅한 버그를 찾을 수 없었습니다. 그래서 제가 <a href="https://github.com/zeit/styled-jsx/issues/424" rel="external nofollow noopener noreferrer" target="_blank">버그</a> 보고했습니다.</p><p>하루가 지나니 짜잔!!<br><code>bug</code>로 등록되었습니다!!!</p><img src="/2018/03/25/priority-css-selector/bug.png"><p>쓰레드에 달린 글을 보니 styled-jsx에서 사용하는 <code>stylis</code>가 문제였습니다. stylis는 컴포넌트별 scope를 만들기 위해 id, class, element에 특정 해시(styled-jsx의 경우 <code>jsx-1234</code>)class를 붙여주는데, 가중치에 상관없이 모든 요소(id, class, element)에 class를 붙여주다보니 결과적으로 원하지 않는 결과가 나온 것입니다. 이 문제에 대해서 곰곰히 생각해보았더니, 지금처럼 모든 요소에 해시class를 붙여줄것이 아니라 각 CSS 선택자마다 하나의 class만 붙여주면 해결될것 같은 느낌이 들었습니다.</p><p>첫 element에만 class를 붙이거나, </p><table><thead><tr><th style="text-align:center">css</th><th style="text-align:center">specificity(명시도)</th></tr></thead><tbody><tr><td style="text-align:center">div.jsx-1234&gt;div&gt;span</td><td style="text-align:center">0 0 1 3</td></tr><tr><td style="text-align:center">.title.jsx-1234</td><td style="text-align:center">0 0 2 0</td></tr></tbody></table><p>마지막 element에 class를 붙이는식으로 처리하는 것입니다.</p><table><thead><tr><th style="text-align:center">css</th><th style="text-align:center">specificity(명시도)</th></tr></thead><tbody><tr><td style="text-align:center">div&gt;div&gt;span.jsx-1234</td><td style="text-align:center">0 0 1 3</td></tr><tr><td style="text-align:center">.title.jsx-1234</td><td style="text-align:center">0 0 2 0</td></tr></tbody></table><p>모든 케이스를 고려해 보지 않았지만, 이런 방식으로 처리하면 문제가 해결될 것이라고 생각되어, 제가 보고했던 버그 스레드에 <a href="https://github.com/zeit/styled-jsx/issues/424#issuecomment-375518440" rel="external nofollow noopener noreferrer" target="_blank">댓글</a>을 달았습니다. 그랬더니, 와!! </p><img src="/2018/03/25/priority-css-selector/answer.png"><p>이후로 <code>stylis</code> <a href="https://github.com/thysultan/stylis.js/issues/101" rel="external nofollow noopener noreferrer" target="_blank">이슈</a> 에서 해결방안이 활발히 논의되고 있습니다(맨 앞 요소와 맨 뒤 요소에 `jsx-1234를 붙여주는걸로 가닥을 잡은 것 같습니다). 제가 직접 코드를 기여하지 않았습니다만, 제 의견이 반영되니 묘한 기분이 들더군요. 지금껏 오픈소스에 기여한적이 없었기 때문에 그랬는지도 모르겠습니다. 다들 이 맛에 오픈소스 하는구나라는 생각이 드는 경험이었습니다.</p><h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><ul><li><a href="https://gist.github.com/mjj2000/5873872" rel="external nofollow noopener noreferrer" target="_blank">https://gist.github.com/mjj2000/5873872</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/CSS/Specificity" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/ko/docs/Web/CSS/Specificity</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS는 일련의 가중치에 따라서 어떤 속성을 우선적으로 적용할 것인지 결정합니다. 우선순위에 대한 정보는 조금만 검색해보면 나오므로 간단히 &lt;a href=&quot;https://gist.github.com/mjj2000/5873872&quot; rel=&quot;exte
      
    
    </summary>
    
    
      <category term="css" scheme="http://blueshw.github.io/tags/css/"/>
    
      <category term="css selector" scheme="http://blueshw.github.io/tags/css-selector/"/>
    
      <category term="github" scheme="http://blueshw.github.io/tags/github/"/>
    
      <category term="styled-jsx" scheme="http://blueshw.github.io/tags/styled-jsx/"/>
    
      <category term="nextjs" scheme="http://blueshw.github.io/tags/nextjs/"/>
    
      <category term="stylis" scheme="http://blueshw.github.io/tags/stylis/"/>
    
  </entry>
  
  <entry>
    <title>[Jest] mock 함수를 이용하여 함수 호출 테스트 하기</title>
    <link href="http://blueshw.github.io/2018/03/21/function-test-with-jest/"/>
    <id>http://blueshw.github.io/2018/03/21/function-test-with-jest/</id>
    <published>2018-03-20T16:19:29.000Z</published>
    <updated>2018-03-25T03:08:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>React 프로젝트에서 가장 많이 사용되는 테스트 모듈로 <a href="https://facebook.github.io/jest/" rel="external nofollow noopener noreferrer" target="_blank">Jest</a>가 있습니다. react와 Jest 둘 다 페이스북이 만든 오픈소스 프로젝트입니다. 같은 회사에서 만든 오픈소스기 때문에 서로 호환이 잘 될거라는 믿음으로 사용하고 있습니다. 호환성과 무관하게 Jest를 이용하면 모듈, React DOM 등의 테스트는 무리없이 진행할 수 있습니다. 무설정으로 React 앱을 만들수 있는 일종의 프레임웍인 <a href="https://github.com/facebook/create-react-app" rel="external nofollow noopener noreferrer" target="_blank">create-react-app</a>(이것 역시 페이스북)에서도 기본적으로 Jest가 내장되어 있습니다.</p><p>테스트 환경을 위해 create-react-app으로 app을 생성합니다.<br></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">create-react-app</span> <span class="string">jest-fn</span></span><br></pre></td></tr></table></figure><p></p><p>만들어진 react app의 src 폴더에 아래의 javascript 파일들을 생성합니다.<br>분기도 필요없고 모듈도 나눌 필요없는 함수지만, 테스트 목적으로 아래와 같이 작성합니다.</p><h4 id="src-number-js"><a href="#src-number-js" class="headerlink" title="/src/number.js"></a>/src/number.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; justReturn &#125; <span class="keyword">from</span> <span class="string">"./util"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> returnFirstNum(num);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> justReturn(num);;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">returnFirstNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="src-util-js"><a href="#src-util-js" class="headerlink" title="/src/util.js"></a>/src/util.js</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">function</span> <span class="title">justReturn</span>(num) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">num</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 코드를 만듭니다.</p><h4 id="src-number-test-js"><a href="#src-number-test-js" class="headerlink" title="/src/number.test.js"></a>/src/number.test.js</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> util <span class="keyword">from</span> <span class="string">'./util'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">from</span> <span class="string">'./number'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'getFirstNumber'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it (<span class="string">'number === 8'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    util.justReturn = jest.fn();</span><br><span class="line">    <span class="built_in">number</span>.getFirstNumber(<span class="number">8</span>);</span><br><span class="line">    expect(util.justReturn).toBeCalled()</span><br><span class="line">  &#125;)</span><br><span class="line">  it (<span class="string">'number === 15'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">number</span>.returnFirstNum = jest.fn();</span><br><span class="line">    <span class="built_in">number</span>.getFirstNumber(<span class="number">15</span>);</span><br><span class="line">    expect(<span class="built_in">number</span>.returnFirstNum).toBeCalled()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>테스트를 실행해봅니다.<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p></p><p>console에 아래와 같은 메세지가 출력됩니다. 1개의 테스트에서 에러가 발생했네요.<br></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FAIL  src/number.test.js</span><br><span class="line"> ● getFirstNumber › number === 15</span><br><span class="line">   expect(jest.fn()).toBeCalled()</span><br><span class="line">   Expected mock function to have been called.</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   Test Suites:<span class="number"> 1 </span>failed,<span class="number"> 1 </span>total</span><br><span class="line">   Tests:      <span class="number"> 1 </span>failed,<span class="number"> 1 </span>passed,<span class="number"> 2 </span>total</span><br></pre></td></tr></table></figure><p></p><p>함수의 인자가 <code>number === 15</code>일때 발생한 에러입니다. 얼핏 보면 이상할 것 없는 코드인데, <code>number === 8</code>일때는 성공했고, <code>number === 15</code>일때는 실패했습니다. <code>getFirstNumber</code> 함수는 10 이상이냐 10 미만이냐에 따라 분기되고 각 조건절에서 별도의 함수를 호출하고 있습니다. 코드상에서 특별한 문제는 없어 보이는데, 조건절 내부에서 호출되는 함수들이 같은 모듈 내에 있는지 아니면 다른 모듈에서 가져온 함수인지의 차이는 있습니다. 이게 문제일까요? 조금더 깊게 들어가봐야겠습니다.</p><p>babel 사이트를 통해서 위의 코드를 트랜스파일링 해보면 아래와 같습니다.</p><h4 id="src-number-js-1"><a href="#src-number-js-1" class="headerlink" title="/src/number.js"></a>/src/number.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">exports.getFirstNumber = getFirstNumber;</span><br><span class="line">exports.returnFirstNum = returnFirstNum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _util = <span class="built_in">require</span>(<span class="string">"./util"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> returnFirstNum(num);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, _util.justReturn)(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnFirstNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>number.js를 다른 모듈에서 import(require)하면 function 자체를 가져오는 것이 아니라 모듈의 exports 객체를 가져옵니다. 각 모듈은 모두 독립적으로 존재하고 모듈끼리 서로 참조하기 위해서 import, export 키워드(ES6)를 사용합니다. 그렇기 때문에 하나의 모듈에 있는 함수를 다른 모듈에서 가져다 쓸수는 있지만 함수 그 자체를 변형할 수는 없습니다.</p><p>이제 test 코드를 다시 살펴보겠습니다. util 모듈의 <code>justReturn</code>에 Jest mock function을 할당하고 있습니다.<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">from</span> <span class="string">'./number'</span>;</span><br><span class="line">...</span><br><span class="line">it (<span class="string">'number === 8'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  util.justReturn = jest.fn();  <span class="comment">// util.js의 exports.justReturn에 mock 함수 할당</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>이는 util모듈의 <code>justReturn</code>이라는 함수를 실제로 mock function으로 변경한게 아닙니다. 단지 util 모듈의 exports 객체의 justReturn에 <code>jest.fn()</code>을 할당한 것입니다. 즉, 이렇게 된 것입니다.<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports.justReturn = jest.fn()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p></p><p>이 사실을 바탕으로 잘 생각해보면, 두번째 테스트가 왜 실패했는지 짐작해볼 수 있습니다.<br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">number</span> <span class="keyword">from</span> <span class="string">'./number'</span>;</span><br><span class="line">...</span><br><span class="line">it (<span class="string">'number === 15'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">number</span>.returnFirstNum = jest.fn(); <span class="comment">// number.js의 exports.returenFirstnum에 mock 함수 할당</span></span><br><span class="line">  <span class="built_in">number</span>.getFirstNumber(<span class="number">15</span>); <span class="comment">// number.js의 getFirstNumber 호출</span></span><br><span class="line">  expect(<span class="built_in">number</span>.returnFirstNum).toBeCalled()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>우선 number 모듈의 exports객체의 returnFirstNum 속성에 mock 함수를 할당합니다. 그리고 <code>getFirstNumber(15)</code> 함수를 호출합니다. 이때 getFirstNumber 함수의 인자는 15보다 크기 때문에 내부적으로 returnFirstNum() 함수가 호출됩니다. 그런데 <code>returnFirstNum</code> 함수는 <code>getFirstNumber</code> 함수와 동일한 모듈에 존재하기 때문에 실제로 호출되는 부분은 number.js 모듈의 실제 <code>returnFirstNum</code> 함수입니다(exports.returnFirstNum이 아니라..).</p><p>이는 <code>number.returnFirstNum</code>함수가 <code>getFirstNumber</code> 내에서 호출되는 <code>returnFirstNum</code>과는 전혀 다른 녀석이라는 것입니다. mock 함수를 할당한 변수와 실제 호출되는 함수가 전혀 다르기 때문에 이 테스트는 실패하는게 맞습니다. 그렇다면 같은 모듈에서 호출하는 함수를 테스트하기 위한 방법이 없을까요?</p><h3 id="방법이-있긴-합니다만"><a href="#방법이-있긴-합니다만" class="headerlink" title="방법이 있긴 합니다만.."></a>방법이 있긴 합니다만..</h3><p>테스트를 성공시킬수 있는 아주 간단한 방법이 하나 있습니다. 하지만 그다지 추천하고 싶지는 않습니다. <code>number.js</code> 파일을 다음과 같이 수정합니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; justReturn &#125; <span class="keyword">from</span> <span class="string">"./util"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getFirstNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> exports.returnFirstNum(num);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> justReturn(num);;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">returnFirstNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>바뀐곳은 딱 한군데입니다. <code>getFirstNumber</code>내에서 <code>returnFirstNum</code>을 호출할때 앞에 <code>exports.</code>을 붙여주었습니다. 이는 returnFirstNum을 모듈내에서 직접호출하는 것이 아니라 exports 객체의 property에 할당된 함수를 호출하는 방법입니다. 동작은 이상없이 잘 됩니다만, 문제는 테스트 코드를 위해서 원래 소스를 고쳐야 한다는 것입니다. 그래서 그다지 추천하고 싶지 않습니다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>같은 모듈에 있는 함수를 호출할때는 실제 함수를 사용하지만, 다른 모듈의 함수를 호출할때는 실제 그 함수가 호출되는 것이 아니라 모듈의 exports객체의 property가 호출됩니다. 그래서같은 모듈의 함수를 호출하는 함수를 테스트할 때는 호출 테스트를 할 수 없습니다. 방법이 있긴 하지만 테스트를 위해 원래 소스를 고쳐야 하므로 그다지 추천하지 않습니다.</p><blockquote><p>혹시 좋은 방법 알고 계신분은 알려주시기 바랍니다</p></blockquote><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://facebook.github.io/jest/docs/en/mock-functions.html" rel="external nofollow noopener noreferrer" target="_blank">https://facebook.github.io/jest/docs/en/mock-functions.html</a></li><li><a href="https://medium.com/@deanslamajr/jest-fn-all-the-things-d26f3b929986" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@deanslamajr/jest-fn-all-the-things-d26f3b929986</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React 프로젝트에서 가장 많이 사용되는 테스트 모듈로 &lt;a href=&quot;https://facebook.github.io/jest/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Je
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="unit test" scheme="http://blueshw.github.io/tags/unit-test/"/>
    
      <category term="jest" scheme="http://blueshw.github.io/tags/jest/"/>
    
      <category term="mock" scheme="http://blueshw.github.io/tags/mock/"/>
    
      <category term="exports" scheme="http://blueshw.github.io/tags/exports/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] this는 어렵지 않습니다.</title>
    <link href="http://blueshw.github.io/2018/03/12/this/"/>
    <id>http://blueshw.github.io/2018/03/12/this/</id>
    <published>2018-03-11T16:42:51.000Z</published>
    <updated>2018-03-11T16:42:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>this는 어렵지 않습니다.</p><p>this를 어렴풋이 알고는 있지만, 누가 물어봤을때 제대로 대답해 줄수 있도록 정리해보겠습니다. 많은 개발자들이 javascript의 this를 혼란스러워합니다. 사실 개념 자체가 어렵진 않습니다. 다만, 다른 프로그래밍 언어들과 사용법에 차이가 있을 뿐이죠. 언어마다 조금은 차이가 있겠지만 대표적으로 JAVA같은 객체지향 언어에서의 this는 클래스 인스턴스의 레퍼런스 변수입니다. 하지만 javascript에서 this는 전혀 다른 의미를 가집니다. 개발을 시작하고 처음으로 javascript를 접한 개발자라면 조금 덜 혼란스러울지도 모르겠지만, 많은 개발자들이 C, C++, Java, python 등의 언어를 먼저 배운 뒤 javascript를 접하는 케이스가 많습니다. 또한, Jquery 등의 라이브러리에 의존하는 경향 때문에 언어 자체의 문법이나 특성의 이해보다는 사용법만 습득하기도 하죠. 이런 경우, javascript의 this가 충분히 혼란스러울수 있을것 같습니다.</p><h3 id="this는-현재-실행-문맥이다"><a href="#this는-현재-실행-문맥이다" class="headerlink" title="this는 현재 실행 문맥이다"></a>this는 현재 실행 문맥이다</h3><p><code>실행문맥</code>이란 말은 호출자가 누구냐는 것과 같습니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true, 호출자는 window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> caller = &#123;</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">caller.f(); <span class="comment">// false, 호출자는 caller 객체</span></span><br></pre></td></tr></table></figure><p></p><p>첫번째는 함수 호출, 두번째는 메소드 호출이라고 말하는데 이런 구분이 괜한 혼란을 야기합니다. 첫번째 alert도 따지고보면 <code>window.alert()</code>과 동일하기 때문에 window 객체의 메소드 호출이라봐도 무방합니다. 다만, <code>strict-mode</code>에서는 전역 객체냐 일반 객체냐에 따라 함수내부에 this의 결과가 다르다는 차이는 있죠. 그러나 이 문제 또한 window를 함수 호출 앞에 붙여주면 해결됩니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonStrictMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strictMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nonStrictMode()); <span class="comment">// window</span></span><br><span class="line"><span class="built_in">console</span>.log(strictMode()); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.stricMode()); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p></p><h3 id="생성자-함수-객체에서는-어떻게-쓰이나"><a href="#생성자-함수-객체에서는-어떻게-쓰이나" class="headerlink" title="생성자 함수 / 객체에서는 어떻게 쓰이나?"></a>생성자 함수 / 객체에서는 어떻게 쓰이나?</h3><p>생성자는 new로 객체를 만들어 사용하는 방식입니다. 객체지향 언어에서 일반적으로 객체를 만들 때 쓰이는 문법과 동일하죠. 가리키는 대상 또한 객체지향 언어의 <code>this</code>와 같기 때문에 이해하기가 한결 수월합니다.<br></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NewObject</span></span>(name, color) &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">  <span class="built_in">this</span>.isWindow = <span class="function"><span class="keyword">function</span></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> === window;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="keyword">new</span><span class="type">Obj</span> = <span class="keyword">new</span> <span class="type">NewObject</span>(<span class="string">'nana'</span>, <span class="string">'yellow'</span>);</span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Obj</span>.name); <span class="comment">// nana</span></span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Obj</span>.color); <span class="comment">// yellow</span></span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Obj</span>.isWindow()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">const <span class="keyword">new</span><span class="type">Obj2</span> = <span class="keyword">new</span> <span class="type">NewObject</span>(<span class="string">'didi'</span>, <span class="string">'red'</span>);</span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Obj2</span>.name); <span class="comment">// didi</span></span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Obj2</span>.color); <span class="comment">// red</span></span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Obj2</span>.isWindow()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p></p><p>new 키워드로 새로운 객체를 생성했을 경우 생성자 함수 내의 this는 new를 통해 만들어진 새로운 변수가 됩니다. <code>newObj</code>, <code>newObj2</code>는 같은 생성자 함수로 만들어진 객체이지만 완전히 별도의 객체이기 때문에 각 객체의 속성들은 서로 관련이 없습니다. 만약 new 키워드를 빼먹으면 어떻게 될까요?<br></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withoutNew = NewObject(<span class="string">'nana'</span>, <span class="string">'yellow'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(withoutNew.name); <span class="comment">// error</span></span><br><span class="line">console.<span class="built_in">log</span>(withoutNew.<span class="built_in">color</span>); <span class="comment">// error</span></span><br><span class="line">console.<span class="built_in">log</span>(withoutNew.isWindow()); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p></p><p>new 키워드가 없으면 일반적인 함수 실행과 동일하게 동작하므로, <code>NewObject</code> 함수내의 this는 <code>window</code> 객체가 됩니다. 하지만 <code>withoutNew</code>가 함수 실행의 결과값이 할당되므로 각 property를 가져올 수 없습니다.<br>그렇다면, 생성자 함수가 아닌 일반 객체에서는 어떨까요?<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'john'</span>,</span><br><span class="line">  age: <span class="number">15000</span>,</span><br><span class="line">  nickname: <span class="string">'man from earth'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// john</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherPerson = person;</span><br><span class="line">otherPerson.name = <span class="string">'chris'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// chris</span></span><br><span class="line"><span class="built_in">console</span>.log(otherPerson.getName()); <span class="comment">// chris</span></span><br></pre></td></tr></table></figure><p></p><p>생성자 함수와 크게 다르지 않습니다. 한가지 눈여겨 볼 점은 <code>otherPerson.name</code>을 <code>chris</code>로 설정한 뒤 person.getName() 호출하면 그 결과는 <code>chris</code>입니다. 그 이유는 otherPerson은 person의 레퍼런스 변수이므로 하나(otherPerson)를 변경하면 다른 하나(person)도 변경됩니다. 이를 피하기 위해서는 <code>Object.assign()</code>메서드(ES6 지원)를 이용하여 완전히 별도의 객체로 만들어야 합니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'john'</span>,</span><br><span class="line">  age: <span class="number">15000</span>,</span><br><span class="line">  nickname: <span class="string">'man from earth'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newPerson = <span class="built_in">Object</span>.assign(&#123;&#125;, person);</span><br><span class="line">newPerson.name = <span class="string">'chris'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// john</span></span><br><span class="line"><span class="built_in">console</span>.log(newPerson.getName()); <span class="comment">// chris</span></span><br></pre></td></tr></table></figure><p></p><h3 id="bind-arrow-function"><a href="#bind-arrow-function" class="headerlink" title="bind, arrow function"></a>bind, arrow function</h3><p>이번에는 생성자 함수 안에서 또 다른 함수가 있는 경우를 살펴보겠습니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Family</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">const</span> names = [<span class="string">'bill'</span>, <span class="string">'mark'</span>, <span class="string">'steve'</span>];</span><br><span class="line">  names.map(<span class="function"><span class="keyword">function</span>(<span class="params">lastName, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(lastName + <span class="string">' '</span> + <span class="keyword">this</span>.firstName);   </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);      </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> kims = <span class="keyword">new</span> Family(<span class="string">'kim'</span>);</span><br><span class="line"><span class="comment">// bill undefined</span></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line"><span class="comment">// mark undefined</span></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line"><span class="comment">// steve undefined</span></span><br><span class="line"><span class="comment">// window</span></span><br></pre></td></tr></table></figure><p></p><p><code>Family</code>라는 생성자 함수 안에서 <code>map</code> 메서드를 호출합니다. map 메서드의 인자는 value와 index를 인자로 가지는 새로운 함수입니다. 이를 <code>서브루틴</code>이라 부르겠습니다. 서브루틴이 특별히 다른 개념은 아닙니다. 자바스크립트에서 함수의 의미가 다양하기 때문에 단지 메서드가 아닌 함수와 구분하기 위한 용도로 서브루틴이라는 단어를 사용합니다. </p><p>이 서브루틴에서는 lastName들을 담은 <code>names</code> 배열의 map 메서드를 이용하여 lastName과 this의 firstName을 같이 출력하고자 합니다. 하지만 막상 실행을 해보면 예상과 다르게 출력됩니다. kim이 출력될 위치에 <code>undefined</code>가 출력되었습나다. 이는 map의 서브루틴에서 this를 사용하는 것이 문제였습니다. this가 실행 문맥이라고 했던것을 상기해보면 undefined가 출력되는 이유를 짐작해볼 수 있습니다. map 메서드의 서브루틴은 호출될때 map의 context(this)로 바인드 되지 않습니다. 바인드 되지 않았다는 것은 실행문맥이 전역이라는 것이고 실행문맥이 전역이란 말은 (비엄격모드에서) 서브루틴 내 this가 <code>window</code>라는 것입니다.</p><p>비슷한 현상을 다른 예제에서 살펴보겠습니다. 아래 함수를 실행시키면 innerFunc안의 this는 window가 출력됩니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testObj = &#123;</span><br><span class="line">  outerFunc:  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">    innerFunc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">testObj.outerFunc();</span><br></pre></td></tr></table></figure><p></p><p>outherFunc가 외부에서 실행(testObj.outerFunc())되면 this는 testObj입니다. 그리고 outerFunc 내부에서 innerFunc가 호출할때는 그 어떤 문맥도 지정하지(바인드되지) 않았습니다. 전역 context(window)에서 실행되었다는 것이죠. 이게 바로 (비엄격모드에서) innerFunc의 this가 window가 되는 이유 입니다.</p><p>다시 이전의 생성자 함수(Family)로 돌아갑니다. map 메서드의 서브루틴에서 this가 window가 된다는 것은 위에서 이미 설명했습니다. 하지만, 생성자 함수 내의 특정 변수를 서브루틴 내에서 사용할 수도 있습니다. 이 때, 실행문맥(this)을 Family로 지정하려면 간단하게는 별도의 상수(const)를 지정하면 됩니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Family</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">const</span> names = [<span class="string">'bill'</span>, <span class="string">'mark'</span>, <span class="string">'steve'</span>];</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    names.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' '</span> + that.firstName); </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> kims = <span class="keyword">new</span> Family(<span class="string">'kim'</span>);</span><br><span class="line"><span class="comment">// bill kim</span></span><br><span class="line"><span class="comment">// mark kim</span></span><br><span class="line"><span class="comment">// steve kim</span></span><br></pre></td></tr></table></figure><p></p><p>문제 없이 이름들이 출력됩니다. 하지만, 항상 <code>that</code>이라는 상수를 만들어주면 귀찮습니다. 또한, 만에 하나 실수로 빼먹기라도 하면 어마어마한 문제가 발생할지도 모릅니다. 혹은 서브루틴 안에서 또다른 서브루틴을 사용할 수도 있습니다. 그 때는 <code>anotherThat</code>을 만들어야 할까요? 이 문제를 해결하기 위해서 <code>bind</code>라는 메서드를 사용합니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Family</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">const</span> names = [<span class="string">'bill'</span>, <span class="string">'mark'</span>, <span class="string">'steve'</span>];</span><br><span class="line">    names.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' '</span> + <span class="keyword">this</span>.firstName); </span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> kims = <span class="keyword">new</span> Family(<span class="string">'kim'</span>);</span><br></pre></td></tr></table></figure><p></p><p>that을 쓸때보다는 깔끔해졌습니다. 하지만 <code>.bind(this)</code>도 항상 붙여줘야한다는 문제는 여전히 남아 있습니다. 이제 <code>arrow function</code>이 나올때가 된것 같네요.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Family</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">const</span> names = [<span class="string">'bill'</span>, <span class="string">'mark'</span>, <span class="string">'steve'</span>];</span><br><span class="line">    </span><br><span class="line">    names.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' '</span> + <span class="keyword">this</span>.firstName); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> kims = <span class="keyword">new</span> Family(<span class="string">'kim'</span>);</span><br></pre></td></tr></table></figure><p></p><p>이제 that도 없고, bind도 없습니다. 함수의 형태만 바꿔주면 모든게 해결됩니다. 그럼 일반 함수형태에서 arrow 함수를 사용했을때 어떤 차이가 있을까요? arrow 함수 또한 ES6에서만 지원하기 때문에 babel 사이트에서 변환해보겠습니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Family</span>(<span class="params">firstName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">var</span> names = [<span class="string">"bill"</span>, <span class="string">"mark"</span>, <span class="string">"steve"</span>];</span><br><span class="line">  names.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value + <span class="string">" "</span> + _this.firstName);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> kims = <span class="keyword">new</span> Family(<span class="string">"kim"</span>);</span><br></pre></td></tr></table></figure><p></p><p>that을 사용했을 때와 동일한 방법으로 트랜스파일 되네요. 미리 내부에서만 사용할 변수 <code>_this</code>를 만들어 두고, this를 할당합니다. 그리고 <code>_this</code>를 사용하여 firstName을 가져옵니다. arrow 함수는 호출 대상에 따라 실행문맥이 결정되는 것이 아닙니다. </p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>this는 어렵지 않습니다. 하지만, 타 언어와 다른 방식으로 사용되기에 주의해서 사용할 필요가 있습니다. 한가지만 기억하자면, this는 누가 호출했느냐에 따라 결정된다는 것입니다. ES6 문법을 사용하면 this를 사용할때 문제점을 완화할 수 있습니다. 예를들어, 서브루틴 내에서 바깥의 this를 사용하려고 할때는 arrow function을 이용하면 간단하게 해결할 수 있습니다.</p><p>참고 자료</p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" rel="external nofollow noopener noreferrer" target="_blank">https://developer.mozilla.org/ko/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript</a></li><li><a href="http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/" rel="external nofollow noopener noreferrer" target="_blank">http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/</a></li><li><a href="https://gomugom.github.io/is-class-only-a-syntactic-sugar/" rel="external nofollow noopener noreferrer" target="_blank">https://gomugom.github.io/is-class-only-a-syntactic-sugar/</a></li><li><a href="http://webframeworks.kr/tutorials/translate/arrow-function/" rel="external nofollow noopener noreferrer" target="_blank">http://webframeworks.kr/tutorials/translate/arrow-function/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;this는 어렵지 않습니다.&lt;/p&gt;&lt;p&gt;this를 어렴풋이 알고는 있지만, 누가 물어봤을때 제대로 대답해 줄수 있도록 정리해보겠습니다. 많은 개발자들이 javascript의 this를 혼란스러워합니다. 사실 개념 자체가 어렵진 않습니다. 다만, 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="bind" scheme="http://blueshw.github.io/tags/bind/"/>
    
      <category term="this" scheme="http://blueshw.github.io/tags/this/"/>
    
      <category term="arrow function" scheme="http://blueshw.github.io/tags/arrow-function/"/>
    
      <category term="subroutine" scheme="http://blueshw.github.io/tags/subroutine/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] async, await를 사용하여 비동기 javascript를 동기식으로 만들자</title>
    <link href="http://blueshw.github.io/2018/02/27/async-await/"/>
    <id>http://blueshw.github.io/2018/02/27/async-await/</id>
    <published>2018-02-27T12:56:31.000Z</published>
    <updated>2018-03-11T16:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>async, await는 ES8(ECMAScript2017)의 공식 스펙(<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function" rel="external nofollow noopener noreferrer" target="_blank">링크</a>)으로 비교적 최근에 정의된 문법입니다. <code>async, await</code>를 사용하면 비동기 코드를 작성할 때 비교적 쉽고 명확하게 코드를 작성할 수 있습니다. 자바스크립트는 싱글 스레드 프로그래밍언어기 때문에 비동기처리가 필수적입니다. 비동기 처리는 그 결과가 언제 반환될지 알수 없기 때문에 동기식으로 처리하는 기법들이 사용되어야 합니다. 대표적으로 <code>setTimeout</code>이 있고 <code>callback</code>과 <code>promise</code>가 있습니다. 세 가지 모두 비동기 코드를 동기식으로 작성하는데 훌륭한 기법들이지만, 모두 약간의 문제점을 가지고 있습니다. async와 await는 이런 문제들을 해결함과 동시에 그 사용법에 있어서도 훨씬 단순해졌습니다. 각각의 방식들을 살펴본 뒤 async, await를 어떻게 사용하고 어떤 방식으로 구현되어 있는지 알아보도록 하겠습니다.</p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>setTimeout은 특정 시간 동안 기다렸다가 이후 첫번째 파라미터의 함수를 실행하는 방식을 사용합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  result = add(first, second);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 30</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>위 코드는 1초 후에 10과 20을 더해서 result에 30을 할당하는 간단한 setTimeout 예제입니다. setTimeout 함수의 첫번째 파라미터는 실행될 함수이고, 두번째 파라미터는 첫번째 파라미터가 얼마후(ms)에 실행될지를 결정합니다. 여기에 별 문제는 없어 보이지만 비동기에 대한 이해가 부족한 상황에서 더 복잡한 코드를 작성하다가는 큰 문제에 부딪칠수도 있습니다. 조금 수정된 코드입니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  result = add(first, second);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 40</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">first = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>이 코드가 동기식으로 처리된다면 result가 30이겠지만, 실제로 console에 찍히는 값은 40입니다. 어디가 잘못 되었을까요? </p><p>자바스크립트는 각각의 <code>task</code>를 큐에 적재해두고 순서대로 처리합니다. 이 때 어떤 코드가 새로운 태스크로 적재되지에 대한 이해가 부족하면 위와 같은 실수를 저지를 수 있습니다. 최초의 task는 스크립트 파일 자체입니다. 이 첫번째 task 내에 <code>setTimeout은 별도의 task를 생성</code>하고 첫번째 task가 종료되길 기다립니다. 첫번째 task인 스크립트의 실행이 끝나면 비로소 setTimeout의 함수를 실행할 준비를 합니다. 즉 first의 값은 초기에 10이였지만 첫번째 스크립트가 종료되면 20이 되기때문에 결과적으로 result는 40이 됩니다. task에 대한 이해가 부족하다면 지난번에 번역했던 <a href="https://blueshw.github.io/2018/01/28/tasks-microtasks-queues-and-schedules/">Tasks, microtasks, queues and schedules</a><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="external nofollow noopener noreferrer" target="_blank">(원본)</a>를 참고하세요.</p><p>그럼 이 코드를 동기식으로 처리하려면 어떻게 해야할까요?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    result = add(first, second);</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// 30</span></span><br><span class="line">    callback();</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getResult(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  first = <span class="number">20</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위와 같이 callback 함수를 사용하면 비동기 코드를 동기식으로 작성할 수 있습니다. 그렇다면 이제 비동기 코드를 동기식으로 바꾸기 위해 사용하는 callback이 무엇이고 어떻게 사용하는지 알아보도록 하겠습니다.</p><h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><p>callback 함수란 호출하는 함수(calling function)가 호출되는 함수(called 함수)로 전달하는 함수를 말하며 이때 callback 함수의 제어권은 호출되는 함수에게 있습니다. callback 함수는 setTimeout 함수와 같은 비동기 코드를 동기식으로 처리하기 위해 사용합니다. production에 사용되는 코드에서는 보통 네트워크 요청 등의 비동기 코드에 많이 사용됩니다.</p><p>callback이 직관적(하나만 사용했을 때)이고 이해가 어렵지는 않지만, 여러개의 callback을 연달아 사용하게 되면 에러가 발생할 가능성이 높고, 코드의 가독성도 크게 떨어지게 됩니다.<br></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 각 함수는 비동기로 처리되는 로직이라 가정합니다</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goWork</span><span class="params">(time1, timeStartWork)</span> </span>&#123;</span><br><span class="line">  wakeUp(time1, <span class="function"><span class="keyword">function</span> <span class="params">(time2)</span> </span>&#123;</span><br><span class="line">    takeSubway(time2, <span class="function"><span class="keyword">function</span><span class="params">(time3)</span> </span>&#123;</span><br><span class="line">      takeOffSubway(time3, <span class="function"><span class="keyword">function</span><span class="params">(time4)</span> </span>&#123;</span><br><span class="line">        arriveWork(time4, <span class="function"><span class="keyword">function</span><span class="params">(arrivalTime)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (arrivalTime &gt; timeStartWork) &#123;</span><br><span class="line">            fire();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>callback은 비동기 코드를 동기적 만드는데 확실한 방법이긴 하지만 남발하게 되면 가독성이 크게 떨어지고 코드의 복잡성도 크게 증가하게 됩니다. 또한 callback의 호출에 대한 제어권이 다른 함수들에게 넘어가 버리기 때문에 각 콜백함수가 언제 어떻게 몇번 실행되는지 확신을 할 수 없습니다. 이렇게 코드를 작성하면(물론 잘 하면 상관없지만), 특히 여러명이서 코드를 공유하는 경우라면 결과를 예측하기 어려울 뿐 아니라 코드내에서 에러가 발생할 확률도 높아집니다.</p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>promise는 약속입니다. 어떤 작업이 성공했을 때(resolve), promise 객체의 then() 함수에 넘겨진 파라미터(함수)를 단 한번만 호출하겠다는 약속입니다. callback의 경우 제어권이 호출되는 함수로 넘어가 버리기 때문에 신뢰성이 다소 떨어지지만 promise는 함수 실행이 성공했을때 then() 함수의 파라미터(함수)가 단 한번만 호출되기 때문에 함수를 호출하는 입장에서 확신을 가지고 코드를 작성할 수 있습니다. 또한 실패했을 경우(reject)에도 catch()함수를 통해서 실패 이후의 작업을 처리할 수 있습니다. 위의 함수(goWork)를 promise로 바꾸어보겠습니다.<br></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goWork</span><span class="params">(time1, timeStartWork)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> wakeUp(time1).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(time2)</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> tackSubway(time2);</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(time3)</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> takeOffSubway(time3); </span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(time4)</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> arriveWork(time4) &#123;</span><br><span class="line">    &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(arrivalTime)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (arrivalTime &gt; timeStartWork) &#123;</span><br><span class="line">        fire();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>callback보다는 훨씬 덜 복잡해 보입니다. 여기에다 ES6의 arrow function 문법을 적용하면 훨씬 더 간단해집니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goWork</span>(<span class="params">time1, timeStartWork</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> wakeUp(time1)</span><br><span class="line">    .then(<span class="function"><span class="params">time2</span> =&gt;</span> tackSubway(time2))</span><br><span class="line">    .then(<span class="function"><span class="params">time3</span> =&gt;</span> takeOffSubway(time3))</span><br><span class="line">    .then(<span class="function"><span class="params">time4</span> =&gt;</span> arriveWork(time4))</span><br><span class="line">    .then(<span class="function"><span class="params">arrivalTime</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (arrivalTime &gt; timeStartWork) &#123;</span><br><span class="line">        fire();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>promise는 충분히 깔끔하고 완성되어 보이지만, 사실 완전히 만족스럽지 않습니다. C나 Java와 같은 절차적 언어에서 사용하듯이 단순하고 직관적이면 더 좋겠다는 생각이 드네요.<br>그럼 이제 async와 await가 등장해야할 시간입니다.</p><h3 id="async-amp-await"><a href="#async-amp-await" class="headerlink" title="async &amp; await"></a>async &amp; await</h3><p>async와 await는 절차적 언어에서 작성하는 코드와 같이 사용법도 간단하고 이해하기도 쉽습니다. function 키워드 앞에 <code>async</code>만 붙여주면 되고 비동기로 처리되는 부분 앞에 <code>await</code>만 붙여주면 됩니다. 다만, 몇 가지 주의할 점이 있다면 await 뒷부분이 반드시 promise를 반환해야 한다는 것과 async function 자체도 promise를 반환한다는 것입니다. 그럼 사용법을 먼저 살펴보겠습니다.<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">goWork</span>(<span class="params">time1, timeStartWork</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> time2 = <span class="keyword">await</span> wakeUp(time1);</span><br><span class="line">  <span class="keyword">const</span> time3 = <span class="keyword">await</span> takeSubway(time2);</span><br><span class="line">  <span class="keyword">const</span> time4 = <span class="keyword">await</span> takeOffSubway(time3);</span><br><span class="line">  <span class="keyword">const</span> arrivalTime = <span class="keyword">await</span> arriveWork(time4);</span><br><span class="line">  <span class="keyword">if</span> (arrivalTime &gt; timeStartWork) &#123;</span><br><span class="line">    fire();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>우와, promise에 비해 훨씬 직관적입니다. 사용법도 그다지 어렵지 않고 코드 이해도 훨씬 좋아졌습니다. 그렇다면 간단하게 function 앞에 async를 붙여주고 호출하는 함수앞에 await를 붙여준 것만으로 어떻게 비동기 함수들의 동기처리가 가능해진걸까요? async와 await가 어떻게 동작하는지 알아보기 위해 babel의 도움을 좀 받아야겠습니다. async, await는 ES8 스펙이라 몇몇 브라우저에서는 호환되지 않게 때문에(최신 크롬은 됩니다) 기존 브라우저에서 동작하도록 자바스크립트 코드를 변환해 주어야 합니다. <a href="https://babeljs.io/repl/#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;code_lz=IYZwngdgxgBAZgV2gFwJYHsIwOboOroBOA1gBRoC2ApgIwA0MlVAyssIcgSQJQwDeAKBgwomEMkapqAJhgBeGMADuwVBJXEqAVQAO5KbW4BuISLESmAZnmKVaxsE3MEAIxVh9M46dERxk6gAWG2VVC0cqAHk4OGc3YA8rb2Fff3ZCVAA3YAAbABUDELsJdKyqLjImQOSYVDgYUlLs_MKAPgCWNg4K3kFhYThUQipSGoBfATGgA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2&amp;prettier=true&amp;targets=&amp;version=6.26.0&amp;envVersion=" rel="external nofollow noopener noreferrer" target="_blank">babel 변환 코드</a>. </p><p>두 부분으로 나누어 간단히 살펴보겠습니다.<br>(아래 설명들은 정리가 잘 안되있어 이해하기 어렵습니다. 설명을 잘 못하는거 보니 아직 저도 잘 이해 못하고 있는 부분이 있는것 같네요ㅠㅠ)<br></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> goWork = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _ref = _asyncToGenerator(</span><br><span class="line">    regeneratorRuntime.mark(<span class="function"><span class="keyword">function</span> <span class="title">_callee</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      time1,</span></span></span><br><span class="line"><span class="function"><span class="params">      timeStartWork</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> time2, time3, time4, arrivalTime;</span><br><span class="line">      <span class="keyword">return</span> regeneratorRuntime.wrap(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_callee$</span>(<span class="params">_context</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> ((_context.prev = _context.next)) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                _context.next = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> wakeUp(time1);</span><br><span class="line">              <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                time2 = _context.sent;</span><br><span class="line">                _context.next = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">return</span> takeSubway(time2);</span><br><span class="line">              ...</span><br><span class="line">              <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"end"</span>:</span><br><span class="line">                <span class="keyword">return</span> _context.stop();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        _callee,</span><br><span class="line">        <span class="keyword">this</span></span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">goWork</span>(<span class="params">_x, _x2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _ref.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p></p><p>첫번째로 위쪽의 코드는 goWork를 즉시 실행하는 함수입니다. 즉시실해함수기 때문에 선언과 동시에 함수가 실행됩니다. 이 함수의 결과값은(<code>var goWork</code>에 할당되는 값) 맨 아래의 <code>goWork(_x, _x2)</code> 함수입니다. 즉, 외부에서 <code>goWork(...)</code>를 호출하면 맨 아래의 goWork 함수가 호출되는것입니다. </p><p>외부에서 goWork를 호출하면 <code>_ref</code>가 실행되는데 _ref는 <code>_asyncToGenerator</code> 함수가 실행된 결과(이 또한 함수)가 할당됩니다. <code>_asyncToGenerator</code> 함수는 하나의 인자(함수)를 가지는데, 이 인자는 실행되면서 내부적으로 제너레이터가 생성합니다. 이 제너레이터를 생성하고 동작을 처리하기 위해서 babel의 <a href="https://babeljs.io/docs/plugins/transform-regenerator/" rel="external nofollow noopener noreferrer" target="_blank">regeneratorRuntime</a> 플러그인이 이용됩니다. </p><p>제너레이터가 생성되어 실행되면 이터레이터가 만들어지고 이터레이터의 next 함수로 yield 구문의 코드를 차례차례 실행하는게 보통의 제너레이터 구조입니다. 여기에서는 만들어진 이터레이터의 next 함수(step(‘next’))가 호출될 때 마다 context의 위치를 변경하고(context.next), 해당 위치의 함수를 실행합니다. (실제 await 부분).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gen = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">key, arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> info = gen[key](arg);</span><br><span class="line">          <span class="keyword">var</span> value = info.value;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (info.done) &#123;</span><br><span class="line">          resolve(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(value).then(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">              step(<span class="string">"next"</span>, value);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">              step(<span class="string">"throw"</span>, err);</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> step(<span class="string">"next"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두번째 부분입니다. 여기서는 우선 위에서 보았던 제너레이터 처리 함수인 <code>fn</code>을 실행시켜서 이터레이터(변수명은 gen이지만 이터레이터가 맞는듯)를 만들어 두고 그 아래에서 <code>프로미스</code>를 리턴합니다. <code>프로미스</code>가 리턴된다는 것은 goWork() 함수의 리턴 타입이 Promise가 된다는 것입니다(코드를 잘 따라가보면 goWork()의 결과값이 Promise를 리턴하는 부분임을 알 수 있습니다). 프로미스 내부에는 <code>step</code>이라는 함수를 만들고 이 함수를 <code>next</code> 인자와 함께 호출합니다. step에서는 인자로 받은 <code>key</code>를 이용하여 <code>gen[key](arg)</code> 형태로 함수를 호출합니다. 이때 key가 <code>next</code>라면 이터레이터의 next()와 동일한 함수가 호출될것이고 반환값(info)은 당연히 <code>{value: xxx, done: false}</code>가 될 것입니다. info.done이 <code>true</code>일때는 제너레이터가 종료된것이므로 resolve()를 호출합니다. 그리고 <code>false</code>인 경우에는 새로운 프로미스를 생성하고 next함수를 실행합니다. </p><p>위의 부분과 연관지어 설명하자면, step()함수가 한 번 실행될때 마다 하나의 프로미스가 생성되고, 제너레이터의 context 위치가 변경되고 해당부분의 함수를 호출합니다. </p><p>async와 await는 제너레이터 구조와 거의 동일합니다. 제너레이터에서 함수옆에 붙이는 ‘*’ 대신 async를 붙이고, yield 대신 await를 사용합니다. 다만 await 함수에서는 이터레이터의 next() 호출을 프로미스의 resolve()함수가 담당합니다. 그렇기 때문에 await 함수(프로미스)가 성공(resolve)해야지만 함수의 결과값을 리턴해줄 수 있게됩니다. 이를 간단히 요약해보면 <code>async,await =&gt; 제너레이터,이터레이터 + 프로미스</code>라 할 수 있겠습니다.</p><p>이상 자바스크립트의 비동기 함수들과 동기식 처리의 발전과정에 대해 알아봤습니다. 개인의 공부 및 정리를 목적으로 작성한 글이라 전문성이 결여되어 있으며 다소 이해하기 어려운 설명들이 다수 포함되어 있습니다.</p><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><ul><li><a href="https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a</a></li><li><a href="https://hyunseob.github.io/2015/08/09/async-javascript/" rel="external nofollow noopener noreferrer" target="_blank">https://hyunseob.github.io/2015/08/09/async-javascript/</a></li><li><a href="http://meetup.toast.com/posts/73" rel="external nofollow noopener noreferrer" target="_blank">http://meetup.toast.com/posts/73</a></li><li><a href="https://jicjjang.github.io/2017/02/05/promise-and-async-await/" rel="external nofollow noopener noreferrer" target="_blank">https://jicjjang.github.io/2017/02/05/promise-and-async-await/</a></li><li><a href="https://medium.com/@jooyunghan/babel%EC%9D%80-generator%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%94%EA%BE%B8%EB%82%98-c78523645cd7" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@jooyunghan/babel%EC%9D%80-generator%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B0%94%EA%BE%B8%EB%82%98-c78523645cd7</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;async, await는 ES8(ECMAScript2017)의 공식 스펙(&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_functio
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ES8" scheme="http://blueshw.github.io/tags/ES8/"/>
    
      <category term="setTimeout" scheme="http://blueshw.github.io/tags/setTimeout/"/>
    
      <category term="promise" scheme="http://blueshw.github.io/tags/promise/"/>
    
      <category term="callback" scheme="http://blueshw.github.io/tags/callback/"/>
    
      <category term="async &amp; await" scheme="http://blueshw.github.io/tags/async-await/"/>
    
      <category term="이터레이터" scheme="http://blueshw.github.io/tags/%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
    
      <category term="제너레이터" scheme="http://blueshw.github.io/tags/%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
    
  </entry>
  
  <entry>
    <title>[번역] Tasks, microtasks, queues and schedules</title>
    <link href="http://blueshw.github.io/2018/01/28/tasks-microtasks-queues-and-schedules/"/>
    <id>http://blueshw.github.io/2018/01/28/tasks-microtasks-queues-and-schedules/</id>
    <published>2018-01-28T12:31:39.000Z</published>
    <updated>2018-01-28T15:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>원본: <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="external nofollow noopener noreferrer" target="_blank">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a><br>의역, 오역이 가득합니다. 개인적으로 정확한 개념을 잡기 위한 번역입니다. 불필요하다 생각한 내용은 과감히 제거했습니다.<br>테스트는 원본 페이지에서 확인 가능합니다.</p></blockquote><p>아래 자바스크립트 코드를 살펴보자.<br></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><p></p><p>위의 코드를 실행하면 아래와 같은 순서로 출력된다.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p></p><p>브라우저에 따라서 조금 다른데 Microsoft Edge, Firefox 40, iOS Safari, desktop Safari 8.0.8에서는 예외적으로 <code>setTimeout</code>이 <code>promise1</code>, <code>promise2</code>보다 먼저 출력된다. 진짜 이상한점은 Firefox 39, Safari 8.0.7에서는 정상적으로 출력된다는 것이다.</p><h3 id="왜-이렇게-출력되는-것일까"><a href="#왜-이렇게-출력되는-것일까" class="headerlink" title="왜 이렇게 출력되는 것일까?"></a>왜 이렇게 출력되는 것일까?</h3><p>이를 이해하기 위해서는 우선 이벤트 루프가 <code>task</code>와 <code>microtask</code>를 어떻게 다루는지에 대해 알 필요가 있다. </p><p>스레드는 그 자신의 이벤트 루프를 가지고 있고 각각의 web worker는 자신의 이벤트 루프를 수행하기 때문에 서로 독립적으로 실행된다. 그러나 같은 도메인(origin)의 모든 브라우저 창들은 동기적으로 통신할 수 있기 때문에 이벤트 루프를 서로 공유한다. 이벤트 루프는 지속적으로 돌아가면서, 대기열에 들어가있는 task들을 실행시킨다. 한 이벤트 루프는 실행 순서를 보장하는 여러개의 task를 가지고 있지만 각 이벤트 루프의 실행단계에서 어떤 task를 실행시킬지는 브라우저가 선택한다. 이를 통해 브라우저는 유저 input과 같은 성능에 민감한 task에 우선권을 부여할 수 있다.</p><p>task는 브라우저 내부에서 javascript/DOM으로 들어가 순차적으로 발생하도록 예약된다. task 사이에서 브라우저는 렌더링을 새로한다. 마우스 클릭으로 이벤트 콜백을 발생시키려면 HTML 파싱 처럼 task예약이 필요하다. 위에서 보았던 <code>setTimeout</code>이 좋은 사례이다.</p><p><code>setTimeout</code>은 주어진 delay를 기다린 다음 콜백을 위한 새로운 task를 예약한다. 이것이 <code>setTimeout</code>로그가 <code>script end</code>로그 이후에 출력되는 이유이다. <code>script end</code>로그는 첫번째 task의 일부이고 <code>setTimeout</code>은 별도의 task에서 발생한 로그이다. </p><p>일반적으로 microtask는 현재 실행되고 있는 script 바로 다음에 발생해야하는 작업으로 예약된다. 예를들어 일괄처리에 대한 반응(?)이나 새로운 task를 만들때의 단점 없이 비동기로 어떤 작업을 처리하기 위해 사용된다. microtask의 대기열은 다른 자바스크립트가 실행중이 아니거나 task가 끝난 후에 처리된다. 대기중인 microtask는 대기열의 끝에 더해지고 실행된다. <code>observer callback</code>이나 <code>promise callback</code>이 대표적인 microtask다.</p><p>promise가 처리될 때 혹은 이미 처리된 promise는 callback을 처리하기 위해 microtask의 대기열에 들어간다. 이눈 promise가 처리 여부와 상관없이 그 callbak이 비동기로 실행됨을 보장한다. 즉, 처리된 promise에 대해서 <code>then(resolve, reject)</code>이 호출되면 그 즉시 microtask가 대기열에 들어간다. 이것이 바로 <code>promise1</code>과 <code>promise2</code>가 <code>script end</code> 다음에 출력되는 이유이다. 현재 실행되는 script(task)가 끝난 다음에 반드시 microtask가 처리되어야 한다. <code>promise1</code>과 <code>promise2</code>가 <code>setTimeout</code> 이전에 출력되는 이유는 microtask가 다음에 실행될 task 이전에 처리되기 때문이다.</p><p>위 코드를 다시 살펴보면 아래와 같은 순서로 처리됨을 알 수 있다.</p><blockquote><p>원문에서 확인함을 추천, 원문에는 animation으로 코드의 실행과정과 task queue 및 js 실행 스택을 확인할 수 있다.</p></blockquote><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 - task1 실행: script, script start 출력</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 - task2 등록: timer task 대기열에 들어감</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="comment">// 8 - task2 실행</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 - microtask1 등록: promise가 microtask 대기열에 들어감</span></span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="comment">// 5 - microtask1 실행: promise1 출력</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise1'</span>);</span><br><span class="line"><span class="comment">// 6 - microtask2 등록: </span></span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="comment">// 7 - microtask2 실행: promise2 출력</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 - task1 종료: script end 출력</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><h3 id="그럼-어떤-브라우저에서는-왜-다르게-동작할까"><a href="#그럼-어떤-브라우저에서는-왜-다르게-동작할까" class="headerlink" title="그럼 어떤 브라우저에서는 왜 다르게 동작할까?"></a>그럼 어떤 브라우저에서는 왜 다르게 동작할까?</h3><p>위에서 언급한 특정 브라우저에서는 <code>promise1</code>과 <code>promise2</code>가 두번째 task인 <code>setTimeout</code> 이후에 출력된다. 이때는 promise가 microtask가 아닌 새로운 task로 인식되어 <code>setTimeout</code> task 이후에 출력되는 것이 아닐까 생각된다.</p><p>promise가 HTML이 아니라 ECMAScript에서 나왔기 때문에 변명의 여지가 있어보입니다. ECMAScript는 microtask와 비슷한 job의 개념을 가지고 있다. 그러나 그 관계가 명확한 것은 아니지만(<a href="https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-16" rel="external nofollow noopener noreferrer" target="_blank">vague mailing list discussions</a>), 일반적으로 promise는 microtask 대기열의 일부로 받아들여지고 있다.</p><p>promise를 task로써 다룰 때는 성능상 문제가 발생할 수 있는데, promise callback이 렌더링과 같은 task 관련 작업들에 의해 불필요하게 연기될수도 있기 때문이다. 또한 이는 다른 자바스크립트 소스와의 상호작용으로 인해서 무결성이 훼손될수도 있고 그로인해 다른 API와의 상호작용이 깨질수도 있다.</p><p>해당 이슈는 Edge 브라우저에서 이미 완결되었다(<a href="https://connect.microsoft.com/IE/feedback/details/1658365" rel="external nofollow noopener noreferrer" target="_blank">Edge ticket</a>).</p><h3 id="task인지-microtask인지는-어떻게-알수-있을까"><a href="#task인지-microtask인지는-어떻게-알수-있을까" class="headerlink" title="task인지 microtask인지는 어떻게 알수 있을까?"></a>task인지 microtask인지는 어떻게 알수 있을까?</h3><p>테스트 방법은 하나다. 비록 올바르게 구현됐다는 가정이 필요하지만, promise와 <code>setTimeout</code>과 관련된 로그의 출력을 보면 알 수 있다.</p><p>더 확실한 방법은 스펙을 찾아보면 된다. 예를들어 task가 대기열에 들어가는 과정을 나타낸 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#timer-initialisation-steps" rel="external nofollow noopener noreferrer" target="_blank">step 14 of setTimeout</a>을 살펴볼 수 있고, microtask가 큐에 들어가는 과정을 나타낸 <a href="https://dom.spec.whatwg.org/#queue-a-mutation-record" rel="external nofollow noopener noreferrer" target="_blank">step 5 of queueing a mutation record</a>를 보면 좀 더 자세하게 알 수 있다.</p><p>이미 얘기한것 처럼 ECMAScript에서는 microtask는 job으로 불린다. <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen" rel="external nofollow noopener noreferrer" target="_blank">step 8 .a PerformPromiseThen</a>을 보면, EnqueueJob은 microtask 대기열에서 호출됨을 알 수 있다.</p><p>다음에는 좀더 복잡한 예제를 살펴보자.</p><h3 id="Level-1-bossfight"><a href="#Level-1-bossfight" class="headerlink" title="Level 1 bossfight"></a>Level 1 bossfight</h3><p>아래에 간단한 html이 있다.<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p></p><p>그리고 아래 자바스크립트 코드 일부가 있다. 이때 <code>div .inner</code>를 클릭하면 로그가 어떻게 출력될까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// outer 클래스 element와 inner 클래스 element를 가져온다.</span></span><br><span class="line"><span class="keyword">var</span> outer = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// outer element의 상태(attribute) 변화를 감시한다.</span></span><br><span class="line"><span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mutate'</span>);</span><br><span class="line">&#125;).observe(outer, &#123;</span><br><span class="line">  attributes: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// click 리스너</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  outer.setAttribute(<span class="string">'data-random'</span>, <span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inner, outer element에 클릭 이벤트를 붙인다.</span></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, onClick);</span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, onClick);</span><br></pre></td></tr></table></figure><p><code>div.inner</code>를 클릭했을 때와, <code>div .outer</code>를 클릭했을때 어떻게 다른지 알겠는가? 당신이 여전히 맞을수도 있겠지만 불행하게도 브라우저마다 동일한 결과를 보여주지는 않는다(버전 명시가 안되있어서 현재 최신 버전에서도 동일할지는 테스트가 필요하겠다).</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chrome : </span><br><span class="line">click - promise - mutate - click - promise - mutate - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Firefox : </span><br><span class="line">click - mutate - click - mutate - <span class="keyword">timeout</span> - promise - promise - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Safari : </span><br><span class="line">click - mutate - click - mutate - promise - promise - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Edge</span><br><span class="line">click - click - mutate - <span class="keyword">timeout</span> - promise - <span class="keyword">timeout</span> - promise</span><br></pre></td></tr></table></figure><h3 id="어떤-브라우저가-맞을까"><a href="#어떤-브라우저가-맞을까" class="headerlink" title="어떤 브라우저가 맞을까?"></a>어떤 브라우저가 맞을까?</h3><p>클릭 이벤트를 전달하는것은 하나의 task다(즉, <code>div .inner</code>에서 클릭이 발생해서 <code>div .outer</code>로 버블링되더라도 두개의 동작이 별도의 task가 아니라 하나의 task라는 의미). Mutation observer나 promise callback은 microtask로 대기열에 들어가고 <code>setTimeout</code> 콜백은 task로 대기열에 들어간다. 즉 아래와 같은 방식으로 처리된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 - task1 실행: script 실행</span></span><br><span class="line"><span class="keyword">var</span> outer = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 8 - microtask2 실행: mutation observer 콜백 실행</span></span><br><span class="line">  <span class="comment">// 13 - microtask4 실행: mutation observer 콜백 실행</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mutate'</span>);</span><br><span class="line">&#125;).observe(outer, &#123;</span><br><span class="line">  attributes: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 - task2 등록 및 실행: inner 영역 click 이벤트 발생</span></span><br><span class="line"><span class="comment">// 9 - task2 계속 실행 : inner에서 outer로 click 이벤트 버블링</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4 - task3 등록: inner 영역 타이머 task 생성, setTimeout</span></span><br><span class="line">  <span class="comment">// 10 - task4 등록: outer 영역 타이머 task 생성, setTimeout</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 14 - task3 실행: inner 영역 타이머 콜백 실행</span></span><br><span class="line">    <span class="comment">// 15 - task4 실행: outer 영역 타이머 콜백 실행</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 5 - microtask1 등록: inner 영역 promise</span></span><br><span class="line">  <span class="comment">// 11 - microtask3 등록: outer 영역 promise</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 7 - microtask1 실행 : inner 영역의 promise 콜백 실행</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6 - microtask2 등록: inner 영역 Mutation observer</span></span><br><span class="line">  <span class="comment">// 12 - microtask4 등록: outer 영역 Mutation observer 등록</span></span><br><span class="line">  outer.setAttribute(<span class="string">'data-random'</span>, <span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 - task1 종료 : inner 및 outer element에 click 이벤트 리스너 등록</span></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, onClick);</span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, onClick);</span><br></pre></td></tr></table></figure><p>역시 크롬이 맞다(글 작성자가 구글 직원이다). 다른 자바스크립트가 실행되고 있지 않다고 가정하고 microtask가 task의 끝에서 처리된다기 보다는 콜백들이 모두 처리된 이후에 처리된다고 보는게 맞다. 이 규칙은 콜백을 호출하는 HTML 스펙에 잘 정의되어 있다. </p><blockquote><p>만약 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects" rel="external nofollow noopener noreferrer" target="_blank">자바스크립트 스택</a>이 비어있다면 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" rel="external nofollow noopener noreferrer" target="_blank">microtask가 실행될지를 체크</a>하다.<br>- <a href="https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback" rel="external nofollow noopener noreferrer" target="_blank">HTML: Cleaning up after a callback</a> step 3</p></blockquote><p>microtask 대기열이 처리중이 아니라면 microtask 수행 체크는 microtask 대기열을 지나가버린다. 비슷하게 ECMAScript는 jobs에 대해 이렇게 말한다.</p><blockquote><p>job의 실행은 단지 실행 컨택스트가 동작하지 않을때만 초기화된다.<br><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript: Jobs and Job Queues</a></p></blockquote><h3 id="다른-브라우저들은-뭐가-잘못됐을까"><a href="#다른-브라우저들은-뭐가-잘못됐을까" class="headerlink" title="다른 브라우저들은 뭐가 잘못됐을까?"></a>다른 브라우저들은 뭐가 잘못됐을까?</h3><p>Firefox와 Safari에서는 mutation 콜백에서 보여줬듯이 클릭 리스너 사이에 microtask 대기열을 제대로 소진시킨다. 그러나 promise는 좀 더 다른 방식으로 큐에 삽입된다. job과 microtask의 연관성이 모호하다는 것을 감안하더라도 여전히 콜백 사이에서 실행될것이라 기대된다. Firefox 이슈를 확인해보자(<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1193394" rel="external nofollow noopener noreferrer" target="_blank">Firefox ticket</a>, <a href="https://bugs.webkit.org/show_bug.cgi?id=147933" rel="external nofollow noopener noreferrer" target="_blank">Safari ticket</a>).</p><p>이전에 살펴보았듯이 Edge에서는 promise가 제대로 동작하지 않는다(task로 인식). 그리고 또다른 문제는 microtask 대기열이 클릭 리스너 사이에서 소진되는 것이 아니라 모든 리스너가 호출된 다음에 호출된다. 이것이 두 클릭 로그 이후에 하나의 mutate가 찍힌 이유다.(<a href="https://connect.microsoft.com/IE/feedbackdetail/view/1658386/microtasks-queues-should-be-processed-following-event-listeners" rel="external nofollow noopener noreferrer" target="_blank">Bug ticket</a>)</p><h3 id="Level-1-boss’s-angry-older-brother-왜-이런-표현을-쓸까"><a href="#Level-1-boss’s-angry-older-brother-왜-이런-표현을-쓸까" class="headerlink" title="Level 1 boss’s angry older brother (왜 이런 표현을 쓸까..?)"></a>Level 1 boss’s angry older brother (왜 이런 표현을 쓸까..?)</h3><p>그렇다면 아래처럼 자바스크립트에서 직접 click 함수를 호출하는 경우에는 어떨까?<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 위 코드와 동일, 직접 리스너를 호출하는 아래 코드만 추가</span></span><br><span class="line">inner.<span class="built_in">click</span>();</span><br></pre></td></tr></table></figure><p></p><p>조금 다른 결과가 나왔다. 브라우저 별로 어떻게 다른지도 살펴보자</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chrome : </span><br><span class="line">click - click - promise - mutate - promise - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Firefox : </span><br><span class="line">click - click - mutate - <span class="keyword">timeout</span> - promise - promise - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Safari : </span><br><span class="line">click - click - mutate - promise - promise - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Edge</span><br><span class="line">click - click - mutate - <span class="keyword">timeout</span> - promise - <span class="keyword">timeout</span> - promise</span><br></pre></td></tr></table></figure><p>다른 브라우저는 제쳐두고서라도 크롬에서도 다른 결과가 발생했다(이와중에 Edge는 동일하다). 여러번 테스트 해보아도 동일한 결과가 나온다.</p><h3 id="왜-다른것일까"><a href="#왜-다른것일까" class="headerlink" title="왜 다른것일까?"></a>왜 다른것일까?</h3><p>그 이유는 자바스크립트 코드 마지막에서 <code>inner.click()</code>이 실행되면 script가 아직 종료되기 전이므로 자바스크립트 스택이 비어있지 않은 상태가 된다(자바 스크립트 스택이 비어 있지 않으므로 microtask를 처리할 수 없다). 그렇기 때문에 microtask가 실행되지 않고 바로 outer로 버블링되어 클릭 리스너가 실행되는 것이다.<br>(mutate가 한번만 출력되는 이유는 하나의 mutation microtask가 등록되어 있으면 다른 mutation task를 등록할 수 없기 때문)</p><p>결론은 역시(?) 크롬이 제대로된 결과를 출력한다는 것.</p><p>위에서 언급했던것 처럼 리스너 콜백이 호출된 후 자바스크립트 실행 스택이 비어있는 경우에만 microtask 체크를 수행하기 때문에 <code>inner.click()</code>으로 메서드가 호출중인 상태에서는 microtask 체크가 진행되지 않는다.</p><p>이전에 보았던 예제에서는 microtask가 리스너 콜백 사이에서 실행되었지만(사용자에 의해 클릭 동작이 처리되었으므로) <code>.click()</code>은 동기적으로 이벤트가 전달되므로 <code>.click()</code>을 호출하는 스크립트는 여전히 콜백 사이의 스택에 남아있게 된다. 이 규칙은 자바스크립트가 실행중일 때는 microtask가 끼어들지 못한다는 것을 보장한다. 이는 우리가 리스너 콜백 사이에서 microtask를 처리하지 못하고 모든 리스너가 실행된 후에 처리된다는 것을 의미한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;원본: &lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot; rel=&quot;external nofollow noopener noreferre
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="task" scheme="http://blueshw.github.io/tags/task/"/>
    
      <category term="microtask" scheme="http://blueshw.github.io/tags/microtask/"/>
    
      <category term="Promise" scheme="http://blueshw.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>[ES6, react] 리액트에서 화살표 함수(arrow function)는 선택이 아닌 필수</title>
    <link href="http://blueshw.github.io/2017/07/01/arrow-function/"/>
    <id>http://blueshw.github.io/2017/07/01/arrow-function/</id>
    <published>2017-07-01T04:00:01.000Z</published>
    <updated>2017-07-01T15:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>리액트를 개발하다보면 이런 코드를 본적 있을것입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.someFunction.bind(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>this(아마도 react 클래스 객체)에 속한 어떤 메서드를 다시 this에 bind한다라?? 굳이 왜 이런짓을 해야하는지 의문이 들만합니다.</p><p>리액트에서 이러한 코드가 빈번하게 작성되는 이유를 알기 위해서 우선 <code>bind()</code>가 무슨 역할을 하는지부터 알아보겠습니다.</p><h4 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h4><p>bind 함수는 바인드하는 함수에서 사용하는 <code>this</code>의 대상을 지정해주는 역할을 합니다. 잘 사용하지 않아서 그렇지 그다지 어려운 개념은 아닙니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    name: <span class="string">"a"</span>,</span><br><span class="line">    aFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objB = &#123;</span><br><span class="line">    name: <span class="string">"b"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objA.aFunc(); <span class="comment">// (1)</span></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line">objA.aFunc.bind(objB); <span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">const</span> foo = objA.aFunc.bind(objB); <span class="comment">// (3)</span></span><br><span class="line">foo(); (<span class="number">4</span>)</span><br><span class="line"><span class="comment">// b</span></span><br></pre></td></tr></table></figure><p><code>objA</code>와 <code>objB</code>라는 객체가 있습니다. objA 객체는 <code>name</code>이라는 값과 <code>aFunc</code>라는 함수를 속성으로 가지고 있습니다. 반면 objB 객체는 <code>name</code>이라는 값만 가지고 있죠. </p><p>(1) objA의 aFunc함수를 실행하면 예상대로 <code>a</code>가 출력됩니다. </p><p>(2) objA 객체의 aFunc 함수에서 bind(objB)를 호출합니다. 함수가 호출되었지만, 아무것도 출력되지 않죠. 다만, 원본 aFunc함수와 동일한 기능을 하는 바인딩된 새로운 함수가 만들어집니다. 이때, bind메서드에 전해진 인자는 복사된 바인딩 함수의 this로 전달됩니다. 즉, aFunc 함수내의 <code>this</code>가 <code>objB</code>가 되는 것이죠. 이게 <code>bind()함수</code>가 하는 일의 전부입니다.</p><p>(3) 바인드 함수를 변수에 할당합니다.</p><p>(4) 실행하면 <code>b</code>가 출력됩니다.</p><h3 id="React에서의-bind"><a href="#React에서의-bind" class="headerlink" title="React에서의 bind()"></a>React에서의 bind()</h3><p>처음 잠깐 살펴보았지만, 리액트에서 bind()함수는 다음과 같이 사용됩니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;<span class="type">Goodbye</span> bind&lt;/button&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> <span class="type">BindTest</span>;</span><br></pre></td></tr></table></figure><p>간단한 React 컴포넌트입니다. 버튼을 클릭하면 <code>this</code>에 해당하는 정보가 출력됩니다.</p><img src="/2017/07/01/arrow-function/bind.png"><p>버튼 태그의 onClick 속성을 보면 bind() 함수가 사용되고 있는걸 알수 있습니다. 근데 좀 이상합니다. this의 handleClick 함수에다가 this 객체를 바인드시켰습니다. 같은 this인데 굳이 또 바인드해주는 이유가 뭘까요? bind 함수를 빼보겠습니다. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithoutBindTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;<span class="type">Goodbye</span> bind without <span class="keyword">this</span>&lt;/button&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> <span class="type">WithoutBindTest</span>;</span><br></pre></td></tr></table></figure><p>어떤 결과가 나올까요?</p><img src="/2017/07/01/arrow-function/withoutbind.png"><p><code>null</code>이 출력되었습니다. 왜 null이 출력되었을까요?</p><p>이 내용을 이해하려면 자바스크립트에서의 <code>this</code>에 대해 어느정도 알고 있어야 합니다. </p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>객체지향 언어에서의 일반적인 this의 의미(현재 객체를 지칭)와는 달리 자바스크립트의 this는 실행시의 context를 말하죠. 아래 예제를 보면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thisTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">thisTest.value = <span class="string">"I am this"</span>;</span><br><span class="line">thisTest();</span><br></pre></td></tr></table></figure><p><code>&quot;I am this&quot;</code>가 나올거라는 예상과는 달리 <code>undefined</code>가 출력됩니다. 왜냐하면 <code>thisTest()</code>가 출력될 때의 context가 전역객체이기 때문입니다. thisTest.value는 thisTest에 속성인데 전역객체에서 value를 찾으려고 하니 undefined가 나올수 밖에 없습니다(window 객체가 아니라 undefined인 이유는 React가 기본적으로 strict 모드에서 실행되기 때문입니다). </p><p>“I am this”를 출력하려면, this에 해당하는 객체의 메서드를 호출하면 this.value값을 가져올 수 있습니다. 아래 예제를 보면, </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thisTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">thisTest.value = <span class="string">"I am this"</span>;</span><br><span class="line">thisTest.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">thisTest.func();</span><br></pre></td></tr></table></figure><p><code>thisTest.func</code> 함수를 만들어서 그안에서 <code>this.value</code>를 출력합니다. thisTest 객체의 func() 메서드를 호출하면 이 때는 <code>this</code>가 thisTest가 되기 때문에 정상적으로 this.value를 가져와 “I am this”를 출력합니다.</p><p>이제, 리액트로 다시 돌아가보죠.</p><h3 id="React에서의-this"><a href="#React에서의-this" class="headerlink" title="React에서의 this"></a>React에서의 this</h3><p>WithoutBindTest 클래스의 render() 함수를 다시 살펴보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;Goodbye bind without <span class="keyword">this</span>&lt;/button&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컴포넌트의 render()함수가 실행되면 DOM이 그려질것입니다. 이때 this는 WithoutBindTest 객체를 가리키는것이 맞습니다. 하지만 handleClick()함수가 호출될때의 this는 WithoutBindTest가 아닌 전역객체(Window)를 의미합니다. 왜냐하면 this라는 값은 호출하는 문맥(context)에의해 좌우되는데 클릭이 실행되는 문맥이 바로 전역(window)객체이기 때문이죠.</p><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><p>click, change 등의 이벤트 리스너를 붙여줄때마다 <code>bind()</code>함수를 작성하는건 귀찮은 일입니다. ES6의 <code>화살표함수</code>를 사용하면 이 문제를 간단히 해결할 수 있습니다. BindTest를 화살표 함수를 이용해 새로 작성해보았습니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = () =&gt; &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;<span class="type">Goodbye</span> bind&lt;/button&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> <span class="type">BindTest</span>;</span><br></pre></td></tr></table></figure><p>이제는 this가 무엇인지 걱정할 필요가 없습니다. 화살표 함수의 this는 외부함수(부모함수)의 this를 상속받기 때문에 this는 항상 일정합니다. 위 예제의 경우에는 BindTest 클래스(사실 함수입니다)가 되겠죠.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>bind()함수는 전달된 인자를 this로 보내는 바인딩 함수를 만듭니다.<br>this는 다른 언어와 달리 실행 문맥(context)에 따라 변합니다.<br>React에서 이벤트 핸들러 함수를 바인드할때 화살표 함수를 사용합니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;리액트를 개발하다보면 이런 코드를 본적 있을것입니다.&lt;/p&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="es6" scheme="http://blueshw.github.io/tags/es6/"/>
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="bind" scheme="http://blueshw.github.io/tags/bind/"/>
    
      <category term="this" scheme="http://blueshw.github.io/tags/this/"/>
    
      <category term="arrow function" scheme="http://blueshw.github.io/tags/arrow-function/"/>
    
  </entry>
  
  <entry>
    <title>[번역] 프레젠테이션 컴포넌트와 컨테이너 컴포넌트</title>
    <link href="http://blueshw.github.io/2017/06/26/presentaional-component-container-component/"/>
    <id>http://blueshw.github.io/2017/06/26/presentaional-component-container-component/</id>
    <published>2017-06-26T11:04:59.000Z</published>
    <updated>2017-07-01T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>원본 : <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0</a><br>2년이나 지난 글이지만, 컴포넌트를 어떻게 구현해야 하는 문제에 있어서는 이만한 가이드가 없다고 생각해서 번역해보았습니다.<br>자연스럽지 못한 부분, 의역이 다수 포함되어 있을 수 있습니다.</p></blockquote><p>리액트 어플레케이션을 만들때 제가 찾은 아주 유용하면서 간단한 패턴이 있습니다. 만약 여러분이 <a href="https://facebook.github.io/react/blog/2015/03/19/building-the-facebook-news-feed-with-relay.html" rel="external nofollow noopener noreferrer" target="_blank">현재 리액트를 사용한다면</a>, 이미 알고 있을지도 모릅니다. <a href="https://medium.com/@learnreact/container-components-c0e67432e005" rel="external nofollow noopener noreferrer" target="_blank">이 페이지</a>)가 잘 설명해 줄것입니다. 하지만, 저는 몇가지 더 얘기하고 싶네요.</p><p>여러분은 컴포넌트를 더 쉽게 재사용할 수 있는 방법과 왜 컴포넌트를 두개의 카테고리로 나눠야 하는지에 대한 이유를 알게 될 것입니다. 이미 들어보았던, Fat and Skinny, Smart and Dumb, Stageful and Pure, 화면과 컴포넌트 등과 같은 개념들이 이미 있지만 저는 이것을 컨테이너와 프레젠테이션 컴포넌트(*)라 부르겠습니다. 이것들이 모두 동일한 개념은 아니지만, 기본적인 아이디어는 비슷합니다.</p><h3 id="프레젠테이션-컴포넌트"><a href="#프레젠테이션-컴포넌트" class="headerlink" title="프레젠테이션 컴포넌트"></a>프레젠테이션 컴포넌트</h3><ul><li>어떻게 보여지는지와 관련있다.</li><li>프레젠테이션 컴포넌트와 컨테이너 컴포넌트가 모두 그 안에 들어가 있을것(**)이고, 일부 DOM 마크업과 스타일도 가지고 있다.</li><li>종종 this.props.children을 통해서 노출된다.</li><li>Flux 액션이나 stores 등과 같은 앱의 나머지 부분들에 의존적이지 않다.</li><li>데이터를 가져오거나 변경하는 방법에 대해서 관여할 필요가 없다.</li><li>props를 통해 배타적으로 callback 함수와 데이터를 받는다.</li><li>상태를 거의 가지고 있지 않다(만약 상태를 가지고 있다면, 데이터에 관한 것이 아닌 UI 상태에 관한 것이다).</li><li>만약 상태, 생명주기, hooks, 또는 퍼포먼스 최적화가 필요없다면, <a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components" rel="external nofollow noopener noreferrer" target="_blank">유틸함수</a>로서 쓰여질것이다.</li><li>예를들면 페이지, 사이드바, 스토리, 유저정보, 리스트 등이 있다.</li></ul><h3 id="컨테이너-컴포넌트"><a href="#컨테이너-컴포넌트" class="headerlink" title="컨테이너 컴포넌트"></a>컨테이너 컴포넌트</h3><ul><li>어떻게 동작하는지와 관련있다.</li><li>프레젠테이션 컴포넌트와 마찬가지로 프레젠테이션 컴포넌트와 컨테이너 컴포넌트 모두 가지고 있지만 감싼 divs를 제외하고는 DOM 마크업을 가지고 있지 않는다. 스타일 역시 가지고 있지 않는다.</li><li>데이터와 기능(행동)을 프레젠테이션 컴포넌트와 다른 컴포넌트에 제공한다.</li><li>Flux(or Redux) 액션을 호출하고, 프레젠테이션 컴포넌트에 콜백함수로써 제공한다.</li><li>데이터 소스 역할을 하기 때문에 상태가 자주 변경된다.</li><li>직접 만드는것 보단 대게 React Redux의 connect() 함수, Relay의 createContainer() 함수, Flux Utils의 Container.create()와 같은 <a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750" rel="external nofollow noopener noreferrer" target="_blank">Higher Order Components</a>를 이용해서 만들어진다.</li><li>예를들면 유저페이지, 팔로워 사이드바, 스토리 컨테이너, 팔로우한 유저 리스트 등이 있다.</li></ul><p>저는 이것들을 확실하게 구분하기 위하여 서로 다른 폴더에 생성합니다.</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>이 방법으로 컴포넌트를 작성하면 당신의 앱(기능)과 UI에 대한 구분을 이해하기가 더 수월하다.</li><li>재사용성이 더 뛰어나다. 완전히 서로 다른 상태값과 함께 같은 프레젠테이션 컴포넌트를 사용할 수 있고, 재사용 될 수 있는 별도의 컨테이너 컴포넌트로 변경할 수 있다.</li><li>프레젠테이션 컴포넌트는 말하자면 앱의 팔레트와 같다. 앱의 싱글페이지 위에서 앱의 로직을 건드리지 않고 디자이너에게 모든 변화를 조정하게 할 수 있다.</li><li>이것은 사이드바, 페이징, 컨텍스트메뉴와 같은 레이아웃 컴포넌트를 추출하도록 할것이고, 이것은 동일한 마크업이나 몇몇의 컨테이너 레이아웃을 반복해서 작성하는 대신 this.props.children을 통해서 구현될 수 있다.</li></ul><blockquote><p>컴포넌트는 DOM을 생성하지 말아야 합니다. 컴포넌트는 단지 UI와 관련된 것들을 조합하는 것을 제공하는 것이 필요합니다.</p></blockquote><p>이러한 이점을 당신의 앱에 적용해보세요.</p><h3 id="언제-컨테이너를-도입해야하나요"><a href="#언제-컨테이너를-도입해야하나요" class="headerlink" title="언제 컨테이너를 도입해야하나요?"></a>언제 컨테이너를 도입해야하나요?</h3><p>우선 앱을 만들때 프레젠테이션 컴포넌트를 먼저 만드세요. 그러면 너무 많은 props를 중간 컴포넌트로 보내야 한다는 것을 깨닫게 될것입니다. 전달받은 props를 사용하지 않고 아래로 전달하기만 하는 컴포넌트나 자식 컴포넌트가 더 많은 데이터를 필요로 할때 모든 중간 컴포넌트를 재구성해야하는 컴포넌트들이 있다는 것을 알게 될것입니다. 바로 이 때 컨테이너 컴포넌트를 도입해야합니다. 데이터나 아무 상관없는 중간 컴포넌트에 대해 걱정이 없는 leaf 컴포넌트의 행위가 담긴 props를 얻을 수 있는 방법이 될 것입니다.</p><p>리팩토링이 진행중이기 때문에 처음부터 도입하려고 시도해서는 안됩니다. 이 패턴을 실험해보려면, 어떤때에 함수를 추출할지를 아는것 처럼 어떤때에 컨테이너를 추출해야하는지를 직감으로 알아야 합니다. 저의 <a href="https://egghead.io/series/getting-started-with-redux" rel="external nofollow noopener noreferrer" target="_blank">free Redux Egghead series</a>가 당신에게 도움이 될것입니다.</p><h3 id="다른-분리방법들"><a href="#다른-분리방법들" class="headerlink" title="다른 분리방법들"></a>다른 분리방법들</h3><p>프레젠테이션 컴포넌트와 컨테이너 컴포넌트의 차이는 기술적인 부분이 아니라는 것을 이해하는 것은 중요합니다. 이것은 오히려 용도에 따른 차이입니다.</p><p>대조적으로, 여기 기술적으로 관련된 구분이 몇가지 있습니다.</p><ul><li>Stateful and Stateless<br>어떤 컴포넌트들은 React의 setState() 메소드를 사용한다. 컨테이너 컴포넌트는 상태가 자주 변하는 경향(stateful)이 있고 프레젠테이션 컴포넌트는 그렇지 않은 경향(stateless)이 있다. 다만 이것은 엄격한 규칙은 아니다. 프레젠테이션 컴포넌트에서 상태가 자주 바뀔수도 있고, 컨테이너 컴포넌트에서 상태변화가 없을수도 있다.</li><li>Classes and Function<br><a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components" rel="external nofollow noopener noreferrer" target="_blank">리액트 0.14부터</a> 컴포넌트를 클래스와 함수 모두로 선언이 가능하다. 함수 컴포넌트는 정의가 간단하지만 클래스 컴포넌트에 비해서 몇가지 부족한 점이 있다. 이러한 제한의 일부는 미래에는 없어질 수도 있지만 현재는 존재한다. 왜냐하면 함수 컴포넌트는 이해하기 쉽기 때문이다. 만약 state, 라이프사이클 후킹 또는 퍼포먼스 최적화가 필요하다면 반드시 클래스 컴포넌트를 사용해야한다. 왜냐하면 이들은 클래스 컴포넌트에서만 사용할 수 있기 때문이다.</li><li>Pure and Impure<br>만약 같은 props와 state가 주어졌을때 같은 결과가 돌아오는것이 보장된다면 사람들은 컴포넌트가 pure하다고 말한다. 퓨어 컴포넌트는 클래스나 함수로 모두 정의 될수 있습니다. 그리고 stateful하거나 stateless 할수도 있다. 퓨어 컴포넌트의 또다른 중요한 점은 props와 state의 변화에 깊게 관여하지 않다. 그래서 퓨어 컴포넌트의 렌더링 퍼포먼스는 shouldComponentUpdate() 함수의 얕은 비교에 의해 최적화 될 수 있다. 현재는 클래스에서만 shouldComponentUpdate() 함수를 사용할 수 있지만 아마도 나중에는 함수에서는 사용할 수 있을것이다.</li></ul><p>프레젠테이션 컴포넌트와 컨테이너 컴포넌트 둘다 어느쪽 컴포넌트에나 들어갈 수 있습니다. 제 경험에 의하면 프레젠테이션 컴포넌트는 stateless한 pure 함수가 되는 경향이 있고, 컨테이너 컴포넌트는 stateful한 pure 클래스가 되려는 경향이 있습니다. 하지만 규칙은 아니고 주목할만한 것입니다. 왜냐하면 저는 구체적인 상황들에서 정확히 반대의 경우로 만들어지는 것을 보았기 때문입니다.</p><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><p><a href="https://gist.github.com/chantastic/fc9e3853464dffdb1e3c" rel="external nofollow noopener noreferrer" target="_blank">This Gist</a> by <a href="https://twitter.com/chantastic" rel="external nofollow noopener noreferrer" target="_blank">Michael Chan</a></p><h3 id="읽을거리"><a href="#읽을거리" class="headerlink" title="읽을거리"></a>읽을거리</h3><ul><li><a href="https://egghead.io/series/getting-started-with-redux" rel="external nofollow noopener noreferrer" target="_blank">Getting Started with Redux</a></li><li><a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750" rel="external nofollow noopener noreferrer" target="_blank">Mixins are Dead, Long Live Composition</a></li><li><a href="https://medium.com/@learnreact/container-components-c0e67432e005" rel="external nofollow noopener noreferrer" target="_blank">Container Components</a></li><li><a href="http://bradfrost.com/blog/post/atomic-web-design/" rel="external nofollow noopener noreferrer" target="_blank">Atomic Web Design</a></li><li><a href="https://facebook.github.io/react/blog/2015/03/19/building-the-facebook-news-feed-with-relay.html" rel="external nofollow noopener noreferrer" target="_blank">Building the Facebook News Feed with Relay</a></li></ul><h3 id="각주"><a href="#각주" class="headerlink" title="각주"></a>각주</h3><blockquote><p>* 이전 버전의 아티클에서 저는 smart and dumb 컴포넌트라고 불렀습니다. 그러나 이것은 프레젠테이션 컴포넌트에게 너무나 심한 표현이었습니다.<br>그리고 가장 중요한점은 목적의 차이에 대해서 정확하게 설명할 수 없다는 것이었습니다. 저는 새로운 표현이 더 낫다고 생각했고 당신도 그랬으면 좋겠네요!</p><p>** 이전 버전의 아티클에서 저는 프레젠테이션 컴포넌트가 프레젠테이션 컴포넌트만 포함해야 한다고 주장했었습니다.<br>저는 더이상 다른 케이스를 생각해보지 않았습니다. 어떤 컴포넌트가 프레젠테이션 컴포넌트인지 컨테이너 컴포넌트인지는 그것의 구체적인 구현방법에 따라 달라지는 것입니다. 프레젠테이션 컴포넌트는 사이트 요청에 의한 변화가 없다면 컨테이너 컴포넌트로 변경이 가능해야 합니다. 그러므로 프레젠테이션 컴포넌트와 컨테이너 컴포넌트는 둘다 서로를 포함할 수 있습니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;원본 : &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot; rel=&quot;external nofollow noopener norefer
      
    
    </summary>
    
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="component" scheme="http://blueshw.github.io/tags/component/"/>
    
      <category term="container" scheme="http://blueshw.github.io/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>[react] react-router(리액트 라우터) v3 VS v4</title>
    <link href="http://blueshw.github.io/2017/06/22/static-routing-vs-dynamic-routing/"/>
    <id>http://blueshw.github.io/2017/06/22/static-routing-vs-dynamic-routing/</id>
    <published>2017-06-22T13:55:43.000Z</published>
    <updated>2017-07-01T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>react-router v4가 릴리즈 되면서 라우팅 적용 방식이 바뀌었습니다.<br>이전버전(v3)까지는 일반적으로 사용하는 정적 라우팅(Static Routing)이였다면, 동적 라우팅(Dynamic Routing)이 적용되었는데요.<br>여기서 말하는 정적 라우팅이란 일반적으로 최상위 페이지에 라우팅 정보를 모두 기입해 두고, 특정 패스가 브라우저에 입력되었을 때 해당되는 컴포넌트를 그려주는 방식을 말합니다. 모든 라우팅 정보가 한곳에 위치하기 때문에 관리하기 쉽다는 장점이 있겠지만, 정적이라는 특징 때문에 확장성과 재사용성은 떨어질 수 있습니다. 반면에 동적 라우팅의 경우에는 라우팅 정보를 한곳에 모아둘 필요가 없습니다. 라우팅이 필요한 컴포넌트에 직접 붙여 사용할 수 있기 때문에 동적으로 컴포넌트를 구성하는데 더 효율적이라 할 수 있습니다.</p><p>이외에도 몇가지 바뀐점이 꽤 있다보니 이전버전과 어떤 점이 달라졌나 비교해볼까 합니다.</p><p><a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">공식 홈페이지 바로가기</a></p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>설치하는 모듈을 선택할 수 있는데요. 이전 버전까지는 <code>react-router</code> 하나만 사용 할 수 있었는데,<br>이번에 버전업 되면서 몇가지 늘었습니다. react-router는 코어 모듈이구요.<br>이밖에도 <code>react-router-dom</code>, <code>react-router-native</code> 등이 추가되었습니다.<br>react-router-dom은 react-router 모듈에 dom이 바인딩 되어 있다고 보시면 됩니다. 즉, 웹 개발자들을 위한 모듈이죠.<br>그리고 react-router-native는 이름에서도 알 수 있듯이 react-native를 개발할 때 사용하는 모듈입니다.<br>저는 웹개발자이기 때문에 당연히 react-router-dom을 사용하도록 하겠습니다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># v3</span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> react-router</span></span><br><span class="line"><span class="bash">npm install react-router</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># v4</span></span></span><br><span class="line"><span class="bash">yarn add react-router-dom</span></span><br><span class="line"><span class="bash">npm install react-router-dom</span></span><br></pre></td></tr></table></figure><h2 id="v3-VS-v4"><a href="#v3-VS-v4" class="headerlink" title="v3 VS v4"></a>v3 VS v4</h2><p>v3와 v4의 차이점을 간략히 비교해 보았습니다.</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">v3</th><th style="text-align:left">v4</th></tr></thead><tbody><tr><td style="text-align:center">라우팅</td><td style="text-align:left">정적(static) 라우팅</td><td style="text-align:left">동적(dynamic) 라우팅</td></tr><tr><td style="text-align:center">Route 컴포넌트</td><td style="text-align:left">라우트 정보를 프로젝트 최상단에 모두 정의</td><td style="text-align:left">코드 어디에나 사용 가능</td></tr><tr><td style="text-align:center">계층구조</td><td style="text-align:left">라우트 정보를 계층구조로 표현</td><td style="text-align:left">계층구조 대신 렌더링 되는 컴포넌트에 직접 구현 (계층구조 표현 안됨)</td></tr><tr><td style="text-align:center">히스토리</td><td style="text-align:left">browserHistory에 저장하여 Router 객체에 props로 삽입</td><td style="text-align:left">BrowserRouter 객체에 내장</td></tr></tbody></table><h2 id="v3의-라우팅-코드"><a href="#v3의-라우팅-코드" class="headerlink" title="v3의 라우팅 코드"></a>v3의 라우팅 코드</h2><p>프로젝트 구조를 자세히 설명하지는 않겠습니다.<br>간단히 구조만 살펴볼 것이기 때문에 최소한의 파일만으로 구성하였습니다.</p><p>react-router v3는 정적 라우팅을 사용하기 때문에 미리 라우팅 정보를 탑 레벨에서 모두 정해두고 시작합니다.<br>react-router는 계층구조로 설정할 수가 있는데, 최상위에 <code>Router</code> 컴포넌트를 만들고 <code>Route</code>(실제 패스에 따라 컴포넌트를 교체해주는 역할) 컴포넌트를 아래에 만듭니다. 그리고 또 그 아래에 <code>IndexRoute</code>가 있고 여러개의 <code>Route</code> 컴포넌트가 존재합니다.<br>어떤 url이 브라우저에 입력되면(또는 앵커 태그가 클릭되면), 각 라우터에 해당하는 컴포넌트가 렌더링 되는 구조입니다.</p><p>예를 들어 <code>http://localhost:3000/second</code> url이 브라우저에 입력되면 path가 <code>/</code>인 라우트를 먼저 찾고 렌더링 합니다. 그리고 뒤에 해당되는 <code>second</code>를 찾아서 해당되는 컴포넌트를 렌더링 합니다. </p><p>App.js 파일의 App 클래스를 보면, Header 컴포넌트 아래에 <code>{this.props.childern}</code>이 있는데, 이 부분이 바로 path가 <code>/</code>인 라우트 아래의 IndexRoute, first, second, third인 부분이 렌더링 되는곳 입니다.</p><p>마지막으로 라우터의 히스토리는 browserHistory에 저장해 둡니다. 그래야 브라우저에서 <code>뒤로가기</code>를 했을때 이전 페이지를 불러올 수 있기 때문이죠.</p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><p>앱이 처음 시작하는 부분인 index.js입니다.<br>index에서 직접 라우팅을 구현하였습니다.<br>third 뒤의 <code>:id</code> 부분은 컴포넌트의 <code>this.props.params.id</code> 형태로 전달되어 컴포넌트 내에서 사용할 수 있습니다.</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">import React from 'react';</span></span><br><span class="line"><span class="xml">import ReactDOM from 'react-dom';</span></span><br><span class="line"><span class="xml">import </span><span class="template-variable">&#123; Router, Route, IndexRoute, browserHistory &#125;</span><span class="xml"> from 'react-router';</span></span><br><span class="line"><span class="xml">import App, </span><span class="template-variable">&#123; Home, First, Second, Third, Item &#125;</span><span class="xml"> from './App.js';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=</span></span><span class="template-variable">&#123;browserHistory&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;App&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Home&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"first"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;First&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"second"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Second&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"third/"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Third&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">":id"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Item&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">  document.getElementById('root'),</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><h4 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h4><p>헤더의 메뉴 부분입니다.<br>버튼에 클릭했을때 라우터의 정보에 따라 컴포넌트를 바꿔줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/'&#125;&gt;</span>홈<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">first</span>'&#125;&gt;</span>첫번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">second</span>'&#125;&gt;</span>두번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">third</span>'&#125;&gt;</span>세번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h4><p>헤더를 제외한 모든 컴포넌트가 들어있는 App.js 파일입니다.</p><p>App 컴포넌트는 최상위 패스인 <code>/</code>에서 렌더링 되는 부분인데요. <code>Header</code>와 같이 공통으로 사용하는 컴포넌트를 여기에 붙여줍니다.<br>그러면, 어떤 url로 이동하더라도 Header는 계속 노출되겠지요.</p><p>Third 부분이 v4와 다른부분인데요. 컴포넌트 내에서 직접 라우팅 정보를 지정할 수 없기 때문에,<br>우회하는 방법으로 <code>this.props.children</code> 컴포넌트가 있는지 여부에 따라서 어떻게 렌더링할지를 결정합니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">Header</span> from './<span class="type">Header</span>.js';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">Link</span> &#125; from <span class="symbol">'react</span>-router';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;<span class="type">Header</span> /&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;홈 페이지&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;<span class="number">1</span>, 첫번째 페이지&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Second</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;<span class="number">2</span>, 두번째 페이지&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Third</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.dir(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;'/third/<span class="number">1</span>'&#125; style=&#123;&#123; marginRight: <span class="symbol">'5p</span>x' &#125;&#125;&gt;</span><br><span class="line">          <span class="number">1</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;'/third/<span class="number">2</span>'&#125;&gt;</span><br><span class="line">          <span class="number">2</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children</span><br><span class="line">          ? <span class="keyword">this</span>.props.children</span><br><span class="line">          : &lt;div&gt;</span><br><span class="line">              &lt;h3&gt;id를 선택해 주세요.&lt;/h3&gt;</span><br><span class="line">            &lt;/div&gt;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.params.id&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">App</span>;</span><br></pre></td></tr></table></figure><p>결과 화면입니다.</p><img src="/2017/06/22/static-routing-vs-dynamic-routing/result.png"><h2 id="v4의-라우팅-코드"><a href="#v4의-라우팅-코드" class="headerlink" title="v4의 라우팅 코드"></a>v4의 라우팅 코드</h2><p>비교를 위해서 v3와 동일한 화면으로 만들어 보겠습니다.</p><h4 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h4><p>Router(BrowserRouter) 컴포넌트에 히스토리가 내장되어 있는걸로 보입니다.<br>v3에서는 history 객체를 별도로 가져와 Router의 프로퍼티로 넣어줘야 했습니다만, v4에서는 어떤 설정도 해줄 필요가 없습니다.<br>또한, 라우터 컴포넌트 아래로 DOM 코드를 직접 넣어줄 수 있게 되었습니다.<br>이게 의미하는게 뭐냐면, 어떤 코드에서든 <code>Route</code> 컴포넌트를 넣을 수 있다는 뜻입니다.<br>즉, 라우트는 필요할때마다 동적으로 생성 가능하다는 것이죠.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Home, First, Second, Third &#125; <span class="keyword">from</span> <span class="string">'./App.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header.js'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/first"</span> component=&#123;First&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/first"</span> component=&#123;First&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/second"</span> component=&#123;Second&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/third"</span> component=&#123;Third&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/Router&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Header-js-1"><a href="#Header-js-1" class="headerlink" title="Header.js"></a>Header.js</h4><p>v3와 거의 같습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/'&#125;&gt;</span>홈<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">first</span>'&#125;&gt;</span>첫번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">second</span>'&#125;&gt;</span>두번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">third</span>'&#125;&gt;</span>세번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><h4 id="App-js-1"><a href="#App-js-1" class="headerlink" title="App.js"></a>App.js</h4><p>App 컴포넌트를 아예 만들지 않습니다. v3에서 App 컴포넌트의 역할은 공통으로 사용하는 컴포넌트를 붙여주기 위함이었는데요.<br>v4에서는 라우트 컴포넌트 내에 직접 다른 컴포넌트를 붙여주면 되기 때문에 App 컴포넌트는 더이상 필요하지 않습니다. </p><p>그리고 <code>Third</code> 컴포넌트는 위에서 동적라우팅 설명할때 잠깐 언급했던 것처럼<br>컴포넌트 내에서 라우트 정보를 직접 넣어줄 수 있기 때문에 훨씬 명확한 코드를 작성할 수 있는것 같습니다. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">Header</span> from './<span class="type">Header</span>.js';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">Route</span>, <span class="type">Link</span> &#125; from <span class="symbol">'react</span>-router-dom';</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;홈 페이지&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;<span class="number">1</span>, 첫번째 페이지&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Second</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;<span class="number">2</span>, 두번째 페이지&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Third</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;`$&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;/<span class="number">1</span>`&#125; style=&#123;&#123; marginRight: <span class="symbol">'5p</span>x' &#125;&#125;&gt;</span><br><span class="line">          <span class="number">1</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;`$&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;/<span class="number">2</span>`&#125;&gt;</span><br><span class="line">          <span class="number">2</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &lt;<span class="type">Route</span></span><br><span class="line">          exact</span><br><span class="line">          path=&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;</span><br><span class="line">          render=&#123;() =&gt; &lt;div&gt;&lt;h3&gt;id를 선택해 주세요.&lt;/h3&gt;&lt;/div&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;<span class="type">Route</span> path=&#123;`$&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;/:id`&#125; component=&#123;<span class="type">Item</span>&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.params.id&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과 화면입니다. 똑같습니다.</p><img src="/2017/06/22/static-routing-vs-dynamic-routing/result.png"><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>아직 깊이 살펴보지 못해서 어떤 장점이 더 있는지는 모르겠습니다만,<br>어떻게 보면 v4가 v3에 비해서 산만해 보일수도 있습니다.<br>한곳에서 모든 라우팅 정보를 볼 수 있는게 좋다고 생각할 수도 있으니까요.<br>하지만, 리액트의 철학과 어울리는 라우팅 방식은 v4의 동적 라우팅이 아닐까 생각이 듭니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react-router v4가 릴리즈 되면서 라우팅 적용 방식이 바뀌었습니다.&lt;br&gt;이전버전(v3)까지는 일반적으로 사용하는 정적 라우팅(Static Routing)이였다면, 동적 라우팅(Dynamic Routing)이 적용되었는데요.&lt;br&gt;여기
      
    
    </summary>
    
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="routing" scheme="http://blueshw.github.io/tags/routing/"/>
    
      <category term="react-router" scheme="http://blueshw.github.io/tags/react-router/"/>
    
      <category term="react-router v4" scheme="http://blueshw.github.io/tags/react-router-v4/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJs] create-react-app으로 react 시작하기</title>
    <link href="http://blueshw.github.io/2017/06/20/create-react-app/"/>
    <id>http://blueshw.github.io/2017/06/20/create-react-app/</id>
    <published>2017-06-20T09:40:02.000Z</published>
    <updated>2017-07-01T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>리액트를 본격적으로 사용하기 시작하면서 각종 라이브러리의 테스트 및 실험을 해볼 필요가 생겼습니다. 몇 가지 boilerplate 프로젝트를 찾아보다가 동료로부터 <a href="https://github.com/facebookincubator/create-react-app" rel="external nofollow noopener noreferrer" target="_blank">create-react-app</a>이라는 프로젝트에 대해 듣게 되었습니다(이제서야 알게되다니..).</p><p>대부분의 비공식적인 boilerplate 프로젝트들은 package.json과 같은 모듈 관리 파일에 필요한 모듈을 모두 정의해두고 설치해서 사용합니다. 그러다보니 특정 시점에 boilerplate 프로젝트를 다운받아 사용하다보면 어느새 오래된 프로젝트가 되어버리는 경우가 허다하죠. 워낙에 빠르게 변하는 js 환경이다 보니 일일이 변경되거나 업데이트된 부분을 바꿔주는것도 한계가 있습니다. create-react-app을 이용하면 이 문제는 한번에 해결됩니다. (물론 추가로 설치한 모듈들에 대한 관리는 해줘야 합니다)</p><p>설치는 아주 간단합니다.</p><p>우선 프로젝트를 받아서(git clone을 하던 zip으로 받던 상관없어요) create-react-app 모듈을 글로벌로 설치해줍니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g <span class="keyword">create</span>-react-app</span><br></pre></td></tr></table></figure><blockquote><p>node 버전은 v8.1.2를 사용하였습니다 (npm은 v5.0.3)</p></blockquote><p>그리고는 앱을 생성합니다.</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">create-react-app</span> <span class="string">react-test</span></span><br><span class="line"><span class="string">cd </span><span class="string">react-test</span></span><br></pre></td></tr></table></figure><p>만들어진 react-test 앱에 들어가보면 아래와 같은 구조로 프로젝트가 만들어져 있습니다.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">react-test/</span><br><span class="line">  README.md</span><br><span class="line">  node_modules/     <span class="meta"># 이미 modules가 설치되어 있습니다.</span></span><br><span class="line">  package.json      <span class="meta"># 의존성 패키지는 대부분 node_modules/react-scripts 모듈내에 선언되어 있습니다.</span></span><br><span class="line">  .gitignore</span><br><span class="line">  <span class="keyword">public</span>/</span><br><span class="line">    favicon.ico</span><br><span class="line">    <span class="keyword">index</span>.html</span><br><span class="line">    manifest.json</span><br><span class="line">  src/</span><br><span class="line">    App.css</span><br><span class="line">    App.js</span><br><span class="line">    App.test.js</span><br><span class="line">    <span class="keyword">index</span>.css</span><br><span class="line">    <span class="keyword">index</span>.js        <span class="meta"># 앱이 시작되는 부분입니다.</span></span><br><span class="line">    logo.svg</span><br><span class="line">    registerServiceWorker.js    <span class="meta"># prodution 레벨에서 로컬캐시로부터 리소스를 제공하기 위한 서비스 워커 관련 설정,</span></span><br></pre></td></tr></table></figure><p>앱을 실행해봅니다.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure><p>제대로 동작하는걸 확인합니다. 끝입니다.</p><p>만들어진 앱에 기본적으로 포함하고 있는 모듈은 아래와 같습니다.<br>이외에 필요한 모듈은 직접 설치하셔서 사용하면 되겠습니다.</p><ul><li>Webpack : minify, uglify 등을 포함한 모듈 번들링 도구</li><li>Babel : ES6, React 등의 문법을 ES5 코드로 변환시켜주는 트랜스파일러</li><li>Autoprefixer : 다양한 벤더(브라우저)들에게 적절한 CSS가 적용될 수 있도록 prefix를 붙여준다.</li><li>ESLint : 자바스크립트 lint, 코드 컨벤션과 오류 등을 잡아준다.</li><li>Jest : 자바스크립트 테스트 도구</li><li>이외에 여러개</li></ul><p>아무런 설정없이 react부터 하나하나씩 설처해보는 것도 큰 도움이 되겠지만, 초기에 webpack 같은 번들링 도구에 대한 이해와 삽질하는데 상당한 시간이 소요됩니다(정말 그렇습니다). 정말 react에만 집중하고 싶다면 이런 프로젝트를 이용해서 개발하는게 react 입문자들에게는 훨씬 도움되는 일이라 생각합니다. </p><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><blockquote><p><a href="https://github.com/facebookincubator/create-react-app" rel="external nofollow noopener noreferrer" target="_blank">create-react-app github</a><br><a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/react-scripts/template" rel="external nofollow noopener noreferrer" target="_blank">craete-react-app 가이드 문서</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;리액트를 본격적으로 사용하기 시작하면서 각종 라이브러리의 테스트 및 실험을 해볼 필요가 생겼습니다. 몇 가지 boilerplate 프로젝트를 찾아보다가 동료로부터 &lt;a href=&quot;https://github.com/facebookincubator/
      
    
    </summary>
    
    
      <category term="React" scheme="http://blueshw.github.io/tags/React/"/>
    
      <category term="js" scheme="http://blueshw.github.io/tags/js/"/>
    
      <category term="create-react-app" scheme="http://blueshw.github.io/tags/create-react-app/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] require vs import (CommonJs와 ES6)</title>
    <link href="http://blueshw.github.io/2017/05/16/ES-require-vs-import/"/>
    <id>http://blueshw.github.io/2017/05/16/ES-require-vs-import/</id>
    <published>2017-05-16T14:59:31.000Z</published>
    <updated>2017-05-16T15:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CommonJs-AMD-ES6-Module"><a href="#CommonJs-AMD-ES6-Module" class="headerlink" title="CommonJs, AMD, ES6 Module"></a>CommonJs, AMD, ES6 Module</h2><p>require와 import에 대해서 비교해 보기 위해서는 우선 <a href="http://www.commonjs.org/" rel="external nofollow noopener noreferrer" target="_blank">CommonJs</a>와 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" rel="external nofollow noopener noreferrer" target="_blank">AMD(Asynchronous Module Definition)</a>, ES6 내장모듈과 같은 자바스크립트의 모듈 시스템에 대해 알고 있어야 합니다. 모듈에 대한 본격적인 포스팅이 아니기 때문에 깊게 다루진 않겠습니다(사실 자세히 모르게도 합니다ㅠ).</p><p>기존의 자바스크립트(ES5, 현재 대부분의 브라우저에서 지원하는 자바스크립트 문법)는 모듈이라는 개념이 부족하여 각 모듈(또는 파일)간의 의존성 처리에 제한이 있었습니다. 고전적인 웹 프로젝트에서 자바스크립트를 사용하는 방법을 살펴보면, HTML 파일내부에 <code>&lt;script&gt;</code> 태그를 삽입하여 모듈을 로드하고 있습니다. 하지만 이런 방식은 한가지 문제가 있는데, 자바스크립트 파일(또는 모듈)끼리 서로 모듈을 공유하는데 제약이 없다는점입니다. 그 이유는 script 태그로 로드된 모듈은 모두 window 객체의 속성이기 때문에 서로 다른 파일에 위치하면서도 모든 객체를 공유할 수 있기 때문입니다. 이처럼 각 자바스크립트 파일이 독립적으로 존재하지 못해 발생하는 여러 문제들(예를들어 다른 파일에서 같은 이름의 변수를 사용하는 경우) 때문에 하나의 모듈로 관리하기위한 다양한 패턴(모듈패턴, 즉시실행함수 등)을 사용하여 의존성을 관리할 수 밖에 없었습니다.</p><p>이를 해결하기 위한 수단으로 모듈이라는 개념을 도입하여 정의한 방법(또는 표준)이 CommonJs와 AMD입니다. 이 둘은 내부적으로 모듈 서로 간의 의존성(로드)이 지원되지 않는 상태로 만들어졌는데, ES6에 이르러 언어 내부적으로 자바스크립트 모듈 의존성을 지원하게 되었습니다(import, export).</p><h3 id="모듈정의-방식의-혼용"><a href="#모듈정의-방식의-혼용" class="headerlink" title="모듈정의 방식의 혼용"></a>모듈정의 방식의 혼용</h3><p>ES6 모듈은 기본적으로 CommonJs와 AMD 모듈을 혼용해서 사용할 수 있습니다. 모듈을 가져오는 부분에 require와 import를 같이 쓰더라도 문제없이 동작하죠. import는 ES6 문법이라 현재 사용되는 브라우저에서는 지원하지 않지만 babel과 같은 트랜스파일러가 해결해줄수 있습니다. AMD는 생략하고 ES6와 CommonJs를 비교하여 설명해보겠습니다.</p><p>모듈을 정의한다는 것은 다른 모듈에서 사용할 수 있도록 하나의 모듈로써 노출하겠다는 의미다.</p><h4 id="모듈-정의하기-export"><a href="#모듈-정의하기-export" class="headerlink" title="모듈 정의하기 (export)"></a>모듈 정의하기 (export)</h4><p><strong>ES6</strong></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모듈 전체를 export, 파일내 한번만 사용가능하다.</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">module</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 속성을 export</span></span><br><span class="line"><span class="keyword">export</span> *;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수를 직접 export</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">moduleFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">property</span><span class="string"> </span>= <span class="string">"some property"</span>;</span><br><span class="line"><span class="title">export</span> &#123;<span class="keyword">property</span><span class="string">&#125;</span>;</span><br></pre></td></tr></table></figure><p><strong>CommonJs</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모듈 전체를 export</span></span><br><span class="line">module.<span class="keyword">exports</span> = module;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 속성을 export</span></span><br><span class="line"><span class="comment">// (아시는 분 알려주세요) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수를 직접 export</span></span><br><span class="line"><span class="keyword">exports</span>.moduleFunc = <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span>;</span></span><br></pre></td></tr></table></figure><h4 id="모듈-가져오기-import"><a href="#모듈-가져오기-import" class="headerlink" title="모듈 가져오기 (import)"></a>모듈 가져오기 (import)</h4><p><strong>ES6</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 모듈 전체를 <span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> module</span><br><span class="line"><span class="keyword">import</span> module <span class="keyword">as</span> myModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 모든 속성 <span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> * from module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 특정 멤버(함수 등)만 <span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> &#123;moduleFunc, moduleFunc2&#125; from module</span><br></pre></td></tr></table></figure><p><strong>CommonJs</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 모듈 전체를 <span class="keyword">import</span></span><br><span class="line">var <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./someModule.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 모든 속성 <span class="keyword">import</span></span><br><span class="line"><span class="regexp">//</span> (위의 <span class="built_in">module</span> 객체에 모든 속성이 담아져 온다.)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 특정 멤버(함수 등)만 <span class="keyword">import</span>, 위의 <span class="built_in">module</span>을 이용한다.</span><br><span class="line"><span class="built_in">module</span>.moduleFunc</span><br></pre></td></tr></table></figure><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>바벨과 같은 트랜스파일링 모듈을 사용한다면 주저없이 ES6를 사용합니다.<br>혼용하는것도 가능하지만 가급적이면 통일되게 사용하는 것이 좋다고 생각합니다.<br>실제로 제가 프로젝트 진행하면서 mocha 테스트 중 ES6의 import/export와 CommonJs의 <code>module.exports</code> 를 혼용하여 사용시 문제가 발생했었습니다(자세히 언급하지 않음). </p></blockquote><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a></li><li><a href="https://www.exratione.com/2015/12/es6-use-of-import-property-from-module-is-not-a-great-plan/" rel="external nofollow noopener noreferrer" target="_blank">ES6: Use of “import { property } from ‘module’” is Not a Great Plan</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CommonJs-AMD-ES6-Module&quot;&gt;&lt;a href=&quot;#CommonJs-AMD-ES6-Module&quot; class=&quot;headerlink&quot; title=&quot;CommonJs, AMD, ES6 Module&quot;&gt;&lt;/a&gt;CommonJs, AMD, 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://blueshw.github.io/tags/ES6/"/>
    
      <category term="require" scheme="http://blueshw.github.io/tags/require/"/>
    
      <category term="import" scheme="http://blueshw.github.io/tags/import/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] 클로저(closure)에 대해서 알아보자</title>
    <link href="http://blueshw.github.io/2017/04/12/javascript-closure/"/>
    <id>http://blueshw.github.io/2017/04/12/javascript-closure/</id>
    <published>2017-04-11T15:20:04.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 대충 클로저가 무언인지는 말할 수 있지만, 정확한 의미와 용도에 대해서는 쉽고 명확히 대답하기는 힘들것입니다. 제가 클로저 개념이 헷갈렸던 이유는 의외로 황당한 이유 때문이었습니다.</p><blockquote><p><del>closer (가까운, 닫힌)</del> ==&gt; <strong>closure (폐쇄)</strong></p></blockquote><p>멍청하게도 처음에는 클로저를 “closer”라고 생각했습니다. 정확한 개념은 당연히 몰랐고 단어의 의미로 단순하게 유추해서 “어떤 것을 닫는다” 정도로 느끼고 있었죠. 당시의 “닫는다”는 의미를 지금에 와서 생각해보면 “변수의 범주(스코프)를 닫는다” 정도로 이해하고 있었던거 같습니다. 하나도 모르고 있었다고해도 과언이 아니었죠.</p><p>구글에서 검색하면 알 수 있는 클로저의 의미는 아래와 같이 조금 모호합니다.</p><blockquote><p>외부함수의 맥락(context)에 접근 가능한 내부함수<br>좀 더 포괄적으로는 함수 선언시 생성되는 유효 범위</p></blockquote><p>이런 정의만 보고 과연 사람들이 이해를 할 수 있는건지는 잘 모르겠지만, 클로저에 대한 이해가 거의 없는 분들은 아마도 이해하기 어렵울 것입니다. 그러면, 일단 코드를 보도록 하죠.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFunc</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> outVar = <span class="string">"my name is "</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> outVar + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> innerFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = outFunc(<span class="string">"bono"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result: "</span> + result());</span><br><span class="line"></span><br><span class="line"><span class="comment">// result: my name is bono</span></span><br></pre></td></tr></table></figure><p>내부함수 <code>innerFunc()</code>에서 <code>outFunc()</code> 함수의 인자와 지역변수에 접근이 가능합니다. <code>outFunc()</code>의 return 값(var result에 할당)은 <code>innerFunc()</code>라는 내부 함수입니다. outFunce() 함수가 실행되면, outFunc()의 스코프는 끝이 나기 때문에 outFunc() 인자인 name과 지역변수인 outVar는 메모리에서 정리되어야합니다. 하지만, 실제 console.log에서 result를 호출하면(내부 함수가 호출), 내부함수 innerFunc()가 선언될때 outFunc() 함수의 인자와 outVar() 지역변수를 innerFunc()의 클로저 객체로 남아 실제로 innerFunc()가 호출될 때 클로저 객체를 통해서 outFunc()의 인자와 변수에 접근이 가능한 것입니다. 이게 바로 클로저가 하는 일입니다. </p><p>다른 예제를 살펴보겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> out = <span class="string">"out value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="string">"in value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inFunc</span>(<span class="params">inParam</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"out: "</span> + out);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"inner: "</span> + inner);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"inParam: "</span> + inParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> inFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> param = <span class="string">"this is param"</span>;</span><br><span class="line"><span class="keyword">var</span> outResult = outFunc();</span><br><span class="line">outResult(param);</span><br><span class="line"></span><br><span class="line"><span class="comment">// out: out value</span></span><br><span class="line"><span class="comment">// inner: in value</span></span><br><span class="line"><span class="comment">// inParam: this is param</span></span><br></pre></td></tr></table></figure><p>이 예제에는 크게 세가지 스코프가 존재합니다. 첫번째는 <code>전역스코프</code>, 그다음은 <code>outFunc()</code> 함수 내 스코프, 마지막으로 <code>inFunc()</code> 내 스코프입니다. 가장 위에 out 이라는 변수가 선언되어 있고, outFunc() 함수 및 param과 outFunc() 의 return 값인 outResult까지 총 4개의 변수(or 함수)가 선언되어 있고 마지막에 outResult 함수를 호출하고 있습니다. </p><p>outResult는 outFunc() 함수의 결과값이므로, inFunc() 함수 자체를 참조하고 있습니다. 그 말은 마지막에 호출한 outResult 함수에 인자를 전달하면 실제 내부 함수인 inFunc()의 파라미터에 해당 값이 들어온다는 의미겠죠. </p><p>클로저의 관점에서 생각해보겠습니다. outFunc() 함수가 선언되었지만, 실제로 호출되기전까진 언제 사용될지 모릅니다. 그래서 해당 함수(outFunc())의 클로저로써 유효범위(전역범위)의 변수들이 클로저 객체로 메모리상에 남아 있게 됩니다. 즉, outFunc() 함수가 실행될 때 해당 함수 내부에서 outFunc() 바깥의 전역영역의 변수에 접근할 수 있는거죠. 그리고 outFunc() 내부에 inFunc()가 선언되는 순간 outFunc() 내의 변수(여기서는 inner 변수)가 inFunc() 함수의 클로저 객체 안에 존재하게 되는것이죠. 그러고나면 각각의 outFunc(), inFunc() 함수가 실제로 호출되어 실행되는 순간에 미리 <code>메모리에 저장되어 있던 클로저</code>에서 각각의 변수를 가져올수 있게 되는겁니다.</p><p>클로저의 정의에 대해서 알아보았으니 클로저로 활용할 수 있는게 뭐가 있는지는 다음에 알아보도록 하겠습니다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>클로저는 단순히 함수 외부의 변수에 접근 가능한 내부함수가 아니라 함수가 선언되는 순간에 함수가 실행될때 실제 외부변수에 접근하기 위한 객체이다.<br>클로저도 남발하면 위험하다. 가비지컬렉션 대상이 되어야할 객체들이 메모리상에 남아 있게 되므로, 클로저를 남발하면 오버플로우가 발생할수도 있다. 이는 클로저에 대해 정확히 알아야 하는 이유이기도 하다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="closure" scheme="http://blueshw.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] var VS const VS let</title>
    <link href="http://blueshw.github.io/2017/03/28/ES-var-VS-const-VS-let/"/>
    <id>http://blueshw.github.io/2017/03/28/ES-var-VS-const-VS-let/</id>
    <published>2017-03-28T14:52:49.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 <em>var</em>에다 <em>const</em>와 <em>let</em>이라는 키워드가 추가되었습니다. 물론 var 없이도 변수를 선언할 수 있습니다만, 그렇게 되면 전역객체(브라우저 환경에서는 window 객체)의 속성이 되기 때문에 동일한 이름의 변수를 사용하다가는 치명적인 문제가 발생할 수도 있습니다.</p><p>기존 자바스크립트의 변수는 기본적으로 Function Scope입니다(var로 선언한 변수). 변수의 유효범위가 함수단위라는 이야기입니다. java나 C등의 많이 사용되는 프로그래밍 언어를 공부해 보았다면 알겠지만, 대체로 이 언어들은 Function Scope가 아닌 Block Scope를 가집니다.(python은 예외) 그래서 java나 C 계열의 언어를 사용하다가 자바스크립트 코드를 짜다보면 간혹 스코프 문제로 헷갈릴때가 있기 마련이죠. 그래서 ES6부터는 const와 let이 등장했습니다. 예상한대로 const와 let은 Block Scope를 가집니다. 기존에 많이 사용되는 언어들과 같습니다. const는 단어의 의미처럼 상수를 의미하고 let(무슨 단어를 줄인건지 감이 잡히지 않네요)은 기존의 var처럼 변수를 의미합니다.</p><p>이 밖에도 이 세가지 키워드에는 몇가지 차이점이 존재합니다. 예제를 통해 이 세가지 변수선언 키워드에 대해서 알아보겠습니다.</p><h3 id="재할당-및-재선언하기"><a href="#재할당-및-재선언하기" class="headerlink" title="재할당 및 재선언하기"></a>재할당 및 재선언하기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var의 경우</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let의 경우</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// SyntaxError: Identifier 'b' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const의 경우</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">c = <span class="number">2</span>; <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><p>var의 경우 굉장히 유연합니다. <em>var a = 1;</em>로 선언한 뒤, 2를 재할당하고 다시 <em>var = 3;</em>으로 재선언(?) 해도 문제될게 없습니다.<br>그런데 let의 경우 재할당은 문제 없습니다만, <em>let b = 3;</em>으로 재선언하고 나면 이미 선언된 변수라는 에러를 뱉어냅니다.<br>마지막으로 const는 상수이기 때문에 재할당, 재선언 모두 불가합니다.</p><h3 id="스코프-Scope"><a href="#스코프-Scope" class="headerlink" title="스코프 (Scope)"></a>스코프 (Scope)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">222</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 111</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 222</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>전역 영역에서 var a, let b 를 선언하고 각각 1, 2를 할당했습니다. 우선 if 블럭 내에서 각각의 변수 값을 변형시켰더니 블럭 내에서는 변경된 값이 모두 출력되었습니다. 그런데, if 블럭 바깥으로 나갔더니 let으로 선언했던 b 값은 가장 상단에 선언한 값과 동일한 2인데, a는 11로 변경되었습니다. 그 이유는 var의 경우 변수의 유효범위가 함수이므로 블럭으로 감쌌다고 하더라도 함수 스코프가 바뀐것이 아니기 때문에 if 블럭 내에서 재할당한 값을 출력하는 것입니다.</p><p>함수내에서 a, b 각 변수를 선언했을때는 어떨까요? var든, const든 새로운 함수로 감싸게 되면 그 안에서 선언한 변수는 함수(func)내의 지역변수가 되므로 바깥에서 선언한 변수의 이름과 겹치더라도 함수(func) 내에서는 새로 할당한 값들이 출력됩니다. 마지막으로 함수가 호출되고 나서 각 변수를 출력해보면, 함수 내에서 할당한 값은 그 함수 호출이 끝남과 동시에 유효범위도 사라지므로 함수 선언 이전의 a, b 값이 출력됩니다.</p><h3 id="let-vs-const"><a href="#let-vs-const" class="headerlink" title="let vs const"></a>let vs const</h3><p>위에서 let은 변수, const는 상수라고 구분지어 설명했지만, 좀더 구체적으로 설명할 필요가 있어보입니다. let은 변수고 const는 상수가 맞긴 하지만, 할당된 값이 원시타입이냐 참조타입(array, object, function)이냐에 따라서 조금 다르게 사용됩니다.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">const b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line">b = <span class="number">22</span>;// TypeError: Assignment <span class="keyword">to</span> constant variable.</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj_a = &#123;</span><br><span class="line">name: <span class="string">'obj_a'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const obj_b = &#123;</span><br><span class="line">name: <span class="string">'obj_b'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj_a[<span class="string">'name'</span>] = <span class="string">'a'</span>;</span><br><span class="line">obj_b[<span class="string">'name'</span>] = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line">obj_a[<span class="string">'number'</span>] = <span class="number">1</span>;</span><br><span class="line">obj_b[<span class="string">'number'</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj_a = &#123;&#125;</span><br><span class="line">obj_b = &#123;&#125;// TypeError: Assignment <span class="keyword">to</span> constant variable.</span><br></pre></td></tr></table></figure><p>기본적으로 let은 재할당이 가능한반면, const는 재할당이 불가합니다. 재할당하게 되면 TypeError가 발생하죠. 그런데 차이점이 있다면, 처음 할당된 객체를 변형시킬때는 아무 문제없이 동작한다는 것을 알 수 있습니다. 처음에는 두 객체 모두 ‘name’ 이라는 속성만 가지고 있었는데, 이를 변형하거나 새로운 속성(number)를 추가하더라도 let, const 둘다 에러를 발생시키지 않습니다. 이는 array와 function의 경우도 마찬가지인데, 이유는 const에 실제로 할당된 값은 원시타입처럼 특정 값이 아니라 객체의 주소값이기 때문입니다. 실제 객체가 변한다고해서 한번 할당된 객체의 주소값이 바뀌는건 아니죠. </p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><ul><li>ES6에서 var, const, let 모두 사용 가능하지만, 상황에 맞게 적절한 키워드를 사용해야 하겠습니다. (되도록 const, let을 사용하는게 좋겠죠)</li><li>객체를 새로 할당할 특별한 이유(이런 경우는 드물다 생각합니다)가 없다면 되도록 const를 사용하여 객체를 선언하는게 좋을것 같습니다.</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 &lt;em&gt;var&lt;/em&gt;에다 &lt;em&gt;const&lt;/em&gt;와 &lt;em&gt;let&lt;/em&gt;이라는 키워드가 추가되었습니다. 물론 var 없이도 변수
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://blueshw.github.io/tags/ES6/"/>
    
      <category term="var" scheme="http://blueshw.github.io/tags/var/"/>
    
      <category term="const" scheme="http://blueshw.github.io/tags/const/"/>
    
      <category term="let" scheme="http://blueshw.github.io/tags/let/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 패키지 공유하기</title>
    <link href="http://blueshw.github.io/2017/03/23/2017-03-23-migration-packages-sublime-text-3/"/>
    <id>http://blueshw.github.io/2017/03/23/2017-03-23-migration-packages-sublime-text-3/</id>
    <published>2017-03-22T15:37:32.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SublimeText-3-환경-설정-공유하기"><a href="#SublimeText-3-환경-설정-공유하기" class="headerlink" title="SublimeText 3 환경 설정 공유하기"></a>SublimeText 3 환경 설정 공유하기</h3><p>서브라임 텍스트 사용 중에 가장 아쉬운 점은 바로 환경설정 부분입니다. 아톰 등의 몇몇 텍스트에디터들은 계정과 연동되어 어느 기기에서 설치하더라도 동일한 환경으로 작업할 수 있는 장점이 있는데, 서브라임은 이 기능을 지원하지 않아 매번 <em><a href="https://packagecontrol.io/installation" rel="external nofollow noopener noreferrer" target="_blank">package Control</a></em>부터 사용하는 패키지를 새로 설치해야 되는 문제가 있죠. 패키지를 몇가지 사용하지 않는다면 이게 뭐가 문제냐라고 생각할지 모르지만, 수많은 패키지를 설치한 사용자에게는 모든 패키지 리스트를 받아서 새로 설치하는건 크나큰 고역이 아닐 수 없습니다.</p><p>방법은 의외로 간단합니다. 사용자가 개발한 여러 싱크 플러그인 중 하나를 사용해도 무방하지만 저는 package control 사이트에서 기본적으로 제안하는 방법을 사용하도록 하겠습니다.</p><h3 id="Syncing"><a href="#Syncing" class="headerlink" title="Syncing"></a><a href="https://packagecontrol.io/docs/syncing" rel="external nofollow noopener noreferrer" target="_blank">Syncing</a></h3><p>위 페이지를 보면 크게 2가지 방법이 있는 것을 알 수 있습니다.</p><blockquote><ol><li>Using Git (Git을 이용하는 방법)</li><li>Using Dropbox (Dropbox를 이용하는 방법)</li></ol></blockquote><p>Git을 이용하게 되면 별도의 Git 서버를 구축하지 않는 이상 대부분 Github 같은 서비스를 이용하게 될텐데 이때 문제가 하나 있습니다. Github은 private 저장소가 아닌 이상 오픈되어 있기 때문에 서브라임을 사용하면서 유료로 구매한 패키지 정보들이 고스란히 노출될 수 있습니다. 그래서 저는 Git을 이용하지 않고 안전한 Dropbox를 선택했습니다.</p><h3 id="Using-Dropbox-mac"><a href="#Using-Dropbox-mac" class="headerlink" title="Using Dropbox (mac)"></a>Using Dropbox (mac)</h3><ul><li><p>Step 1. 드롭박스를 이용하려면 우선 mac 용 드롭박스 앱을 설치합니다. (~/Dropbox 생성)</p></li><li><p>Step 2. 우선 저장할 패키지를 가진 기기에서 아래의 명령어를 차례로 입력합니다. Dropbox에 Sublime이라는 디렉토리를 생성하고, Packages 디렉토리 안에있는 User 정보를 dropbox의 Sublime 디렉토리로 이동합니다. 그리고 dropbox내 유저 정보를 simbolic link로 연결합니다.</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/</span><br><span class="line">mkdir ~/Dropbox/Sublime</span><br><span class="line">mv<span class="built_in"> User </span>~/Dropbox/Sublime/</span><br><span class="line">ln -s ~/Dropbox/Sublime/User</span><br></pre></td></tr></table></figure><ul><li>Step 3. 이제 다른 기기(새로 설치할 기기)에 가서 아래 명령어를 순차적으로 입력합니다</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/</span><br><span class="line">rm -r User</span><br><span class="line">ln -s ~/Dropbox/Sublime/User</span><br></pre></td></tr></table></figure><p>이렇게 초기의 환경에서</p><p><img src="/img/sublime-before.png" alt=""></p><p>이렇게 변합니다.</p><p><img src="/img/sublime-after.png" alt=""></p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>이게 끝입니다. 간단하죠?<br>혹시 완료했는데 적용이 안된다면, Sublime Text를 완전히 종료한 뒤 다시 실행시켜보세요.<br>서브라임은 최초에 실행될때 누락된 패키지가 있는지 체크하고 설치하는 과정을 거쳐<br>간단히 요약해보면, 아래와 같습니다.</p><blockquote><p>패키지 정보가 들어있는 User 정보를 dropbox로 이동하고 해당 폴더를 simbolic link로 바라보게 만든다.<br>이렇게 되면 내 sublime 정보가 dropbox에만 존재하므로, 어느 기기에서 사용하더라도 동일한 환경으로 설정이 가능하다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SublimeText-3-환경-설정-공유하기&quot;&gt;&lt;a href=&quot;#SublimeText-3-환경-설정-공유하기&quot; class=&quot;headerlink&quot; title=&quot;SublimeText 3 환경 설정 공유하기&quot;&gt;&lt;/a&gt;SublimeText 3 
      
    
    </summary>
    
      <category term="tool" scheme="http://blueshw.github.io/categories/tool/"/>
    
    
      <category term="SublimeText" scheme="http://blueshw.github.io/tags/SublimeText/"/>
    
      <category term="tool" scheme="http://blueshw.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>[ionic] ionic 개발에 필요한 것들</title>
    <link href="http://blueshw.github.io/2016/11/16/2016-11-16-ionic-install/"/>
    <id>http://blueshw.github.io/2016/11/16/2016-11-16-ionic-install/</id>
    <published>2016-11-15T16:14:00.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ionic-개발에-필요한-것들"><a href="#ionic-개발에-필요한-것들" class="headerlink" title="ionic 개발에 필요한 것들"></a>ionic 개발에 필요한 것들</h2><p>기본적으로 ionic, nodejs, cordova 등만 있어도 개발은 가능하겠지만, 안드로이드 에뮬레이터 실행을 위해서는 jdk 설치가 필요하겠고, ios 에뮬레이터 실행을 위해서는 xcode 설치도 필수가 되겠다(아래에선 생략한다). 그리고 ionic과 관련해서 설치해두면 편리하게 사용할 수 있는 모듈들을 몇개 추려봤다.</p><p>참고로 아직 ionic 파악이 덜 끝난 상태이므로 해당 리스트는 추가되거나 삭제될 수 있다.</p><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>안드로이드가 자바기반으로 개발되기 때문에 반드시 필요하다.</li><li>JAVA_HOME 경로를 ~/.bash_profile(or ~/.profile)파일에 설정한다.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h4 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h4><ul><li>Android 에뮬레이터 설치, 디버깅 등에 필요하다.</li><li>Ionic이 Android 앱을 빌드하거나 실행할 때는 Stand-Alone SDK Tools가 필요하다.</li><li>ANDROID_HOME 경로도 지정해준다.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_HOME</span>=/Projects/Libraries/adt-bundle-mac-x86_64/sdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</span><br></pre></td></tr></table></figure><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><ul><li>우선 설치부터, <a href="https://nodejs.org/en/download/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/en/download/</a> 사이트에서 원하는 os, version을 선택하여 설치한다.</li><li>또는 맥 사용자라면, 아래 명령어로 설치한다.</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><ul><li>NODE_HOME도 경로설정 해준다.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_HOME</span>=p/Projects/Libraries/node/node-v0.12.7-darwin-x64</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_PATH</span>=<span class="variable">$NODE_HOME</span>/lib/node_modules</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$NODE_HOME/bin:$NODE_PATH</span><br></pre></td></tr></table></figure><h4 id="cordova"><a href="#cordova" class="headerlink" title="cordova"></a>cordova</h4><ul><li>npm install -g cordova (-g 옵션은 global, CLI(Command Line Interface) 명령어를 제공하는 경우는 글로벌로 설치)</li><li>ionic은 내부적으로 cordova를 이용한다(디바이스 배포용도).</li></ul><h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h4><ul><li>npm install -g gulp</li><li>ionic 빌드 시스템</li></ul><h4 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h4><ul><li>npm install -g bower</li><li>ionic은 필요한 패키지를 bower를 이용해서 다운 받는다.</li></ul><h4 id="ios-sim"><a href="#ios-sim" class="headerlink" title="ios-sim"></a>ios-sim</h4><ul><li>npm install -g ios-sim</li><li>폰갭 프로젝트를 ios 시뮬레이터에서 실행하기 위한 패키지</li><li>다음 명령어로 타겟을 지정해줄수 있다.</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 가능한 device 확인</span></span><br><span class="line">ios-sim showdevices</span><br><span class="line"></span><br><span class="line"><span class="meta"># 타겟 지정 실행</span></span><br><span class="line">ionic emualte ios --target=<span class="string">"iPhone-5s"</span></span><br></pre></td></tr></table></figure><h4 id="ios-deploy"><a href="#ios-deploy" class="headerlink" title="ios-deploy"></a>ios-deploy</h4><ul><li>npm imstall -g ios-deploy</li><li>PhoneGap 프로젝트를 Xcode 없이 iOS 디바이스로 앱을 설치하거나 디버깅하는 패키지</li><li>ios-sim, ios-deploy 패키지를 설치했다면, ios 시뮬레이터를 띄우기 위해서 굳이 xcode를 실행할 필요는 없다(물론 설치는 되어있어야 함).</li></ul><h4 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h4><ul><li>npm install -g ionic</li><li>드디어 ionic 설치, 이전것들은 ionic 프로젝트를 만들기전 꼭 필요한 패키지 들이니 꼭 설치하고 시작하도록 하자.</li><li>몇가지 명령어를 살펴보자</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sidemenu 형식의 프로젝트 생성</span></span><br><span class="line">ionic start testApp sidemenu</span><br><span class="line"></span><br><span class="line"><span class="comment"># ionic 서버 실행</span></span><br><span class="line">ionic serve </span><br><span class="line"></span><br><span class="line"><span class="comment"># ionic ios 앱 빌드</span></span><br><span class="line">ionic build</span><br><span class="line"></span><br><span class="line"><span class="comment"># ios 에뮬레이터 실행</span></span><br><span class="line">ionic emulate ios (<span class="attribute">--target</span>=<span class="string">"iPhone-6s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ios real 디바이스에서 실행</span></span><br><span class="line">ionic <span class="builtin-name">run</span> ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># android 추가</span></span><br><span class="line">ionic platform <span class="builtin-name">add</span> android</span><br></pre></td></tr></table></figure><p>참고자료 : <a href="http://blog.saltfactory.net/ionic/start-ionic-edge-book.html" rel="external nofollow noopener noreferrer" target="_blank">http://blog.saltfactory.net/ionic/start-ionic-edge-book.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ionic-개발에-필요한-것들&quot;&gt;&lt;a href=&quot;#ionic-개발에-필요한-것들&quot; class=&quot;headerlink&quot; title=&quot;ionic 개발에 필요한 것들&quot;&gt;&lt;/a&gt;ionic 개발에 필요한 것들&lt;/h2&gt;&lt;p&gt;기본적으로 ionic, n
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ionic" scheme="http://blueshw.github.io/tags/ionic/"/>
    
      <category term="모바일앱" scheme="http://blueshw.github.io/tags/%EB%AA%A8%EB%B0%94%EC%9D%BC%EC%95%B1/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 4</title>
    <link href="http://blueshw.github.io/2016/10/02/2016-10-02-frontend-javascript-framework-angularjs-week4/"/>
    <id>http://blueshw.github.io/2016/10/02/2016-10-02-frontend-javascript-framework-angularjs-week4/</id>
    <published>2016-10-02T08:38:30.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Client-Server-Communication-and-Angular-Testing"><a href="#Client-Server-Communication-and-Angular-Testing" class="headerlink" title="Client-Server Communication and Angular Testing"></a>Client-Server Communication and Angular Testing</h2><h3 id="Networking-Essentials"><a href="#Networking-Essentials" class="headerlink" title="Networking Essentials"></a>Networking Essentials</h3><p>이번 챕터에서는 클라이언트 서버 구조에서 AngularJS가 어떻게 동작하는지 살펴볼것이다.<br>요즘 가장 많이 사용되는 Client-Server 관계는 HTTP프로토콜과 REST API를 이용한 백엔드(서버)와 브라우저(클라이언트)간의 통신으로 이뤄진다. 이전 강의까지 보았던 방식은 브라우저에 출력되는 데이터가 services.js 파일의 자바스크립트 오브젝트로 존재했었다. 하지만, Client-Server 구조에서는 거의 모든 데이터를 서버사이드에서 클라이언트 사이드로 제공해준다. HTTP와 REST API에 대한 내용은 자세히 다루지는 않겠다(강의 보세요).</p><p>HTTP Response는 클라이언트로 보낼 HTML 페이지나 특정 포맷으로 data를 가지는데, 주로 XML 또는 JSON을 많이 사용한다. 이 중에서 JSON(Javascript Object Notation)은 가장 많이 사용되는 데이터 포맷이다. 이름만 보면 자바스크립트에서만 사용될것 같지만, 모바일이나 웹서비스 등 일반적인 HTTP 통신에서 대부분 사용된다. XML이 잘 사용되지 않는 이유는 JSON에 비해서 데이터를 parsing 하는 과정이 복잡하기 때문이다.</p><p>JSON 데이터 구조를 간단히 살펴보자<br>자바스크립트 object와 구조가 비슷하다. name : value 구조로 이뤄지며, value 내에는 array, 스트링, 숫자, object 등의 데이터 타입 등이 들어갈 수 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"promotion"</span>:</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"weekend buffet"</span>,</span><br><span class="line"><span class="attr">"image"</span>: <span class="string">"images/buffet.png"</span>,</span><br><span class="line"><span class="attr">"label"</span>: <span class="string">"New"</span>,</span><br><span class="line"><span class="attr">"price"</span>: <span class="string">"19.99"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"asdjfkljaskdlfjas..."</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-Server-Communication-using-http"><a href="#Client-Server-Communication-using-http" class="headerlink" title="Client-Server Communication using $http"></a>Client-Server Communication using $http</h3><h4 id="Angular-http"><a href="#Angular-http" class="headerlink" title="Angular $http"></a>Angular $http</h4><p>$http는 브라우저에서 서버와의 통신을 위한 가장 핵심적인 서비스로 HTTP protocol을 사용한다. 아마 내부적으로는 AJAX 통신을 할것이기 때문에 비동기로 처리될 것이다.</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>자바스크립트에서 Promise란 비동기 통신이 완료된 후에 상태에 따라 특정 콜백을 리턴해 줄 것이라는 일종의 약속 같은 것을 말한다. $http 서비스 역시 프로미스를 리턴한다. 패턴은 아래와 같다.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;method: <span class="string">'GET'</span>, url:<span class="string">'/dishes'</span>&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123; ... &#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123; ... &#125;);</span><br></pre></td></tr></table></figure><p>then 뒤에는 두개의 function이 파라미터로 들어가 있다. 첫번째는 request가 성공했을 때 발생하는 함수이고, 두번째는 요청이 실패했을때 발생하는 함수이다. 보통 AJAX 통신을 사용할 때, ‘success’, ‘error’ 속성을 사용하는 것과 비슷하다.</p><h4 id="HTTP-Response"><a href="#HTTP-Response" class="headerlink" title="HTTP Response"></a>HTTP Response</h4><p>요청의 결과로 response라는 object가 서버로부터 넘어온다. 이때 reponse 객체에는 다음과 같은 속성들이 포함되어 있다.</p><ul><li>response.data : 메세지 바디를 포함하느 string / object</li><li>response.status : 상태 코드 (200, 400 등)</li><li>response.headers : 헤더정보</li><li>response.config : configuration object</li><li>response.statusText : response 상태 텍스트 값 </li></ul><h4 id="ng-if-directive"><a href="#ng-if-directive" class="headerlink" title="ng-if directive"></a>ng-if directive</h4><p>html 코드를 작성할 때 해당 DOM을 보여줄지 말지를 결정하기 위해 ngIf directive를 사용할 수 있다. 사용법은 간단하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-12"</span> ng-<span class="keyword">if</span>=<span class="string">"!showMenu"</span>&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>showMenu가 true면 ng-if는 false가 되므로 해당 message는 안보일것이고, showMenu가 false면 반대로 message가 나타날 것이다.</p><h3 id="Brief-Representational-State-Transfer-REST"><a href="#Brief-Representational-State-Transfer-REST" class="headerlink" title="Brief Representational State Transfer (REST)"></a>Brief Representational State Transfer (REST)</h3><p>본격적으로 서버와의 통신을 해보기 전에 가장 많이 사용하는 방식인 REST에 대해서 알아보자. 웹 서비스를 만들때 네트워크와 연결하는 방법에 대한 시스템은 보통 아래 두개 접근법이 가장 일반적이다.</p><ul><li><p>SOAP (Simple Object Access Protocol) : Uses WSDL(Web Service Description Language), 프레젠테이션 영역에 XML을 사용 </p></li><li><p>REST (Representational State Transfer) : 가장 많이 사용됨, Use Web standards, Exchange of data using either XML or JSON, SOAP나 WSDL보다 훨씬 간단한다.</p></li></ul><p>REST는 WWW(World Wide Web)과 같이 분산 hypermedia systems을 위한 아키텍쳐 스타일 중 하나이며, 웹 페이지의 리소스에 어떻게 접근하고 어떻게 정의되고 어떻게 이동하는지에 대한 법칙을 모아놓은 시스템이다. </p><h4 id="REST의-기본-법칙"><a href="#REST의-기본-법칙" class="headerlink" title="REST의 기본 법칙"></a>REST의 기본 법칙</h4><ul><li>HTTP 메소드를 사용하며 (Use HTTP methods explicitly)</li><li>상태를 저장하지 않는다 (Be stateless)</li><li>리소스는 URI와 같이 디렉토리 스트럭쳐가 그대로 노출된다 (Expose directory structure-like URIs)</li><li>통신의 매개체로 XML, JSON 등이 사용된다.</li></ul><p>REST는 세가지 컨셉으로 표현할 수 있다. 특정 URI로 표현되는 <em>Nouns(Resources)</em>, GET or POST 등의 HTTP 메소드인 <em>Verbs</em>, XML or JSON 등으로 표현하는 <em>Representaions</em></p><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>REST의 리소스는 다음과 같이 표기한다. 리소스에는 문서나 이미지, 리소스 컬렉션 등이다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/dishes/</span><span class="comment"># Retrieve all dishses</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/dishes/</span><span class="number">123</span><span class="comment"># Retrieve information about the specific dish (id:123)</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/promotions/</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/leadership/</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/leadership/</span><span class="number">456</span></span><br></pre></td></tr></table></figure><h4 id="Verbs"><a href="#Verbs" class="headerlink" title="Verbs"></a>Verbs</h4><p>Verb에 해당하는 HTTP 메소드는 각각 다음과 같은 의미를 가진다.</p><ul><li>GET -&gt; READ</li><li>POST -&gt; CREATE</li><li>PUT -&gt; UPDATE </li><li>DELETE -&gt; DELETE</li></ul><p>GET 메소드는 클라이언트가 서버에게 어떤 리소스를 요청하는 메소드이다. 어떤 GET 메소드가 서버에 요청(Request)이 들어오면, 서버는 XML 또는 JSON 형태로 클라이언트(브라우저)에게 응답(Response)을 한다.</p><h4 id="Representaions"><a href="#Representaions" class="headerlink" title="Representaions"></a>Representaions</h4><p>표현을 위해 클라이언트에게 어떤 데이터를 보낼 것이냐 하는 것인데, 가장 많이 쓰이는 두가지 방식이 바로 JSON과 XML이다. 최근에는 JSON 타입이 정보 교환을 위한 standards로 여겨지고 있다. </p><h4 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h4><p>REST는 상태를 저장하지 않다. 매 요청바다 항상 새로운 요청이 발생하게 된다. 그렇기 때문에 클라이언트측에서 요청에 따라 상태가 변화하는 것을 트래킹하기 위해서는 클라이언트 자신이 요청 전의 상태를 기억하고 있어야 한다.</p><h3 id="Clint-Server-Communication-using-resource"><a href="#Clint-Server-Communication-using-resource" class="headerlink" title="Clint-Server Communication using $resource"></a>Clint-Server Communication using $resource</h3><h4 id="Angular-ngResource"><a href="#Angular-ngResource" class="headerlink" title="Angular ngResource"></a>Angular ngResource</h4><p>ngResource 모듈은 restful API 서버와 통신하기 위해 $http 보다 고수준의 추상화를 제공한다(흠…). angular core가 아니기 때문에 따로 설치해 줘야 한다. </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-resource -S</span><br></pre></td></tr></table></figure><p>DI를 이용해서 ngResource를 사용할 수 있다.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.<span class="keyword">module</span>(<span class="string">'confusionApp'</span>, [<span class="string">'ui.router'</span>, <span class="string">'ngResource'</span>])</span><br></pre></td></tr></table></figure><h4 id="Angular-resource-Service"><a href="#Angular-resource-Service" class="headerlink" title="Angular $resource Service"></a>Angular $resource Service</h4><p>$http에 비해 $resource는 훨씬 편리하게 사용할 수 있다. 우선 사용 예시를 살펴보기 전에 $resource 서비스를 사용하기 위해서는 사용하고자하는 service나 controller에 DI로 추가한다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.service(<span class="string">'menuFactory'</span>, [<span class="string">'$resouce'</span>, <span class="string">'baseURL'</span>, <span class="function"><span class="keyword">function</span><span class="params">($resource, baseURL)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$scope.dishes = $resouce(baseURL + <span class="string">"dishes/:id"</span>, <span class="keyword">null</span>, &#123;<span class="string">'update'</span>:&#123;method:<span class="string">'PUT'</span>&#125;&#125;).query();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dish = $resource(baseURL + <span class="string">"dishes/:id"</span>, <span class="keyword">null</span>, &#123;<span class="string">'update'</span>:&#123;method:<span class="string">'PUT'</span>&#125;&#125;).get(&#123;id:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dish.name = <span class="string">"dovanut"</span>;</span><br><span class="line">dish.$save();</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>$resource의 기본 action들은 다음과 있다.</p><blockquote><p>{‘get’:{method:’GET’},<br>‘save’:{method:’POST’},<br>‘query’:{method:’GET’, isArray:true},<br>‘remove’:{method:’DELETE’},<br>‘delete’:{method:’DELETE’}};</p></blockquote><p>action을 커스텀으로 만들 수도 있는데, 위의 예제에서 본 것 처럼 update라는 메서드를 HTTP PUT 메서드로 정의해 놓으면 update() 함수를 사용할 수 있다. 다음의 예제를 보자</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$resource(baseURL+<span class="string">"dishes/:id"</span>, null, &#123;<span class="string">'update'</span>:&#123;method:<span class="string">'PUT'</span>&#125;&#125;).<span class="keyword">update</span>(&#123;id:$scope.dish.id&#125;,$scope.dish);</span><br></pre></td></tr></table></figure><h3 id="Angular-Testing"><a href="#Angular-Testing" class="headerlink" title="Angular Testing"></a>Angular Testing</h3><p>Angular 테스팅은 unit 테스트를 제공한다. unit 테스트란 각 부분의 독립된 로직을 테스트하는 기법을 말하는데, Angluar에서는 작성한 controller, filter, factory, service 등의 모듈을 개별적으로 검사할 수 있다. 그렇기 때문에 angular로 작성한 코드는 DOM과는 완전히 분리되어 테스트할 수가 있다.</p><h4 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h4><p>angularJS를 테스트하기위해 Behavior driven development 프레임웍인 Jasmine을 이용한다. 구체적으로 그룹 테스트를 위해 “describe” 함수를 이용하고, 개별테스트를 위해서 “it” 함수를 이용한다.</p><p>다음의 예를 보자</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe('Controller<span class="symbol">:MenuController</span>', function() &#123;</span><br><span class="line">it('should create <span class="string">"dishes"</span> with <span class="number">2</span> dishes fetched from xhr', function() &#123;</span><br><span class="line">// showMenu가 true이길 기대함</span><br><span class="line">expect(<span class="name">scope</span>.showMenu).toBeTruthy()<span class="comment">;</span></span><br><span class="line">// dishes가 정의됨을 기대함</span><br><span class="line">expect(<span class="name">scope</span>.dishes).toBeDefined()<span class="comment">;</span></span><br><span class="line">// dishes의 개수가 <span class="number">2</span>개임을 기대함</span><br><span class="line">expect(<span class="name">scope</span>.dishes.length).toBe(<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>describe는 MenuController를 테스트 한다는것을 말한다. 두번째 it은 xhr로부터 dishes가 2 dishes가 fetched된 dishes가 만들어질 것이라는 걸 말하고 두번째 인자에 들어간 함수 내에서는 expect 함수로 각각의 조건이 만족하는지를 체크한다.</p><h4 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h4><p>카르마는 자바스크립트 기반 command line tool이다(NodeJS application). 카르마를 이용하면 Jasmine으로 테스트한 결과를 브라우저로 가져와 쉽게 확인할 수 있다.</p><h4 id="angular-mocks"><a href="#angular-mocks" class="headerlink" title="angular-mocks"></a>angular-mocks</h4><p>ngMock 모듈을 이용하면 테스트의 결과를 의존성을 가지는 다른 서비스나 컨트롤러에 미리 적용해 볼 수 있다. 한가지 예로 $httpBackend를 이용하면 서버에 XHR 리퀘스트를 테스트로 날려볼수도 있다.</p><h4 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h4><p>우선 필요한 모듈들을 install 한다. 글로벌로 설치하는 건 상관없지만 그 외에는 conFusion 폴더 내에서 설치하도록 하자.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자스민 코어 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span><span class="keyword">jasmine-core </span>--save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># karma-jasmine 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span>karma-<span class="keyword">jasmine </span>--save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 카르마, 클라이언트 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span>karma --save-dev</span><br><span class="line">sudo npm <span class="keyword">install </span>karma-cli -g</span><br><span class="line">sudo npm <span class="keyword">install </span>karma-cli --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 카르마를 통한 결과를 크롬에 보여주기 위한 모듈 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span>phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># angular mocks 설치</span></span><br><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-mocks -S</span><br></pre></td></tr></table></figure><p>/conFusion/test 폴더를 생성하고 karma.conf.js 파일을 생성한다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> &#123;</span></span><br><span class="line">config.<span class="keyword">set</span>(&#123;</span><br><span class="line">basePath: <span class="string">'../'</span>,</span><br><span class="line">framework<span class="variable">s:</span> [<span class="string">'jasmine'</span>],</span><br><span class="line">// <span class="keyword">list</span> of <span class="keyword">files</span>, 테스트하려는 파일 목록</span><br><span class="line"><span class="keyword">file</span><span class="variable">s:</span> [</span><br><span class="line"><span class="string">'bower_components/angular/angular.js'</span>,</span><br><span class="line"><span class="string">'bower_components/angular-resource/angular-resource.js'</span>,</span><br><span class="line"><span class="string">'bower_components/angular-ui-router/release/angular-ui-router.js'</span>,</span><br><span class="line"><span class="string">'bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class="line"><span class="string">'app/scripts/*.js'</span>,</span><br><span class="line"><span class="string">'test/unit/**/*.js'</span></span><br><span class="line">],</span><br><span class="line">// <span class="keyword">list</span> of <span class="keyword">files</span> <span class="keyword">to</span> exclude, 테스트 제외 목록</span><br><span class="line">exclude: [</span><br><span class="line"><span class="string">'test/protractor.conf.js'</span>, <span class="string">'test/e2e/*.js'</span></span><br><span class="line">],</span><br><span class="line">preprocessor<span class="variable">s:</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">// test results reporter <span class="keyword">to</span> use</span><br><span class="line">// possible value<span class="variable">s:</span> <span class="string">'dots'</span>, <span class="string">'progress'</span></span><br><span class="line">reporter<span class="variable">s:</span> [<span class="string">'progress'</span>],</span><br><span class="line">por<span class="variable">t:</span> <span class="number">9876</span>,</span><br><span class="line">// colors in the output (reporters <span class="built_in">and</span> logs)</span><br><span class="line">color<span class="variable">s:</span> true,</span><br><span class="line">// config.LOG_DISALBE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">logLeve<span class="variable">l:</span> config.LOG_INFO,</span><br><span class="line">// 파일 변경시 auto reload</span><br><span class="line">autoWatch: true,</span><br><span class="line">// browser, available browser launchers</span><br><span class="line">browser<span class="variable">s:</span> [<span class="string">'Chrome'</span>, <span class="string">'PhantomJS'</span>, <span class="string">'PhantomJS_custom'</span>],</span><br><span class="line">customLauncher<span class="variable">s:</span> &#123;</span><br><span class="line"><span class="string">'PhantomJS_custom'</span>: &#123;</span><br><span class="line">base: <span class="string">'PhantomJS'</span>,</span><br><span class="line">option<span class="variable">s:</span> &#123;</span><br><span class="line">windowName: <span class="string">'my-window'</span>,</span><br><span class="line">setting<span class="variable">s:</span> &#123;</span><br><span class="line">webSecurityEnabled: false</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">flag<span class="variable">s:</span> [<span class="string">'--load-images=true'</span>],</span><br><span class="line">debu<span class="variable">g:</span> true</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">phantomjsLauncher: &#123;</span><br><span class="line">// ResourceError 발생시 phantomjs 종료, 비정상 종료시 유용함</span><br><span class="line">exitOnResourceError: true</span><br><span class="line">&#125;,</span><br><span class="line">// Continuous Integration <span class="keyword">mode</span></span><br><span class="line">// <span class="keyword">if</span> true, Karma captures browsers, runs the tests <span class="built_in">and</span> exits</span><br><span class="line">singleRun: false,</span><br><span class="line">// Concurrency level</span><br><span class="line">concurrency: Infinity</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>conFusion/test/unit/menucontroller.js 파일을 생성해서 unit 테스트를 실행한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Client-Server-Communication-and-Angular-Testing&quot;&gt;&lt;a href=&quot;#Client-Server-Communication-and-Angular-Testing&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 3-2</title>
    <link href="http://blueshw.github.io/2016/09/05/2016-09-05-frontend-javascript-framework-angularjs-week3-2/"/>
    <id>http://blueshw.github.io/2016/09/05/2016-09-05-frontend-javascript-framework-angularjs-week3-2/</id>
    <published>2016-09-05T14:10:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Single-Page-Applications"><a href="#Single-Page-Applications" class="headerlink" title="Single Page Applications"></a>Single Page Applications</h2><h3 id="Angular-ngRoute-and-Single-Page-Applications"><a href="#Angular-ngRoute-and-Single-Page-Applications" class="headerlink" title="Angular ngRoute and Single Page Applications"></a>Angular ngRoute and Single Page Applications</h3><h4 id="Single-Page-Applications-SPA"><a href="#Single-Page-Applications-SPA" class="headerlink" title="Single Page Applications(SPA)"></a>Single Page Applications(SPA)</h4><p>Single Page Application이란, 말그대로 하나의 페이지에서 동작하는 어플리케인션을 말한다. 기존의 웹사이트를 보면, 어떤 페이지를 서버에 요청하면 서버가 요청 받은 페이지를 브라우저에 보내는 방식이 반복되는 형태였다. 그래서 어떤 페이지로 이동하려면 서버에 해당 페이지 전부를 요청해야만 했다. 이런방법은 사실 header나 footer, js, css 파일 등과 같이 모든 페이지에서 필요로하는 것들을 매번 요청해야하는 문제가 따른다(물론 캐싱이 된다).<br>하지만 SPA는 index.html과 같은 single master page를 다운받은 후, 다른 페이지로 이동하는 것이 아니라 서버에 필요한 데이터만 요청하여 화면을 바꿔치기 하는 형태로 동작한다.</p><p>하지만 SPA도 극복해야할 문제들이 있다.</p><blockquote><p>검색엔진 같은 경우, 검색 후 결과를 클릭하면 다른 웹사이트로 이동해야하는데 과연 SPA로 가능할것이냐?<br>SPA 같은 경우는 서버의 데이터를 다운받아 클라이언트에서 사용하게 되는데 이때 서버와 클라이언트 중에 어디에 책임을 전가해야할지를 정하는 문제<br>단일 페이지이기 때문에 history 관리가 어려운 문제<br>페이지의 데이터를 모으기 어려운 문제<br>필요한 모든 라이브러리 및 페이지가 들어있는 최초의 페이지를 읽어 올때의 속도 문제</p></blockquote><h4 id="Angular-and-SPA"><a href="#Angular-and-SPA" class="headerlink" title="Angular and SPA"></a>Angular and SPA</h4><p>지금까지 봐왔던 많은 요소들은 Angular JS로 SPA 디자인이 가능하다는 것을 보여주고 있다.</p><blockquote><p>one-way and two-way 바인딩<br>MVC/MVVM/MVW 프레임워크<br>view -&gt; template을 사용하고 controller를 통해서 모델의 데이터를 이용해서 render<br>location and routing을 제공</p></blockquote><p>SPA에서 서버는 REST API를 통해서 데이터를 제공하거나 static HTML, Angular templates와 리소스를 제공한다. 클라이언트는 Temlating과 라우팅을 이용하여 뷰를 그리는 역할을 한다.</p><h4 id="Deep-Linking"><a href="#Deep-Linking" class="headerlink" title="Deep Linking"></a>Deep Linking</h4><p>검색이 가능하거나 indexing이 가능한 웹페이지 내 컨텐츠의 하이퍼링크를 말한다.<br>예를들면,</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//www.conFusion.food/index.html<span class="meta">#/menu/0</span></span><br></pre></td></tr></table></figure><p>해시태그(#)가 url에 왜 붙었느냐??<br>url에 해시태그가 붙으면 해시태그 이후에 나타나는 부분에 대해서는 서버에 요청(?)하지 말라는 의미다. 즉, reload 안하겠다는 거다. 이미 index.html 페이지에 위치한 상태에서 #/menu/0가 붙는다고 페이지가 리로드 되지 않는다. 다만, #/menu/0에 해당하는 리소스를 찾는다. angularJS에서는 router 의해 해당 리소스를 찾게된다. 물론 페이지가 리로드되지 않지만 해시태그 뒷부분 url의 데이터가 서버에 위치할 수도 있지만 아마 그때는 ajax로 데이터를 가져오지 않을까 싶다.</p><p>즉, angularJS에서는 url의 해시태그 뒷부분을 handling하여 페이지를 변경하게된다.</p><h4 id="location-service"><a href="#location-service" class="headerlink" title="$location service"></a>$location service</h4><ul><li>현재 주소창의 URL을 보여준다.</li><li>back / forward 버튼 등에 의한 url 변화에 대해 동기화시켜준다.</li><li>url(), path(), search(), hash() 등의 메서드로 get / set을 통해 url을 변경할 수 있도록 해준다.</li></ul><h4 id="ngRoute-Module"><a href="#ngRoute-Module" class="headerlink" title="ngRoute Module"></a>ngRoute Module</h4><p>우선 install한다. conFusion 폴더에서 실행한다.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-route -S</span><br></pre></td></tr></table></figure><p>ngRoute는 $location 서비스와 렌더된 뷰 사이의 관계를 관리한다. url을 변경할 필요가 있으면 $location 서비스의 메서드를 이용하여 url 변경(# 뒷부분)하여 페이지를 갱신할 수 있다.</p><p>다음과 괕이 angular module에서 사용된다.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 의존적으로 주입한다.</span></span><br><span class="line">angular.<span class="keyword">module</span>(<span class="string">'confusionApp'</span>, [<span class="string">'ngRoute'</span>])</span><br></pre></td></tr></table></figure><p>ngRoute에서는 Angular provider를 사용할 수 있는데, provider는 url이 변경됨에 따라 그에 알맞는 적절한 template과 url(handlers)로 매핑시켜준다.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">angular</span><span class="selector-class">.module</span>(<span class="string">'confusionApp'</span>, [<span class="string">'ngRoute'</span>])</span><br><span class="line"><span class="comment">// 라우팅을 위해 config 함수를 사용한다.</span></span><br><span class="line"><span class="comment">// 파라미터로 $routeProvider가 들어간다.</span></span><br><span class="line">    <span class="selector-class">.config</span>(function($routeProvider) &#123;</span><br><span class="line"></span><br><span class="line">      $<span class="selector-tag">routeProvider</span></span><br><span class="line">        <span class="selector-class">.when</span>(<span class="string">'/contactus'</span>, &#123;</span><br><span class="line">          <span class="attribute">templateUrl </span>: <span class="string">'contactus.html'</span>,</span><br><span class="line">          <span class="attribute">controller </span>: <span class="string">'ContactController'</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.when</span>(<span class="string">'/menu'</span>, &#123;</span><br><span class="line">          <span class="attribute">templateUrl </span>: <span class="string">'menu.html'</span>,</span><br><span class="line">          <span class="attribute">controller </span>: <span class="string">'MenuController'</span></span><br><span class="line">        &#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="selector-class">.when</span>(<span class="string">'/menu/:id'</span>, &#123;</span><br><span class="line">          <span class="attribute">templateUrl </span>: <span class="string">'dishDetail.html'</span>,</span><br><span class="line">          <span class="attribute">controller </span>: <span class="string">'DishDetailController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 디폴트, 아무것도 매치가 안되면 otherwise 실행</span></span><br><span class="line">        <span class="selector-class">.otherwise</span>(<span class="string">'/contactus'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>url이 변경되면 해당되는 url을 $routeProvider.when의 첫번째 파라미터에서 찾은 다음 각각 알맞는 template과 contoller를 지정해주어 view를 렌더링한다.</p><p>$routeParams를 이용하면 주어진 파라미터로 url에 삽입할 수 있다.<br>예를 보자</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// menu.html</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span><br><span class="line">&lt;a ng-href=<span class="string">"#/menu/&#123;&#123;dish._id&#125;&#125;"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controllers.js</span></span><br><span class="line">.controller(<span class="string">'DishDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>,</span><br><span class="line"><span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $routeParams, menuFactory</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dish = menuFactory.getDish(<span class="built_in">parseInt</span>($routeParams.id, <span class="number">10</span>));</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>/menu/[id]와 같은 url이 들어왔을때 [id] 부분은 파라미터로 처리한다.<br>만약 dish 이미지를 클릭햇을때 각각의 detail 페이지로 이동하는 동작을 처리한다고 생각해보자. 각각의 dish에 id를 부여하고 이미지의 a 태그에 id를 이용하여 링크를 만들어 둔다.</p><p>이미지를 클릭하면 DishDetailController에 의존적으로 주입한 $routeParams에 url에 전달된 dish._id가 id라는 이름으로 들어가 이 id에 해당하는 dish 데이터를 가져오게 될 것이다.</p><p>마지막으로 지난 강의에서 index.html의 header와 footer 사이에 넣었던 ng-include를 ng-view로 변경하자. ng-view directive는 $route 서비스와 함께 동작하여 url 변경에 따라 현재 렌더링된 템플릿을 html 파일에 포함시켜준다. </p><h3 id="Angular-UI-Router-for-Single-Page-Applications"><a href="#Angular-UI-Router-for-Single-Page-Applications" class="headerlink" title="Angular UI-Router for Single Page Applications"></a>Angular UI-Router for Single Page Applications</h3><p>이전 강의에서 살펴본 ngRoute는 한계가 있다.</p><ul><li>한 페이지 당 하나의 뷰만 사용이 가능하다 (no multiple, no nested)</li><li>view가 url에 종속적이다.</li></ul><p>이에반해 UI Router는 어플리케이션의 상태에 기반을 두고 있다. 이 말은 즉, url이 바뀌지 않아도 일부분을 바꿀 수 있다는 뜻이다. (multiple, nested)</p><p>우선 설치부터 하자</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-ui-router -S</span><br></pre></td></tr></table></figure><p>사용법은 이전과 비슷하다.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'confusionApp'</span>, [<span class="string">'ui.router'</span>])</span><br><span class="line">.config(<span class="keyword">function</span>($stateProvider, $urlRouterProvider) &#123;</span><br><span class="line">$stateProvider</span><br><span class="line">.state(<span class="string">'app'</span>, &#123;</span><br><span class="line">url:<span class="string">'/'</span>,</span><br><span class="line">views: &#123;</span><br><span class="line"><span class="string">'header'</span>: &#123;templateUrl: <span class="string">'views/header'</span>html&#125;,</span><br><span class="line"><span class="string">'content'</span>: &#123;template: <span class="string">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class="string">'IndexController'</span>&#125;</span><br><span class="line"><span class="string">'footer'</span>: &#123;templateUrl: <span class="string">'views/footer.html'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.state(<span class="string">'app.aboutus'</span>, &#123;</span><br><span class="line">url:<span class="string">'aboutus'</span>,</span><br><span class="line">views: &#123;</span><br><span class="line"><span class="string">'content@'</span>: &#123;template: <span class="string">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class="string">'AboutController'</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">// default</span><br><span class="line">$urlRouterProvider.otherwise(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>state에 따라서 각각 url을 지정해줄 수 있다. 그리고 views 속성에 여러 뷰(multiple)를 선언해줄 수도 있다. </p><p>두번째 state는 app의 nested view를 나타내는데, 특이하게 content 뒤에 ‘@’ 마크가 붙어 있다. 이는 해당 view가 content에 속하는 view라는 것을 말해준다.</p><p>위의 state 내 views 속성에 지정해둔 view name은 html 코드에서 ui-view로 매핑시켜준다.<br>그리고 ui-sref 속성은 state를 변경 시켜주는데 사용한다. href가 url을 이동하기 위한 속성이었다면 ui-sref는 url은 변경시켜주지 않고 속성만 바꾸는 link 역할을 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.aboutus"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>$routeParams와 마찬가지로 $stateParams를 사용할 수 있다.<br>사용법은 기존과 거의 같다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// menu.html</span></span><br><span class="line">&lt;a ui-sref=<span class="string">"app.dishdetails(&#123;id:dish._id&#125;)"</span>&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DishDetailController</span></span><br><span class="line">.controller(<span class="string">'DishDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$stateParams'</span>,</span><br><span class="line"><span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, $stateParams, menuFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dish = menuFactory.getDish(parseInt(parseInt($stateParams.id,<span class="number">10</span>));</span><br><span class="line">$scope.dish = dish;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Single-Page-Applications&quot;&gt;&lt;a href=&quot;#Single-Page-Applications&quot; class=&quot;headerlink&quot; title=&quot;Single Page Applications&quot;&gt;&lt;/a&gt;Single Page Ap
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 3-1</title>
    <link href="http://blueshw.github.io/2016/09/02/2016-09-02-frontend-javascript-framework-angularjs-week3-1/"/>
    <id>http://blueshw.github.io/2016/09/02/2016-09-02-frontend-javascript-framework-angularjs-week3-1/</id>
    <published>2016-09-02T11:46:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Single-Page-Applications"><a href="#Single-Page-Applications" class="headerlink" title="Single Page Applications"></a>Single Page Applications</h2><h3 id="Angular-Factory-Service-and-Dependency-Injection"><a href="#Angular-Factory-Service-and-Dependency-Injection" class="headerlink" title="Angular Factory, Service and Dependency Injection"></a>Angular Factory, Service and Dependency Injection</h3><h4 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h4><p>Dependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC에 해당한다. IoC 개념을 이해하고 다시 DI를 살펴보자. DI는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다.</p><p>마틴 파울러가 말한 DI를 구현하는 세가지 방법은 다음과 같다.</p><ul><li>Create dependency using new operator</li><li>Look up dependency using a global variable</li><li>Have dependency passed to it where needed</li></ul><p>위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.</p><h4 id="Angular-and-DI"><a href="#Angular-and-DI" class="headerlink" title="Angular and DI"></a>Angular and DI</h4><p>AngularJS에서는 DI를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.</p><p>services, directives, filters and animations 등의 컴포넌트에서 DI가 사용된다. 주입 가능한 factory method나 생성자를 정의한 다음 Controller와 같은 곳에 주입시켜 호출한다.</p><p>또한 config와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.<br>몇가지 예를 들어보자.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫번째 방법은 array에 명시</span></span><br><span class="line">module.controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두번째 방법은 property 추가</span></span><br><span class="line"><span class="keyword">var</span> MenuController = funciton($scope, menuFactory) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">MenuController.$Inject = [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>];</span><br><span class="line">module.controller(<span class="string">'MenuController'</span>, MenuController);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 세번째 방법은 Implicit annotation</span></span><br><span class="line">module.controller(<span class="string">'MenuController'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Angular-Factory-and-Service"><a href="#Angular-Factory-and-Service" class="headerlink" title="Angular Factory and Service"></a>Angular Factory and Service</h4><p>factory와 service는 controller에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory와 service를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory와 service에 집중하자.</p><h4 id="Angular-Services"><a href="#Angular-Services" class="headerlink" title="Angular Services"></a>Angular Services</h4><p>service는 여러개의 app에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다. </p><p>$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.</p><h4 id="Angular-Factory"><a href="#Angular-Factory" class="headerlink" title="Angular Factory"></a>Angular Factory</h4><p>factory는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service와 factory의 차이가 별로 안 느껴지는데, 결정적으로 service는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory를 많이 이용한다.</p><p>우선 factory 사용 예를 보자</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// factory code</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .factory(<span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> menufac = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> dishes = [ ... ];</span><br><span class="line"></span><br><span class="line">    menufac.getDishes = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    menufac.getDish = <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes[index];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 객체를 리턴한다.</span></span><br><span class="line">    <span class="keyword">return</span> menufac;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line">    $scope.dishes = menuFactory.getDishes();</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><p>service 사용과 비교해보자</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service code</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .service(<span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 객체선언, 리턴이 필요없다. </span></span><br><span class="line">    <span class="keyword">var</span> dishes = [ ... ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getDishes = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getDish = <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes[index];</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line">    $scope.dishes = menuFactory.getDishes();</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><p>service와 factory의 사용법은 완전히 같다. 하지만 차이가 있는데, factory는 객체를 생성해서 리턴을 한다. 하지만 service의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.</p><h4 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h4><p>app.js</p><p>모든 컨트롤러 코드는 controllers.js로 이동한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>, [])</span><br><span class="line"></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>controllers.js</p><p>controller 코드는 모두 controllers.js로 이동하였고, 데이터를 가져오는 부분은 services.js로 이동</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, menuFactory</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        $scope.tab = <span class="number">1</span>;</span><br><span class="line">        $scope.filtText = <span class="string">''</span>;</span><br><span class="line">        $scope.showDetails = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        $scope.dishes = menuFactory.getDishes();</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;])</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    .controller(<span class="string">'DishDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, menuFactory</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dish = menuFactory.getDish(<span class="number">3</span>);        </span><br><span class="line">        $scope.dish = dish;</span><br><span class="line">        </span><br><span class="line">    &#125;])</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><p>services.js</p><p>데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)<br>아래는 service를 사용한 예제임.<br>그리고 dishdetail.html에서 사용하던 comment를 dishes에 합쳐서 사용<br>각 dish의 comment 속성에 리스트로 선언</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">.service(<span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dishes = [</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'Uthapizza'</span>,</span><br><span class="line">image: <span class="string">'images/uthapizza.png'</span>,</span><br><span class="line">category: <span class="string">'mains'</span>,</span><br><span class="line">label: <span class="string">'Hot'</span>,</span><br><span class="line">price: <span class="string">'4.99'</span>,</span><br><span class="line">description:<span class="string">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</span><br><span class="line">comment: <span class="string">'aaaaaaa'</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.getDishes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dishes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.getDish = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dishes[index];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Angular-Templates"><a href="#Angular-Templates" class="headerlink" title="Angular Templates"></a>Angular Templates</h3><p>Angular Tmeplate은 HTML과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template의 역할이 반드시 필요하다.</p><p>Angular Template은 Angular JS의 여러 요소에 사용되었는데, Directives, Markup:, Filter, Form controls 등이 대표적이다.</p><h4 id="ng-include-directive"><a href="#ng-include-directive" class="headerlink" title="ng-include directive"></a>ng-include directive</h4><p>external HTML 조각을 HTML 내에 포함하기 위해 directive다.<br>사용방법은 간단하다. </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> ng-<span class="built_in">include</span>=<span class="string">"'menu.html'"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;ng-<span class="built_in">include</span> src=<span class="string">"'menu.html'"</span>&gt;&lt;/ng-<span class="built_in">include</span>&gt;</span><br></pre></td></tr></table></figure><p>두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.</p><p>그리고 한가지 알아두어야 할 점이 있다. ng-include directive를 사용하면 ng-controller를 사용할 때처럼 새로운 scope가 생성된다는 점이다.</p><h4 id="exercise-1"><a href="#exercise-1" class="headerlink" title="exercise"></a>exercise</h4><p>index.html</p><p>header, footer, js, css 등을 import하는 부분을 모두 index.html에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include를 이용하여 포함시킨다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"confusionApp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">"'menu.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"row-footer"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>single page application을 구현하기 위해서는 데이터가 변함에 따라서 ng-include를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Single-Page-Applications&quot;&gt;&lt;a href=&quot;#Single-Page-Applications&quot; class=&quot;headerlink&quot; title=&quot;Single Page Applications&quot;&gt;&lt;/a&gt;Single Page Ap
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 2-2</title>
    <link href="http://blueshw.github.io/2016/08/28/2016-08-28-frontend-javascript-framework-angularjs-week2-2/"/>
    <id>http://blueshw.github.io/2016/08/28/2016-08-28-frontend-javascript-framework-angularjs-week2-2/</id>
    <published>2016-08-27T16:46:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task-Runners-Angular-Scope-Forms-and-Form-Validation-2"><a href="#Task-Runners-Angular-Scope-Forms-and-Form-Validation-2" class="headerlink" title="Task Runners, Angular Scope, Forms and Form Validation-2"></a>Task Runners, Angular Scope, Forms and Form Validation-2</h2><h3 id="Angular-Scope"><a href="#Angular-Scope" class="headerlink" title="Angular Scope"></a>Angular Scope</h3><p>스코프는 다음과 같이 정의된다.</p><blockquote><p>스코프는 application model과 관련된 object다.<br>This is at the core of Angular’s two-way data binding<br>view와 controller 사이를 연결해주는 역할을 한다.</p></blockquote><p>우선 controller에 scope를 만들어 속성을 부여한다. 그리고 view는 controller에 정의된 속성들을 bind 한다. 이런 방식을 통해 view와 controller의 sync를 맞춰준다.</p><h4 id="rootScope"><a href="#rootScope" class="headerlink" title="$rootScope"></a>$rootScope</h4><p>가장 상위의 scope다. app이 시작되면 만들어진다. 새로운 스코프는 ng-controller와 같은 directives 를 통해 만들수 있다. scope의 구조는 DOM의 구조와 비슷하다. 그렇기 때문에 child scope에서는 parent scope의 속성에 접근이 가능하지만 그 반대는 불가하다.</p><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 코드</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>, [])</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        this.tab = <span class="number">1</span>;</span><br><span class="line">        this.filtText = <span class="string">''</span>;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// scope 적용 코드</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>, [])</span><br><span class="line"><span class="comment">// scope 정의</span></span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span><br><span class="line">        $scope.tab = <span class="number">1</span>;</span><br><span class="line">        $scope.filtText = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    )]&#125;;</span><br></pre></td></tr></table></figure><p>기존의 코드를 보면 this접근자를 통해서 속성들을 부여하고 있다. 여기서 스코프를 사용하면, this가 아닌 scope에 속성들을 부여함으로써 view단에서 scope를 통해 각 속성에 접근하게 된다. </p><h4 id="menu-html"><a href="#menu-html" class="headerlink" title="menu.html"></a>menu.html</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 기존 코드 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"MenuController as menuCtrl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;active:menuCtrl.isSelected(1)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(1)"</span> <span class="attr">aria-controls</span>=<span class="string">"all menu"</span></span></span></span><br><span class="line"><span class="xml">                     role="tab"&gt;The Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list tab-pane fade in active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span> <span class="attr">ng-repeat</span>=<span class="string">"dish in menuCtrl.dishes | filter:menuCtrl.filtText"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- scope 적용 코드 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"MenuController"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;active:isSelected(1)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"select(1)"</span> <span class="attr">aria-controls</span>=<span class="string">"all menu"</span></span></span></span><br><span class="line"><span class="xml">                     role="tab"&gt;The Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list tab-pane fade in active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span> <span class="attr">ng-repeat</span>=<span class="string">"dish in dishes | filter:filtText"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>기존코드에서는 menuController의 alias인 menuCtrl을 만들어 각 변수와 함수 앞에 붙여줬었다. 하지만 MenuController에 스코프가 적용되면서 해당 컨트롤러가 속한 DOM 내부에서는 컨트롤러 이름없이 변수/함수명으로 직접 접근이 가능해진다. 스코프를 적용함으로써 훨씬 코드가 간단해졌다. </p><h4 id="ng-show"><a href="#ng-show" class="headerlink" title="ng-show"></a>ng-show</h4><p>ng-show directive는 주어진 조건(true/false)에 따라서 해당 DOM 객체를 보여줄것인지(show) 말것인지(not show)를 결정해준다. 길게 설명할 필요없이 예제를 보자</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"toggleDetails()"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary pull-right"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;showDetails ? 'Hide Details':'Show Details'&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"showDetails"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.description&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>$scope.showDetails를 app.js에 설정해놓고 기본값으로 false를 지정해놓자. 그리고는 button을 하나 만들어 showDetails가 true이면 Hide Details 문구의 버튼을 노출하고 false면 Show Details 문구의 버튼을 노출한다. 리스트의 요소중에 description 부분에 ng-show directive를 선언하고 showDetails를 넣어주자. 그리고 버튼을 클릭하면(showDetails가 toggle 된다. app.js에 function을 만들어둔다.) showDetails가 true가 됐다가 false가 되면서 description이 보여졌다가 가려졌다가 할 것이다.</p><h3 id="Angular-Forms-and-Form-Validation"><a href="#Angular-Forms-and-Form-Validation" class="headerlink" title="Angular Forms and Form Validation"></a>Angular Forms and Form Validation</h3><h4 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h4><p>form은 유저에게 웹 사이트의 정보를 제공하는 가장 널리 상요되는 방법이다. 이번 강의에서는 angularJS에서 form을 이용하는 방법과 form의 validation 체크하는 방법에 대해서 알아보자.</p><p>form에서는 two-way data binding이 중요하게 사용되는데,<br>넘어가기 앞서 잠깐 짚고 넘어가야할게 있다.<br>ng-model의 개념이 약간 모호해서 한번 찾아봤다.</p><blockquote><p><em>ng-model</em></p><p>html의 input, select, textarea 와 같은 입력 요소에 값을 갱신하면 ng-model해 설정된 변수의 값도 변함<br>반대로 변수의 값이 바뀌면 input 등의 화면도 동일하게 변경된다.<br>이를 two-way data binding이라 한다.<br>참고로 form 필드에 설정된 ng-model의 속성을 필드 내에서 부여할 수도 있다.</p></blockquote><p>form과 자바스크립트 object간의 연결해주는 역할을 하는 것이 ng-model이다. ng-model에 설정된 변수가 변경되면 변경된 것을 html에 그대로 반영해준다.<br>예를들어보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript code</span></span><br><span class="line">.controller(<span class="string">'ContactController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">    $scope.feedback = &#123;<span class="attr">mychannel</span>:<span class="string">""</span>, <span class="attr">firstname</span>:<span class="string">""</span>,</span><br><span class="line">                       lastname:<span class="string">""</span>, <span class="attr">agree</span>:<span class="string">""</span>, <span class="attr">email</span>:<span class="string">""</span>&#125;;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// html code</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"firstname"</span> </span><br><span class="line">name=<span class="string">"firstname"</span> placeholder=<span class="string">"Enter First Name"</span> </span><br><span class="line">ng-model=<span class="string">"feedback.firstname"</span> required&gt;</span><br></pre></td></tr></table></figure><p>위와 같이 angularJS의 controller에 feedback이라는 object를 만들어두고, html에서 feedback.firstname을 ng-model attribute에 지정해두면, firstname이 변함에 따라서 자동으로 feedback.firstname의 값을 변경한다.</p><p>select의 경우에는 어떤가 보자</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript code</span></span><br><span class="line"><span class="keyword">var</span> channels = [&#123;<span class="keyword">value</span>:<span class="string">"tel"</span>, label:<span class="string">"Tel."</span>&#125;, &#123;<span class="keyword">value</span>:<span class="string">"Email"</span>, label:<span class="string">"Email"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// html code</span></span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">class</span>=<span class="string">"form-control"</span> ng-model=<span class="string">"feedback.mychannel"</span> </span><br><span class="line">ng-options=<span class="string">"channel.value as channel.label for channel in channels"</span>&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">""</span>&gt;Tel. or Email?&lt;/option&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>우선 select의 item들을 저장해둘 자바스크립트 array 변수 channels를 만든다. 그리고 select 태그내에 ng-model, ng-options를 위와 같이 설정해두자. ng-model의 mychannel에는 유저가 선택된 channel의 value가 들어갈 것이다. ng-options directive에서 channels라는 자바스크립트 array를 for loop로 분해하여 각각 channel이라는 object를 가져온다. 그리고 channel.label이 option의 text로 들어가고, channel.value가 option 태그의 value로써 들어가게 된다. 즉, 만들어진 selectbox의 item 하나를 선택하게 되면, 해당 item의 value 가 feedback.mychannel 변수에 할당된다.</p><p>위의 방법을 이용하면 form의 다른요소나, 웹페이지의 상태에 따라 select의 항목을 동적으로 바꿀 수 있게 된다. </p><h4 id="Form-Validation"><a href="#Form-Validation" class="headerlink" title="Form Validation"></a>Form Validation</h4><p>우선 HTML5 form validation을 끄자<br>그리고 ng-submit directive를 이용하여 form이 submit될 때 sendFeedback함수를 호출하도록 하자.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="attribute">class</span>=<span class="string">"form-horizontal"</span> <span class="attribute">name</span>=<span class="string">"feedbackForm"</span> <span class="attribute">ng-submit</span>=<span class="string">"sendFeedback()"</span> novalidate&gt;</span><br></pre></td></tr></table></figure><p>validation 체크할때 field name을 이용하여 다음의 필드 속성들을 체크할 수 있다.</p><table><thead><tr><th>property</th><th>Description</th></tr></thead><tbody><tr><td>$pristine</td><td>true if form has not been changed (form의 변경사항이 없다면,)</td></tr><tr><td>$dirty</td><td>reverse of $pristine</td></tr><tr><td>$valid</td><td>true if form field/whole form is valid (form이 valid 하면,)</td></tr><tr><td>$invalid</td><td>reverse of $valid</td></tr></tbody></table><p>예를 들어보자.</p><ul><li>feedbackForm.firstName.$pristine : firstName 필드의 변경사항이 없으면 true</li><li>feebackForm.$valid : feedbackForm의 모든 항목이 valid 하면 true</li></ul><p>에러가 있을경우(invalid 하면) bootstrap의 class를 이용하자.</p><blockquote><p>.has-error, .has-warning, .has-success<br>.help-block to display helpful messages below the field</p></blockquote><h4 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">.controller(<span class="string">'ContactController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span><br><span class="line">    $scope.feedback = &#123;mychannel:<span class="string">""</span>, firstname:<span class="string">""</span>,</span><br><span class="line">                       lastname:<span class="string">""</span>, agree:<span class="string">""</span>, email:<span class="string">""</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> channels = [&#123;value:<span class="string">"tel"</span>, label:<span class="string">"Tel."</span>&#125;, </span><br><span class="line">                    &#123;values:<span class="string">"Email"</span>, label:<span class="string">"Email"</span>&#125;];</span><br><span class="line">    $scope.channels = channels;</span><br><span class="line">    $scope.invalidChannelSelection = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;])</span><br><span class="line">.controller(<span class="string">'FeedbackController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span><br><span class="line">    $scope.sendFeedback = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        console.log($scope.feedback);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class="string">""</span>)) &#123;</span><br><span class="line">            $scope.invalidChannelSelection = <span class="keyword">true</span>;</span><br><span class="line">            console.log(<span class="string">'incorrent'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $scope.invalidChannelSelection = <span class="keyword">false</span>;</span><br><span class="line">            $scope.feedback = &#123;</span><br><span class="line">                mychannel:<span class="string">""</span>, firstname:<span class="string">""</span>,</span><br><span class="line">                lastname:<span class="string">""</span>, agree:<span class="keyword">false</span>, email:<span class="string">""</span> </span><br><span class="line">            &#125;;</span><br><span class="line">            $scope.feedback.mychannel = <span class="string">""</span>;</span><br><span class="line">            $scope.feedbackForm.$setPristine();</span><br><span class="line">            console.log($scope.feedback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br><span class="line">    </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="contactus-html"><a href="#contactus-html" class="headerlink" title="contactus.html"></a>contactus.html</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"confusionApp"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">ng-controller</span>=<span class="string">"ContactController"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">name</span>=<span class="string">"feedbackForm"</span> <span class="attr">ng-submit</span>=<span class="string">"sendFeedback()"</span> <span class="attr">novalidate</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : feedbackForm.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"firstname"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"firstname"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">placeholder</span>=<span class="string">"Enter First Name"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.firstname"</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedback.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Your First name is required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : feedbackForm.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lastname"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"lastname"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">placeholder</span>=<span class="string">"Enter Last Name"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.lastname"</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedback.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Your Last name is required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"telnum"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Contact Tel.<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-5 col-sm-4 col-md-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"areacode"</span> <span class="attr">name</span>=<span class="string">"areacode"</span> <span class="attr">placeholder</span>=<span class="string">"Area code"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.tel.areacode"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-7 col-sm-6 col-md-7"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"telnum"</span> <span class="attr">name</span>=<span class="string">"telnum"</span> <span class="attr">placeholder</span>=<span class="string">"Tel. number"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.tel.number"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"emailid"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"emailid"</span> <span class="attr">name</span>=<span class="string">"emailid"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.email"</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine"</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-remove form-control-feedback"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Enter a valid email address.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedbackForm.emailid.$error.required &amp;&amp; !feedbackForm.emailid.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Enter a valid email address.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : invalidChannelSelection &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox col-sm-5 col-sm-offset-2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"approve"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">ng-model</span>=<span class="string">"feedback.agree"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">strong</span>&gt;</span>May we contact you?<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-sm-offset-1"</span> <span class="attr">ng-show</span>=<span class="string">"feedback.agree"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.mychannel"</span> <span class="attr">ng-options</span>=<span class="string">"channel.value as channel.label for channel in channels"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>Tel. or Email?<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"invalidChannelSelection"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Select an option.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"feedback"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Your Feedback<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"feedback"</span> <span class="attr">name</span>=<span class="string">"feedback"</span> <span class="attr">rows</span>=<span class="string">"12"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.comments"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"feedbackForm.$invalid"</span>&gt;</span>Send Feedback<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Your Current Feedback:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;feedback.firstname&#125;</span><span class="xml">&#125; </span><span class="template-variable">&#123;&#123;feedback.lastname | uppercase &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Contact Tel.: (</span><span class="template-variable">&#123;&#123;feedback.tel.areacode&#125;</span><span class="xml">&#125;)</span><span class="template-variable">&#123;&#123;feedback.tel.number&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Contact Email: </span><span class="template-variable">&#123;&#123;feedback.email&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"feedback.agree"</span>&gt;</span>Contact by:</span><span class="template-variable">&#123;&#123;feedback.mychannel&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Comments: </span><span class="template-variable">&#123;&#123;feedback.comments&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Task-Runners-Angular-Scope-Forms-and-Form-Validation-2&quot;&gt;&lt;a href=&quot;#Task-Runners-Angular-Scope-Forms-and-Form-Validation-2&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 2-1</title>
    <link href="http://blueshw.github.io/2016/08/25/2016-08-25-frontend-javascript-framework-angularjs-week2-1/"/>
    <id>http://blueshw.github.io/2016/08/25/2016-08-25-frontend-javascript-framework-angularjs-week2-1/</id>
    <published>2016-08-24T17:30:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task-Runners-Angular-Scope-Forms-and-Form-Validation-1"><a href="#Task-Runners-Angular-Scope-Forms-and-Form-Validation-1" class="headerlink" title="Task Runners, Angular Scope, Forms and Form Validation-1"></a>Task Runners, Angular Scope, Forms and Form Validation-1</h2><h3 id="Web-Tools-Grunt-and-Gulp"><a href="#Web-Tools-Grunt-and-Gulp" class="headerlink" title="Web Tools: Grunt and Gulp"></a>Web Tools: Grunt and Gulp</h3><h4 id="Task-Runners"><a href="#Task-Runners" class="headerlink" title="Task-Runners"></a>Task-Runners</h4><p>웹개발을 하다보면 반복적으로 처리해야하는 태스크가 많이 있다. DRY(do not repeat yourself) 원칙에 따라 태스크를 자동화하기 빌드툴을 사용할 필요가 있다.</p><p>CSS에서 보면 Sass나 Less로 컴파일하거나, 어떤 vender prefixes를 추가하거나 Minification(spaces, newlines, comments 등의 불필요한 캐릭터 삭제)하거나 Concatenation 등의 반복적이 Tasks가 있다.</p><p>Javascript의 경우에는, JSHint를 이용한 자바스크립트 에러체킹이나 Concatenation, Uglification(minification + mangling(변수명 char 하나로 줄이기)) 등이 있겠다.</p><p>이 외에도 Image 용량 최적화, 태스크 rerunning, 변경된 사항 반영하기 위한 server and Livereload, 파일 변경, 테스팅 등의 반복적인 태스크가 있다.</p><p>위에서 살펴본 반복적인 태스크를 Grunt, Gulp 등의 Task Runners를 이용해 자동화 할 수 있다.</p><h3 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h3><p>Grunt는 configuration 기반의 태스크 러너이다. 우선 install 하자. -g 옵션을 주어 global하게 사용할 수 있도록 한다.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>Grunt의 설정팔일은 Gruntfile.js로 정의한다. 대략적인 구조를 살펴보면 아래와 같다.<br>function의 argument에 grunt 객체가 들어가고 그 아래에 필요한 코드를 추가한다. 자세한 내용은 차차 알아보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"><span class="comment">// do requires here</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'jit-grunt'</span>)(grunt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// do grunt task configurations here</span></span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register tasks here</span></span><br><span class="line">grunt.registerTask(<span class="string">'build'</span>, [<span class="string">'jshint'</span>]);</span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="File-Globbing-Patterns"><a href="#File-Globbing-Patterns" class="headerlink" title="File Globbing Patterns"></a>File Globbing Patterns</h4><p>Grunt는 File Globbing Patterns를 사용한다. File Globbing Patterns이란 다음의 내용을 말한다.</p><ul><li>* 문자열, but not /</li><li>? 문자 하나, but not /</li><li>** 문자열 including /</li><li>{} comma로 or 를 표현함</li><li>! 패턴매치가 negative함 </li></ul><p>몇가지 예제를 살펴보자<br>우선 jshint와 jshint-stylish 모듈을 install 한다.<br>jshint는 자바스크립트의 문법을 체크해주는 모듈이다. 세미콜론이 빠졌거나, 괄호가 빠져 있는것 처럼 문법오류나 개선할 부분이 필요한 것을 체크해준다. jshint-stylish는 jshint의 메세지를 좀 더 잘 보여주기 위한 스타일을 제공하는 모듈이다.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>grunt-contrib-<span class="keyword">jshint </span>--save-dev</span><br><span class="line">npm <span class="keyword">install </span><span class="keyword">jshint-stylish </span>--save-dev</span><br></pre></td></tr></table></figure><p>그리고 Configuration을 다음과 같이 작성하자.<br>Configuration 파일은 프로젝트 root 폴더에서 Gruntfile.js를 만들어 아래 내용을 저장한다.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jshint</span>: &#123;</span><br><span class="line"><span class="attribute">options</span>: &#123;</span><br><span class="line"><span class="attribute">jshintrc</span>: <span class="string">'.jshintrc'</span>,</span><br><span class="line"><span class="attribute">reporter</span>: require(<span class="string">'jshint-stylish'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attribute">all</span>: &#123;</span><br><span class="line"><span class="comment">// 실제 체크할 자바스크립트 파일의 경로를 지정한다.</span></span><br><span class="line"><span class="comment">// Gruntfile.js와 app/scripts의 모든 .js 파일을 검사하겠다는 의미다.</span></span><br><span class="line"><span class="attribute">src</span>: [<span class="string">'Gruntfile.js'</span>, <span class="string">'app/scripts/&#123;,*/&#125;*.js'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설정파일은 자바스크립트 객체 형식으로 구성된다. options는 jshint 설정파일과 그외 포맷을 위한 style 모듈이 reporter로 정의되어 있다. hshintrc는 jshint 설정파일이다. all 부분은 jshint를 적용할 자바스크트 파일을 Globbing 패턴으로 지정하였다.</p><h4 id="Greating-a-Distribution-Folder"><a href="#Greating-a-Distribution-Folder" class="headerlink" title="Greating a Distribution Folder"></a>Greating a Distribution Folder</h4><p>수많은 Grunt관련 모듈과 css, js 파일들을 설치함으로써 프로젝트 구성이 점점 복잡해지고 있다. 그래서 Distribution Folder를 만들어 꼭 필요한 모듈만 이용하는 웹사이트를 만들어 보자.</p><p>다음의 모듈을 설치한다.<br>global(-g) 옵션이 없는 설치는 local 설치이므로 모듈을 사용할 프로젝트 디렉토리에서 실행한다.</p><h4 id="usemin-module"><a href="#usemin-module" class="headerlink" title="usemin module"></a>usemin module</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 조건에 맞는 모든 파일을 원하는 폴더(여기서는 dist)로 복사한다.</span></span><br><span class="line">npm install grunt-contrib-copy --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당 폴더의 clean out 한다. rebuild를 위한 초반 작업이다. 그렇기 때문에 가장 먼저 실행해야한다.</span></span><br><span class="line">npm install grunt-contrib-clean --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js, css 파일들을 하나로 합쳐준다.</span></span><br><span class="line">npm install grunt-contrib-concat --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css 파일 minification</span></span><br><span class="line">npm install grunt-contrib-cssmin --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 자바스크립트 변수를 문자열 =&gt; 문자로 변경한다.</span></span><br><span class="line">npm install grunt-contrib-uglify --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// minification한 뒤, css, js 파일을 버전업한다. (브라우저 캐싱 대비)</span></span><br><span class="line"><span class="comment">// 해싱 알고리즘과 length등을 선택할 수 있다.</span></span><br><span class="line">npm insatll grunt-filerev --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css, js 파일을 minification 해준다.</span></span><br><span class="line"><span class="comment">// useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin의 순서로 태스크가 진행된다. </span></span><br><span class="line">npm insatll grunt-usemin --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>usemin은 js, css 파이릉 minification 하기 위한 모듈이다. usemin은 독자적으로 동작하지 않고 여러가지 모듈을 거쳐가는데 대체로 다음과 같다.</p><blockquote><p>useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin</p></blockquote><p>우선 useminPrepare는 html 주석 처리된 부분을 기준으로 css, js 각각의 하나의 파일로 합치기 위한 준비를 한다. concat을 통해 css, js 파일들을 각각 하나로 합쳐준다. 그리고 cssmin, uglify 모듈을 통해 css, js 파일을 minification 하고 filerev로 버전관리를 한다. 마지막으로 usemin이 html 파일에 이전의 모든 모듈이 행한 결과를 반영한다.</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>original 파일의 변경이 발생하였을때 rerun하기 위한 모듈이다.<br>설정된 모든 파일중에 하나라도 변경이 일어나면 즉시 reload한다.<br>reload는 모든 파일들을 복사하는것과 같다고 보면 된다.<br>그런데, js, css 파일들은 copy를 예외처리하는데, usemin 모듈에서 먼저 빌드처리 되기 때문에 watch에서는 제외된다.</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-watch --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>브라우저에서 dist 폴더의 특정 html 파일(보통 index.html)이 실행되도록 한다.<br>watch 모듈과 같이 사용하면 이렇게 사용할 수 있다.</p><blockquote><p>파일 변경 -&gt; livereload (build and copy) -&gt; open(update) browse</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> grunt-contlib-<span class="keyword">connect</span> <span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><h4 id="Gruntfile-js"><a href="#Gruntfile-js" class="headerlink" title="Gruntfile.js"></a>Gruntfile.js</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span> (grunt) &#123;</span><br><span class="line"></span><br><span class="line">require(<span class="string">'time-grunt'</span>)(grunt);</span><br><span class="line">require(<span class="string">'jit-grunt'</span>)(grunt, &#123;</span><br><span class="line">useminPrepare: <span class="string">'grunt-usemin'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line">pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">jshint: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">jshintrc: <span class="string">'.jshintrc'</span>,</span><br><span class="line">reporter: require(<span class="string">'jshint-stylish'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">all: &#123;</span><br><span class="line">src: [</span><br><span class="line"><span class="string">'Gruntfile.js'</span>,</span><br><span class="line"><span class="string">'app/scripts/&#123;,*/&#125;*.js'</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">useminPrepare: &#123;</span><br><span class="line">html: <span class="string">'app/menu.html'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">dest: <span class="string">'dist'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">concat: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">separator: <span class="string">';'</span></span><br><span class="line">&#125;,</span><br><span class="line">dist: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">uglify: &#123;</span><br><span class="line">dist: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">cssmin: &#123;</span><br><span class="line">dist: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">filerev: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">encoding: <span class="string">'utf8'</span>,</span><br><span class="line">algorithm: <span class="string">'md5'</span>,</span><br><span class="line">length: <span class="number">20</span></span><br><span class="line">&#125;,</span><br><span class="line">release: &#123;</span><br><span class="line">files: [&#123;</span><br><span class="line">src: [</span><br><span class="line"><span class="string">'dist/scripts/*js'</span>,</span><br><span class="line"><span class="string">'dist/styles/*.css'</span></span><br><span class="line">]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">usemin: &#123;</span><br><span class="line">html: [<span class="string">'dist/*.html'</span>],</span><br><span class="line">css: [<span class="string">'dist/styles/*.css'</span>],</span><br><span class="line">options: &#123;</span><br><span class="line">assetsDirs: [<span class="string">'dist'</span>, <span class="string">'dist/styles'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">copy: &#123;</span><br><span class="line">dist: &#123;</span><br><span class="line">cwd: <span class="string">'app'</span>,</span><br><span class="line">src: [<span class="string">'**'</span>, <span class="string">'!styles/**/*.css'</span>, <span class="string">'!scripts/**/*.js'</span>],</span><br><span class="line">dest: <span class="string">'dist'</span>,</span><br><span class="line">expand: true</span><br><span class="line">&#125;,</span><br><span class="line">fonts: &#123;</span><br><span class="line">files:[</span><br><span class="line">&#123;</span><br><span class="line">expand: true,</span><br><span class="line">dot: true,</span><br><span class="line">cwd: <span class="string">'bower_components/bootstrap/dist'</span>,</span><br><span class="line">src: [<span class="string">'fonts/*.*'</span>],</span><br><span class="line">dest: <span class="string">'dist'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">expand: true,</span><br><span class="line">dot: true,</span><br><span class="line">cwd: <span class="string">'bower_components/font-awesome'</span>,</span><br><span class="line">src: [<span class="string">'fonts/*.*'</span>],</span><br><span class="line">dest: <span class="string">'dist'</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">copy: &#123;</span><br><span class="line">files: [<span class="string">'app/**'</span>, <span class="string">'!app/**/*.css'</span>, <span class="string">'!app/**/*.js'</span>],</span><br><span class="line">tasks: [<span class="string">'build'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">scripts: &#123;</span><br><span class="line">files: [<span class="string">'app/scripts/app.js'</span>],</span><br><span class="line">tasks: [<span class="string">'build'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">styles: &#123;</span><br><span class="line">files: [<span class="string">'app/styles/mystyles.css'</span>],</span><br><span class="line">tasks:[<span class="string">'build'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">livereload: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">livereload: <span class="string">'&lt;%= connect.options.livereload %&gt;'</span></span><br><span class="line">&#125;,</span><br><span class="line">files: [</span><br><span class="line"><span class="string">'app/&#123;,*/&#125;*.html'</span>,</span><br><span class="line"><span class="string">'.tmp/styles/&#123;,*/&#125;*.css'</span>,</span><br><span class="line"><span class="string">'app/images/&#123;,*/&#125;*.&#123;png,jpg,jpeg,gif,webp,svg&#125;'</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">connect: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">port: <span class="number">9000</span>,</span><br><span class="line">hostname: <span class="string">'localhost'</span>,</span><br><span class="line">livereload: <span class="number">35729</span></span><br><span class="line">&#125;,</span><br><span class="line">dist: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">open: true, </span><br><span class="line">base: &#123;</span><br><span class="line">path: <span class="string">'dist'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">index: <span class="string">'menu.html'</span>,</span><br><span class="line">maxAge: <span class="number">300000</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">clean: &#123;</span><br><span class="line">build: &#123;</span><br><span class="line">src: [<span class="string">'dist/'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 태스크 등록</span><br><span class="line">// 순서가 중요하다.</span><br><span class="line">// jshint로 모든 .js 파일을 검사하게 된다.</span><br><span class="line">grunt.registerTask(<span class="string">'build'</span>, [</span><br><span class="line"><span class="string">'clean'</span>,</span><br><span class="line"><span class="string">'jshint'</span>,</span><br><span class="line"><span class="string">'useminPrepare'</span>,</span><br><span class="line"><span class="string">'concat'</span>,</span><br><span class="line"><span class="string">'cssmin'</span>,</span><br><span class="line"><span class="string">'uglify'</span>,</span><br><span class="line"><span class="string">'copy'</span>,</span><br><span class="line"><span class="string">'filerev'</span>,</span><br><span class="line"><span class="string">'usemin'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">// 순서가 중요하다. 먼저 build, 다음에는 브라우져 오픈, watch</span><br><span class="line">// watch가 마지막에 실행되므로, 파일 변경을 감지하면 build, 브라우저 오픈, 다시 watch 와 같은 순서로 진행된다.</span><br><span class="line">grunt.registerTask(<span class="string">'serve'</span>, [<span class="string">'build'</span>,<span class="string">'connect:dist'</span>,<span class="string">'watch'</span>]);</span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><p>Grunt는 Configuration기반의 태스크 러너였다면, 반대로 Gulp는 코드 기반의 태스크 러너 이다. Gulp는 Grunt 처럼 태스크를 실행하기 위한 중간 파일을 만들지 않고 NodeJS streams을 사용하여 복잡한 파이프라인 형태로 실행된다(무슨 말이지는 잘 모르겠지만, 예제를 보면 알겠지). </p><p>일단 global로 설치하자.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g gulp</span><br></pre></td></tr></table></figure><p>Grunt 예제와 비슷하게 동작하는 예제를 실행하기 위해 다음과 같은 plugins 을 설치한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> </span><br><span class="line">gulp-jshint jshint-stylish</span><br><span class="line">gulp-imagemin gulp-<span class="keyword">concat</span> gulp-uglify gulp-minify-css gulp-usemin</span><br><span class="line">gulp-<span class="keyword">cache</span> gulp-rev gulp-<span class="keyword">rename</span> gulp-notify</span><br><span class="line">browser-<span class="keyword">sync</span> del</span><br><span class="line"><span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><p>플러그인을 로드하는 방법은 다음과 같다.<br>직접 각 플러그인을 로드해도 되지만, package.json 파일 형태로 저장할 수도 있다.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">  jshint = <span class="keyword">require</span>(<span class="string">'gulp-jshint'</span>)</span><br><span class="line">  sylish = <span class="keyword">require</span>(<span class="string">'jshint-stylish'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="params">...</span></span><br></pre></td></tr></table></figure><h4 id="Gulp-Streams"><a href="#Gulp-Streams" class="headerlink" title="Gulp Streams"></a>Gulp Streams</h4><p>Gulp Streams는 nodeJS streams를 사용하여 파이프라인을 구성하는데, 파이프 라인이란 하나의 function의 결과가 다음 function으로 그대로 전달되는 연쇄적인 명령셋을 말한다. 예제를 살펴보자</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gulp.src(<span class="string">'app/scripts/**/*.js'</span>)</span><br><span class="line">.pipe(jshint())</span><br><span class="line">.pipe(jshint.reporter(stylish));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>우선 걸프 태스크를 생성하고 그 안에서 소스를 선택하고 jshint를 생성하고 스타일을 적용해주는 일련의 명령들을 pipe라는 function을 이용하여 연결하였다.</p><p>Watch 태스크 예제를 살펴보자</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'browser-sync'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gulp.watch(<span class="string">'&#123;app/scripts/**/*.js, app/style/**/*.css, app/**/*.html&#125;'</span>, [<span class="string">'usemin'</span>]);</span><br><span class="line">gulp.watch(<span class="string">'app/images/**/*'</span>, [<span class="string">'imagemin'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>태스크의 두번째 인자를 보면, browser-sync가 대괄호로 묶여져 있다. 이 의미는 browser-sync는 watch 태스크에 종속적이라는 말이다. 즉, watch 태스크가 실행되면 자동으로 browser-sync가 실행된다.</p><h4 id="Default-Task"><a href="#Default-Task" class="headerlink" title="Default Task"></a>Default Task</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gulp.start(<span class="string">'usemin'</span>, <span class="string">'imagemin'</span>, <span class="string">'copyfonts'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>default 태스크는 콘솔창에서 gulp 라고 입력하면 실행되는 태스크이다. clean 태스크가 연쇄적으로 발생하게 되고, 내부에서는 서로 dependency가 없는 usemin, imagemin, copyfonts가 동시에 실행된다.</p><h4 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h4><p>콤마(,)와 띄어쓰기에 유의해야 한다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</span><br><span class="line">jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</span><br><span class="line">stylish = <span class="built_in">require</span>(<span class="string">'jshint-stylish'</span>),</span><br><span class="line">uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">usemin = <span class="built_in">require</span>(<span class="string">'gulp-usemin'</span>),</span><br><span class="line">imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</span><br><span class="line">rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</span><br><span class="line">notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</span><br><span class="line">cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</span><br><span class="line">changed = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>),</span><br><span class="line">rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>),</span><br><span class="line">browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>),</span><br><span class="line">del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'app/scripts/**/*.js'</span>)</span><br><span class="line">.pipe(jshint())</span><br><span class="line">.pipe(jshint.reporter(stylish));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'usemin'</span>, [<span class="string">'jshint'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'./app/menu.html'</span>)</span><br><span class="line">.pipe(usemin(&#123;</span><br><span class="line">css:[minifycss(),rev()],</span><br><span class="line">js: [uglify(),rev()]</span><br><span class="line">&#125;))</span><br><span class="line">.pipe(gulp.dest(<span class="string">'dist/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'imagemin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> del([<span class="string">'dist/images'</span>]), gulp.src(<span class="string">'app/images/**/*'</span>)</span><br><span class="line">.pipe(cache(imagemin(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span>, <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;)))</span><br><span class="line">.pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">.pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Images task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> del([<span class="string">'dist'</span>])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'copyfonts'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.src(<span class="string">'./bower_components/font-awesome/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/fonts'</span>));</span><br><span class="line">gulp.src(<span class="string">'./bower_components/bootstrap/dist/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/fonts'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'browser-sync'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.watch(<span class="string">'&#123;app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html&#125;'</span>, [<span class="string">'usemin'</span>]);</span><br><span class="line">gulp.watch(<span class="string">'app/images/**/*'</span>, [<span class="string">'imagemin'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, [<span class="string">'default'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> files = [</span><br><span class="line"><span class="string">'app/**/*.html'</span>,</span><br><span class="line"><span class="string">'app/styles/**/*.css'</span>,</span><br><span class="line"><span class="string">'app/images/**/*.png'</span>,</span><br><span class="line"><span class="string">'app/scripts/**/*.js'</span>,</span><br><span class="line"><span class="string">'dist/**/*'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">browserSync.init(files, &#123;</span><br><span class="line">server: &#123;</span><br><span class="line">baseDir: <span class="string">"dist"</span>,</span><br><span class="line">index: <span class="string">"menu.html"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, browserSync.reload);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.start(<span class="string">'usemin'</span>, <span class="string">'imagemin'</span>, <span class="string">'copyfonts'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Task-Runners-Angular-Scope-Forms-and-Form-Validation-1&quot;&gt;&lt;a href=&quot;#Task-Runners-Angular-Scope-Forms-and-Form-Validation-1&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 1</title>
    <link href="http://blueshw.github.io/2016/08/18/2016-08-18-frontend-javascript-framework-angularjs-week1/"/>
    <id>http://blueshw.github.io/2016/08/18/2016-08-18-frontend-javascript-framework-angularjs-week1/</id>
    <published>2016-08-18T14:10:50.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Full-Stack-Web-Development-The-Big-Picture"><a href="#Full-Stack-Web-Development-The-Big-Picture" class="headerlink" title="Full-Stack Web Development: The Big Picture"></a>Full-Stack Web Development: The Big Picture</h2><h3 id="Three-Tier-Architecture"><a href="#Three-Tier-Architecture" class="headerlink" title="Three Tier Architecture"></a>Three Tier Architecture</h3><p>보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.</p><ul><li>Presentaion Layer : HTML, CSS, JS</li><li>Business Layer : Ruby, Python, Java, C++</li><li>Data Access Layer : DBMS</li></ul><p>반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer에는 자바스크립트 프레임웍인 AngularJS, business layer에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB를 사용하여 개발한다.</p><p>이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.</p><h3 id="Course-Overview"><a href="#Course-Overview" class="headerlink" title="Course Overview"></a>Course Overview</h3><p>이번 강의에서 다루는 주제는 다음과 같다.</p><ul><li>AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)</li><li>Web Tools : Grunt, Gulp, Yo and Yeoman</li></ul><h2 id="Introduction-to-AngularJS"><a href="#Introduction-to-AngularJS" class="headerlink" title="Introduction to AngularJS"></a>Introduction to AngularJS</h2><h3 id="Front-End-JavaScript-Frameworks-OverView"><a href="#Front-End-JavaScript-Frameworks-OverView" class="headerlink" title="Front-End JavaScript Frameworks OverView"></a>Front-End JavaScript Frameworks OverView</h3><blockquote><p>소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery가 있다.</p><p>소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS나 durandal, backbone 등이 대표적이다.</p></blockquote><h4 id="10가지-Javascript-Framework"><a href="#10가지-Javascript-Framework" class="headerlink" title="10가지 Javascript Framework"></a>10가지 Javascript Framework</h4><ul><li>Angular : one of the three Major JS framework</li><li>Ember : one of the three Major JS framework</li><li>Backbone : one of the three Major JS framework</li><li>React : 프레임웍이라기 보다 라이브러리에 가까움</li><li>Aurelia</li><li>Meteor : 요즘 각광받기 시작</li><li>Polymer</li><li>Knockout</li><li>Vue</li><li>Mercury</li></ul><h4 id="3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1"><a href="#3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1" class="headerlink" title="3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)"></a>3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">Ember</th><th style="text-align:center">Angular</th><th style="text-align:center">Backbone</th></tr></thead><tbody><tr><td style="text-align:left">Opinionated</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">Ease of Use</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">Learning Curve</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">Popularity</td><td style="text-align:center">-</td><td style="text-align:center">3</td><td style="text-align:center">-</td></tr></tbody></table><h3 id="Introduction-to-AngularJS-1"><a href="#Introduction-to-AngularJS-1" class="headerlink" title="Introduction to AngularJS"></a>Introduction to AngularJS</h3><p>HTML은 static한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular를 이용하면 다음과 같은 이점을 가질 수 있다.</p><blockquote><p>Solving the impedance mismatch</p></blockquote><p>back end 데이터와 static content를 출력하는데 HTML만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다.</p><blockquote><p>Designed with CRUD applications (data-driven) in mind</p></blockquote><p>데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD에 대해서는 다음 모듈에서 자세하게 다루기로 한다.</p><blockquote><p>Declarative approach</p></blockquote><p>Angular는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘…)</p><h4 id="Angular-Vocabulary"><a href="#Angular-Vocabulary" class="headerlink" title="Angular Vocabulary"></a>Angular Vocabulary</h4><p>앞으로 배울 Angular의 문법은 아래와 같은 것들이 있다.</p><ul><li>Two-way Data Binding</li><li>Scope</li><li>Directives</li><li>Templates</li><li>Routing</li><li>Testing</li><li>Modules</li><li>Controllers</li><li>Filters</li><li>Factory</li><li>Service</li><li>Provider</li></ul><p>우선은 Two-way Data Binding과 Directives에 대해서 먼저 알아보자</p><h4 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h4><p>Angular Directives는 ng-<em> or data-ng-</em> 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자</p><ul><li><p>ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.</p></li><li><p>ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression을 Evaluation한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array도 사용가능하다.</p></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-init</span>=<span class="string">"index=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-init</span>=<span class="string">"dish=</span></span></span><span class="template-variable">&#123;name:'example', ...&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>ng-model : input value를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Comment: </span><span class="template-variable">&#123;&#123;dish.comment&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Type your comment:</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"dish.comment"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>dish object의 comment는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag에서 ng-model 속성을 부여하고 이미 정의된 dish.comment를 입력하면 Two-way data binding에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.</p><p>양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding이라고 부르는 것 같다.</p><ul><li>ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.</li></ul><h4 id="Angular-Expressions"><a href="#Angular-Expressions" class="headerlink" title="Angular Expressions"></a>Angular Expressions</h4><ul><li><p>Evaluated against an Angular scope object<br>Angular 스코프에 맞게 value가 평가된다.</p></li><li><p>No conditionals, loops, or exceptions<br>위의 사항들은 expression으로 사용이 불가하다.</p></li><li><p>Expressions enclosed in <br>중괄호 두개를 겹쳐서 사용한다.</p></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>6 + 5 = </span><span class="template-variable">&#123;&#123; 6 + 5 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123; dish.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Models-Views-and-Controllers"><a href="#Models-Views-and-Controllers" class="headerlink" title="Models, Views and Controllers"></a>Models, Views and Controllers</h2><h3 id="The-Model-View-Controller-Framework"><a href="#The-Model-View-Controller-Framework" class="headerlink" title="The Model View Controller Framework"></a>The Model View Controller Framework</h3><blockquote><p>Design pattern is ell-documented solution to a recurring problem</p></blockquote><p>디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.</p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>MVC는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다. </p><ul><li><p>Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.</p></li><li><p>View : 사용자에게 보여지는 영역이다. view는 유저와 상호작용을 위해 form에 모델정보를 redering 한다. 하나의 model로 서로 다른 목적의 뷰를 만들수도 있다.  </p></li><li><p>Controller : View와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다. </p></li></ul><h4 id="MVVM-Model-View-View-Model"><a href="#MVVM-Model-View-View-Model" class="headerlink" title="MVVM (Model View View-Model)"></a>MVVM (Model View View-Model)</h4><p>MVC 패턴의 파생된 형태중 하나인 MVVM은 Model, View, View-Model로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model과 View 사이에서 데이터 바인딩이 이루어진다.  </p><h3 id="Angular-Modules-and-Controllers"><a href="#Angular-Modules-and-Controllers" class="headerlink" title="Angular Modules and Controllers"></a>Angular Modules and Controllers</h3><p>일반적으로 Angular도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular가 MVVM이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.</p><h4 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h4><p>Angular Modules은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array인데 나중에 설명할 것이다. 아래같은 경우 ngApp이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ngApp</span>=<span class="string">"confusionApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'confusionApp'</span>,[]);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Angular-Controller"><a href="#Angular-Controller" class="headerlink" title="Angular Controller"></a>Angular Controller</h4><p>Angular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"menuController as menuCtrl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'confusionApp'</span>, []);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'menuController'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> dishes = [item, ... ];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.dishes = dishes;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 <strong>this.dishes = dishes</strong> 부분은 아마도 div 태그 내에서 사용가능한 dishes를 정의해주기 위해 자바스크립트 오브젝트인 dishes를 this.dishes에 할당해준게 아닌가 생각된다.</p><h2 id="Angular-Filters"><a href="#Angular-Filters" class="headerlink" title="Angular Filters"></a>Angular Filters</h2><p>필터는 서버사이드 또는 클라이언트에서 만들어진 data를 end user에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"media-headgin"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.name&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger label-xs"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.label&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- currency 필터는 price에 $를 붙여준다.--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.price | currency&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.description&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Angluar의-Built-in-Filters"><a href="#Angluar의-Built-in-Filters" class="headerlink" title="Angluar의 Built-in Filters"></a>Angluar의 Built-in Filters</h4><ul><li>uppercase / lowercase : converts the text</li><li>currency : $를 붙여준다.</li><li>date : 날짜 포맷을 변경한다.</li><li>filter : 특정 조건에 맞게 array의 서브셋을 리턴한다.</li><li>orderBy : 조건에 맞게 정렬한다. </li><li>json, limitTo 등도 있다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- filter 예제, HTML 코드 --&gt;</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span>="<span class="title">media</span>" <span class="title">ng</span>-<span class="title">repeat</span>="<span class="title">dish</span> <span class="title">in</span> <span class="title">menuCtrl</span>.<span class="title">dishes</span> | <span class="title">filter</span>:<span class="type">menuCtrl.filtText"&gt;...</span>&lt;<span class="type">/li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- javascript 코드 --&gt;</span><br><span class="line"><span class="keyword">var</span> filtText = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.select = function(setTab) &#123;</span><br><span class="line"><span class="keyword">this</span>.tab = setTab;</span><br><span class="line"><span class="keyword">if</span> (setTab === <span class="number">2</span>)</span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">"appetizer"</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (setTab === <span class="number">3</span>)</span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">"mains"</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (setTab === <span class="number">4</span>)</span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">"dessert"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 HTML과 javascript 코드를 작성한다.<br>그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).<br>그럼 각 탭 을 눌렀을때 filtText가 특정 문자열로 변경된다.<br>미리 적용해놓은 filter에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.</p><h2 id="Excercise-Code"><a href="#Excercise-Code" class="headerlink" title="Excercise Code"></a>Excercise Code</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"confusionApp"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- The above 3 meta tags *must* come first in the head; any other head</span></span></span><br><span class="line"><span class="xml">         content must come *after* these tags --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ristorante Con Fusion: Menu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Bootstrap --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bower_components/bootstrap/dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bower_components/bootstrap/dist/css/bootstrap-theme.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bower_components/font-awesome/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles/bootstrap-social.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles/mystyles.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/respond/1.4.2/respond.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"menuController as menuCtrl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(1)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(1)"</span> <span class="attr">aria-controls</span>=<span class="string">"all menu"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>The Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(2)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(2)"</span> <span class="attr">aria-controls</span>=<span class="string">"appetizers"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>Appetizers<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(3)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(3)"</span> <span class="attr">aria-controls</span>=<span class="string">"mains"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>Mains<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(4)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(4)"</span> <span class="attr">aria-controls</span>=<span class="string">"desserts"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>Desserts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list tab-pane fade in active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span> <span class="attr">ng-repeat</span>=<span class="string">"dish in menuCtrl.dishes | filter:menuCtrl.filtText"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object img-thumbnail"</span> <span class="attr">ng-src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;dish.image&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">"Uthapizza"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.name&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.label&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.price | currency&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.description&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="comment">&lt;!-- &lt;p&gt;Comment: </span></span><span class="template-variable">&#123;&#123;dish.comment&#125;&#125;</span><span class="xml"><span class="comment">&lt;/p&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="comment">&lt;!-- &lt;p&gt;Type your comment: --&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="comment">&lt;!-- &lt;input type="text" ng-model="dish.comment"&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../bower_components/angular/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">        var app = angular.module('confusionApp', []);</span></span><br><span class="line"><span class="xml">        app.controller('menuController', function()&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            this.tab = 1;</span></span><br><span class="line"><span class="xml">            this.filtText = '';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            var dished = [</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza',</span></span><br><span class="line"><span class="xml">                                image: 'images/uthapizza.png',</span></span><br><span class="line"><span class="xml">                                category: 'mains',</span></span><br><span class="line"><span class="xml">                                label: 'Hot',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: 'aaaaaaa'</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza2',</span></span><br><span class="line"><span class="xml">                                image: 'images/zucchipakoda.png',</span></span><br><span class="line"><span class="xml">                                category: 'mains',</span></span><br><span class="line"><span class="xml">                                label: '',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: ''</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza3',</span></span><br><span class="line"><span class="xml">                                image: 'images/vadonut.png',</span></span><br><span class="line"><span class="xml">                                category: 'appetizer',</span></span><br><span class="line"><span class="xml">                                label: 'New',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: ''</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza4',</span></span><br><span class="line"><span class="xml">                                image: 'images/elaicheesecake.png',</span></span><br><span class="line"><span class="xml">                                category: 'dessert',</span></span><br><span class="line"><span class="xml">                                label: '',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: ''</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                            ];</span></span><br><span class="line"><span class="xml">            this.dishes = dished;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            this.select = function(setTab) &#123;</span></span><br><span class="line"><span class="xml">                this.tab = setTab;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                if (setTab === 2)</span></span><br><span class="line"><span class="xml">                    this.filtText = "appetizer";</span></span><br><span class="line"><span class="xml">                else if (setTab === 3)</span></span><br><span class="line"><span class="xml">                    this.filtText = "mains"</span></span><br><span class="line"><span class="xml">                else if (setTab === 4)</span></span><br><span class="line"><span class="xml">                    this.filtText = "dessert"</span></span><br><span class="line"><span class="xml">                else </span></span><br><span class="line"><span class="xml">                    this.filtText = "";</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            this.isSelected = function(checkTab) &#123;</span></span><br><span class="line"><span class="xml">                return (this.tab === checkTab)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Full-Stack-Web-Development-The-Big-Picture&quot;&gt;&lt;a href=&quot;#Full-Stack-Web-Development-The-Big-Picture&quot; class=&quot;headerlink&quot; title=&quot;Full-Sta
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
