<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>보노의 블로그</title>
  <icon>https://www.gravatar.com/avatar/e9b052a52621754eede9ed8d52735ccf</icon>
  <subtitle>Infinite Finitude</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://blueshw.github.io/"/>
  <updated>2018-01-28T15:27:41.000Z</updated>
  <id>http://blueshw.github.io/</id>
  
  <author>
    <name>bono</name>
    <email>blueshw83@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[번역] Tasks, microtasks, queues and schedules</title>
    <link href="http://blueshw.github.io/2018/01/28/tasks-microtasks-queues-and-schedules/"/>
    <id>http://blueshw.github.io/2018/01/28/tasks-microtasks-queues-and-schedules/</id>
    <published>2018-01-28T12:31:39.000Z</published>
    <updated>2018-01-28T15:27:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>원본: <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="external nofollow noopener noreferrer" target="_blank">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a><br>의역, 오역이 가득합니다. 개인적으로 정확한 개념을 잡기 위한 번역입니다. 불필요하다 생각한 내용은 과감히 제거했습니다.<br>테스트는 원본 페이지에서 확인 가능합니다.</p></blockquote><p>아래 자바스크립트 코드를 살펴보자.<br></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><p></p><p>위의 코드를 실행하면 아래와 같은 순서로 출력된다.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p></p><p>브라우저에 따라서 조금 다른데 Microsoft Edge, Firefox 40, iOS Safari, desktop Safari 8.0.8에서는 예외적으로 <code>setTimeout</code>이 <code>promise1</code>, <code>promise2</code>보다 먼저 출력된다. 진짜 이상한점은 Firefox 39, Safari 8.0.7에서는 정상적으로 출력된다는 것이다.</p><h3 id="왜-이렇게-출력되는-것일까"><a href="#왜-이렇게-출력되는-것일까" class="headerlink" title="왜 이렇게 출력되는 것일까?"></a>왜 이렇게 출력되는 것일까?</h3><p>이를 이해하기 위해서는 우선 이벤트 루프가 <code>task</code>와 <code>microtask</code>를 어떻게 다루는지에 대해 알 필요가 있다. </p><p>스레드는 그 자신의 이벤트 루프를 가지고 있고 각각의 web worker는 자신의 이벤트 루프를 수행하기 때문에 서로 독립적으로 실행된다. 그러나 같은 도메인(origin)의 모든 브라우저 창들은 동기적으로 통신할 수 있기 때문에 이벤트 루프를 서로 공유한다. 이벤트 루프는 지속적으로 돌아가면서, 대기열에 들어가있는 task들을 실행시킨다. 한 이벤트 루프는 실행 순서를 보장하는 여러개의 task를 가지고 있지만 각 이벤트 루프의 실행단계에서 어떤 task를 실행시킬지는 브라우저가 선택한다. 이를 통해 브라우저는 유저 input과 같은 성능에 민감한 task에 우선권을 부여할 수 있다.</p><p>task는 브라우저 내부에서 javascript/DOM으로 들어가 순차적으로 발생하도록 예약된다. task 사이에서 브라우저는 렌더링을 새로한다. 마우스 클릭으로 이벤트 콜백을 발생시키려면 HTML 파싱 처럼 task예약이 필요하다. 위에서 보았던 <code>setTimeout</code>이 좋은 사례이다.</p><p><code>setTimeout</code>은 주어진 delay를 기다린 다음 콜백을 위한 새로운 task를 예약한다. 이것이 <code>setTimeout</code>로그가 <code>script end</code>로그 이후에 출력되는 이유이다. <code>script end</code>로그는 첫번째 task의 일부이고 <code>setTimeout</code>은 별도의 task에서 발생한 로그이다. </p><p>일반적으로 microtask는 현재 실행되고 있는 script 바로 다음에 발생해야하는 작업으로 예약된다. 예를들어 일괄처리에 대한 반응(?)이나 새로운 task를 만들때의 단점 없이 비동기로 어떤 작업을 처리하기 위해 사용된다. microtask의 대기열은 다른 자바스크립트가 실행중이 아니거나 task가 끝난 후에 처리된다. 대기중인 microtask는 대기열의 끝에 더해지고 실행된다. <code>observer callback</code>이나 <code>promise callback</code>이 대표적인 microtask다.</p><p>promise가 처리될 때 혹은 이미 처리된 promise는 callback을 처리하기 위해 microtask의 대기열에 들어간다. 이눈 promise가 처리 여부와 상관없이 그 callbak이 비동기로 실행됨을 보장한다. 즉, 처리된 promise에 대해서 <code>then(resolve, reject)</code>이 호출되면 그 즉시 microtask가 대기열에 들어간다. 이것이 바로 <code>promise1</code>과 <code>promise2</code>가 <code>script end</code> 다음에 출력되는 이유이다. 현재 실행되는 script(task)가 끝난 다음에 반드시 microtask가 처리되어야 한다. <code>promise1</code>과 <code>promise2</code>가 <code>setTimeout</code> 이전에 출력되는 이유는 microtask가 다음에 실행될 task 이전에 처리되기 때문이다.</p><p>위 코드를 다시 살펴보면 아래와 같은 순서로 처리됨을 알 수 있다.</p><blockquote><p>원문에서 확인함을 추천, 원문에는 animation으로 코드의 실행과정과 task queue 및 js 실행 스택을 확인할 수 있다.</p></blockquote><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 - task1 실행: script, script start 출력</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 - task2 등록: timer task 대기열에 들어감</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="comment">// 8 - task2 실행</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 - microtask1 등록: promise가 microtask 대기열에 들어감</span></span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="comment">// 5 - microtask1 실행: promise1 출력</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise1'</span>);</span><br><span class="line"><span class="comment">// 6 - microtask2 등록: </span></span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="comment">// 7 - microtask2 실행: promise2 출력</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 - task1 종료: script end 출력</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><h3 id="그럼-어떤-브라우저에서는-왜-다르게-동작할까"><a href="#그럼-어떤-브라우저에서는-왜-다르게-동작할까" class="headerlink" title="그럼 어떤 브라우저에서는 왜 다르게 동작할까?"></a>그럼 어떤 브라우저에서는 왜 다르게 동작할까?</h3><p>위에서 언급한 특정 브라우저에서는 <code>promise1</code>과 <code>promise2</code>가 두번째 task인 <code>setTimeout</code> 이후에 출력된다. 이때는 promise가 microtask가 아닌 새로운 task로 인식되어 <code>setTimeout</code> task 이후에 출력되는 것이 아닐까 생각된다.</p><p>promise가 HTML이 아니라 ECMAScript에서 나왔기 때문에 변명의 여지가 있어보입니다. ECMAScript는 microtask와 비슷한 job의 개념을 가지고 있다. 그러나 그 관계가 명확한 것은 아니지만(<a href="https://esdiscuss.org/topic/the-initialization-steps-for-web-browsers#content-16" rel="external nofollow noopener noreferrer" target="_blank">vague mailing list discussions</a>), 일반적으로 promise는 microtask 대기열의 일부로 받아들여지고 있다.</p><p>promise를 task로써 다룰 때는 성능상 문제가 발생할 수 있는데, promise callback이 렌더링과 같은 task 관련 작업들에 의해 불필요하게 연기될수도 있기 때문이다. 또한 이는 다른 자바스크립트 소스와의 상호작용으로 인해서 무결성이 훼손될수도 있고 그로인해 다른 API와의 상호작용이 깨질수도 있다.</p><p>해당 이슈는 Edge 브라우저에서 이미 완결되었다(<a href="https://connect.microsoft.com/IE/feedback/details/1658365" rel="external nofollow noopener noreferrer" target="_blank">Edge ticket</a>).</p><h3 id="task인지-microtask인지는-어떻게-알수-있을까"><a href="#task인지-microtask인지는-어떻게-알수-있을까" class="headerlink" title="task인지 microtask인지는 어떻게 알수 있을까?"></a>task인지 microtask인지는 어떻게 알수 있을까?</h3><p>테스트 방법은 하나다. 비록 올바르게 구현됐다는 가정이 필요하지만, promise와 <code>setTimeout</code>과 관련된 로그의 출력을 보면 알 수 있다.</p><p>더 확실한 방법은 스펙을 찾아보면 된다. 예를들어 task가 대기열에 들어가는 과정을 나타낸 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#timer-initialisation-steps" rel="external nofollow noopener noreferrer" target="_blank">step 14 of setTimeout</a>을 살펴볼 수 있고, microtask가 큐에 들어가는 과정을 나타낸 <a href="https://dom.spec.whatwg.org/#queue-a-mutation-record" rel="external nofollow noopener noreferrer" target="_blank">step 5 of queueing a mutation record</a>를 보면 좀 더 자세하게 알 수 있다.</p><p>이미 얘기한것 처럼 ECMAScript에서는 microtask는 job으로 불린다. <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-performpromisethen" rel="external nofollow noopener noreferrer" target="_blank">step 8 .a PerformPromiseThen</a>을 보면, EnqueueJob은 microtask 대기열에서 호출됨을 알 수 있다.</p><p>다음에는 좀더 복잡한 예제를 살펴보자.</p><h3 id="Level-1-bossfight"><a href="#Level-1-bossfight" class="headerlink" title="Level 1 bossfight"></a>Level 1 bossfight</h3><p>아래에 간단한 html이 있다.<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p></p><p>그리고 아래 자바스크립트 코드 일부가 있다. 이때 <code>div .inner</code>를 클릭하면 로그가 어떻게 출력될까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// outer 클래스 element와 inner 클래스 element를 가져온다.</span></span><br><span class="line"><span class="keyword">var</span> outer = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// outer element의 상태(attribute) 변화를 감시한다.</span></span><br><span class="line"><span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mutate'</span>);</span><br><span class="line">&#125;).observe(outer, &#123;</span><br><span class="line">  attributes: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// click 리스너</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  outer.setAttribute(<span class="string">'data-random'</span>, <span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inner, outer element에 클릭 이벤트를 붙인다.</span></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, onClick);</span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, onClick);</span><br></pre></td></tr></table></figure><p><code>div.inner</code>를 클릭했을 때와, <code>div .outer</code>를 클릭했을때 어떻게 다른지 알겠는가? 당신이 여전히 맞을수도 있겠지만 불행하게도 브라우저마다 동일한 결과를 보여주지는 않는다(버전 명시가 안되있어서 현재 최신 버전에서도 동일할지는 테스트가 필요하겠다).</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chrome : </span><br><span class="line">click - promise - mutate - click - promise - mutate - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Firefox : </span><br><span class="line">click - mutate - click - mutate - <span class="keyword">timeout</span> - promise - promise - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Safari : </span><br><span class="line">click - mutate - click - mutate - promise - promise - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Edge</span><br><span class="line">click - click - mutate - <span class="keyword">timeout</span> - promise - <span class="keyword">timeout</span> - promise</span><br></pre></td></tr></table></figure><h3 id="어떤-브라우저가-맞을까"><a href="#어떤-브라우저가-맞을까" class="headerlink" title="어떤 브라우저가 맞을까?"></a>어떤 브라우저가 맞을까?</h3><p>클릭 이벤트를 전달하는것은 하나의 task다(즉, <code>div .inner</code>에서 클릭이 발생해서 <code>div .outer</code>로 버블링되더라도 두개의 동작이 별도의 task가 아니라 하나의 task라는 의미). Mutation observer나 promise callback은 microtask로 대기열에 들어가고 <code>setTimeout</code> 콜백은 task로 대기열에 들어간다. 즉 아래와 같은 방식으로 처리된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 - task1 실행: script 실행</span></span><br><span class="line"><span class="keyword">var</span> outer = <span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>);</span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 8 - microtask2 실행: mutation observer 콜백 실행</span></span><br><span class="line">  <span class="comment">// 13 - microtask4 실행: mutation observer 콜백 실행</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mutate'</span>);</span><br><span class="line">&#125;).observe(outer, &#123;</span><br><span class="line">  attributes: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 - task2 등록 및 실행: inner 영역 click 이벤트 발생</span></span><br><span class="line"><span class="comment">// 9 - task2 계속 실행 : inner에서 outer로 click 이벤트 버블링</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 4 - task3 등록: inner 영역 타이머 task 생성, setTimeout</span></span><br><span class="line">  <span class="comment">// 10 - task4 등록: outer 영역 타이머 task 생성, setTimeout</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 14 - task3 실행: inner 영역 타이머 콜백 실행</span></span><br><span class="line">    <span class="comment">// 15 - task4 실행: outer 영역 타이머 콜백 실행</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 5 - microtask1 등록: inner 영역 promise</span></span><br><span class="line">  <span class="comment">// 11 - microtask3 등록: outer 영역 promise</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 7 - microtask1 실행 : inner 영역의 promise 콜백 실행</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6 - microtask2 등록: inner 영역 Mutation observer</span></span><br><span class="line">  <span class="comment">// 12 - microtask4 등록: outer 영역 Mutation observer 등록</span></span><br><span class="line">  outer.setAttribute(<span class="string">'data-random'</span>, <span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 - task1 종료 : inner 및 outer element에 click 이벤트 리스너 등록</span></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, onClick);</span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, onClick);</span><br></pre></td></tr></table></figure><p>역시 크롬이 맞다(글 작성자가 구글 직원이다). 다른 자바스크립트가 실행되고 있지 않다고 가정하고 microtask가 task의 끝에서 처리된다기 보다는 콜백들이 모두 처리된 이후에 처리된다고 보는게 맞다. 이 규칙은 콜백을 호출하는 HTML 스펙에 잘 정의되어 있다. </p><blockquote><p>만약 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#stack-of-script-settings-objects" rel="external nofollow noopener noreferrer" target="_blank">자바스크립트 스택</a>이 비어있다면 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint" rel="external nofollow noopener noreferrer" target="_blank">microtask가 실행될지를 체크</a>하다.<br>- <a href="https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback" rel="external nofollow noopener noreferrer" target="_blank">HTML: Cleaning up after a callback</a> step 3</p></blockquote><p>microtask 대기열이 처리중이 아니라면 microtask 수행 체크는 microtask 대기열을 지나가버린다. 비슷하게 ECMAScript는 jobs에 대해 이렇게 말한다.</p><blockquote><p>job의 실행은 단지 실행 컨택스트가 동작하지 않을때만 초기화된다.<br><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript: Jobs and Job Queues</a></p></blockquote><h3 id="다른-브라우저들은-뭐가-잘못됐을까"><a href="#다른-브라우저들은-뭐가-잘못됐을까" class="headerlink" title="다른 브라우저들은 뭐가 잘못됐을까?"></a>다른 브라우저들은 뭐가 잘못됐을까?</h3><p>Firefox와 Safari에서는 mutation 콜백에서 보여줬듯이 클릭 리스너 사이에 microtask 대기열을 제대로 소진시킨다. 그러나 promise는 좀 더 다른 방식으로 큐에 삽입된다. job과 microtask의 연관성이 모호하다는 것을 감안하더라도 여전히 콜백 사이에서 실행될것이라 기대된다. Firefox 이슈를 확인해보자(<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1193394" rel="external nofollow noopener noreferrer" target="_blank">Firefox ticket</a>, <a href="https://bugs.webkit.org/show_bug.cgi?id=147933" rel="external nofollow noopener noreferrer" target="_blank">Safari ticket</a>).</p><p>이전에 살펴보았듯이 Edge에서는 promise가 제대로 동작하지 않는다(task로 인식). 그리고 또다른 문제는 microtask 대기열이 클릭 리스너 사이에서 소진되는 것이 아니라 모든 리스너가 호출된 다음에 호출된다. 이것이 두 클릭 로그 이후에 하나의 mutate가 찍힌 이유다.(<a href="https://connect.microsoft.com/IE/feedbackdetail/view/1658386/microtasks-queues-should-be-processed-following-event-listeners" rel="external nofollow noopener noreferrer" target="_blank">Bug ticket</a>)</p><h3 id="Level-1-boss’s-angry-older-brother-왜-이런-표현을-쓸까"><a href="#Level-1-boss’s-angry-older-brother-왜-이런-표현을-쓸까" class="headerlink" title="Level 1 boss’s angry older brother (왜 이런 표현을 쓸까..?)"></a>Level 1 boss’s angry older brother (왜 이런 표현을 쓸까..?)</h3><p>그렇다면 아래처럼 자바스크립트에서 직접 click 함수를 호출하는 경우에는 어떨까?<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inner.click()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p></p><p>조금 다른 결과가 나왔다. 브라우저 별로 어떻게 다른지도 살펴보자</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chrome : </span><br><span class="line">click - click - promise - mutate - promise - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Firefox : </span><br><span class="line">click - click - mutate - <span class="keyword">timeout</span> - promise - promise - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Safari : </span><br><span class="line">click - click - mutate - promise - promise - <span class="keyword">timeout</span> - <span class="keyword">timeout</span></span><br><span class="line"></span><br><span class="line">Edge</span><br><span class="line">click - click - mutate - <span class="keyword">timeout</span> - promise - <span class="keyword">timeout</span> - promise</span><br></pre></td></tr></table></figure><p>다른 브라우저는 제쳐두고서라도 크롬에서도 다른 결과가 발생했다(이와중에 Edge는 동일하다). 여러번 테스트 해보아도 동일한 결과가 나온다.</p><h3 id="왜-다른것일까"><a href="#왜-다른것일까" class="headerlink" title="왜 다른것일까?"></a>왜 다른것일까?</h3><p>그 이유는 자바스크립트 코드 마지막에서 <code>inner.click()</code>이 실행되면 script가 아직 종료되기 전이므로 자바스크립트 스택이 비어있지 않은 상태가 된다(자바 스크립트 스택이 비어 있지 않으므로 microtask를 처리할 수 없다). 그렇기 때문에 microtask가 실행되지 않고 바로 outer로 버블링되어 클릭 리스너가 실행되는 것이다.<br>(mutate가 한번만 출력되는 이유는 하나의 mutation microtask가 등록되어 있으면 다른 mutation task를 등록할 수 없기 때문)</p><p>결론은 역시(?) 크롬이 제대로된 결과를 출력한다는 것.</p><p>위에서 언급했던것 처럼 리스너 콜백이 호출된 후 자바스크립트 실행 스택이 비어있는 경우에만 microtask 체크를 수행하기 때문에 <code>inner.click()</code>으로 메서드가 호출중인 상태에서는 microtask 체크가 진행되지 않는다.</p><p>이전에 보았던 예제에서는 microtask가 리스너 콜백 사이에서 실행되었지만(사용자에 의해 클릭 동작이 처리되었으므로) <code>.click()</code>은 동기적으로 이벤트가 전달되므로 <code>.click()</code>을 호출하는 스크립트는 여전히 콜백 사이의 스택에 남아있게 된다. 이 규칙은 자바스크립트가 실행중일 때는 microtask가 끼어들지 못한다는 것을 보장한다. 이는 우리가 리스너 콜백 사이에서 microtask를 처리하지 못하고 모든 리스너가 실행된 후에 처리된다는 것을 의미한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;원본: &lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot; rel=&quot;external nofollow noopener noreferre
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="task" scheme="http://blueshw.github.io/tags/task/"/>
    
      <category term="microtask" scheme="http://blueshw.github.io/tags/microtask/"/>
    
      <category term="Promise" scheme="http://blueshw.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>[ES6, react] 리액트에서 화살표 함수(arrow function)는 선택이 아닌 필수</title>
    <link href="http://blueshw.github.io/2017/07/01/arrow-function/"/>
    <id>http://blueshw.github.io/2017/07/01/arrow-function/</id>
    <published>2017-07-01T04:00:01.000Z</published>
    <updated>2017-07-01T15:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>리액트를 개발하다보면 이런 코드를 본적 있을것입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.someFunction.bind(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>this(아마도 react 클래스 객체)에 속한 어떤 메서드를 다시 this에 bind한다라?? 굳이 왜 이런짓을 해야하는지 의문이 들만합니다.</p><p>리액트에서 이러한 코드가 빈번하게 작성되는 이유를 알기 위해서 우선 <code>bind()</code>가 무슨 역할을 하는지부터 알아보겠습니다.</p><h4 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h4><p>bind 함수는 바인드하는 함수에서 사용하는 <code>this</code>의 대상을 지정해주는 역할을 합니다. 잘 사용하지 않아서 그렇지 그다지 어려운 개념은 아닙니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    name: <span class="string">"a"</span>,</span><br><span class="line">    aFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objB = &#123;</span><br><span class="line">    name: <span class="string">"b"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objA.aFunc(); <span class="comment">// (1)</span></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line">objA.aFunc.bind(objB); <span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">const</span> foo = objA.aFunc.bind(objB); <span class="comment">// (3)</span></span><br><span class="line">foo(); (<span class="number">4</span>)</span><br><span class="line"><span class="comment">// b</span></span><br></pre></td></tr></table></figure><p><code>objA</code>와 <code>objB</code>라는 객체가 있습니다. objA 객체는 <code>name</code>이라는 값과 <code>aFunc</code>라는 함수를 속성으로 가지고 있습니다. 반면 objB 객체는 <code>name</code>이라는 값만 가지고 있죠. </p><p>(1) objA의 aFunc함수를 실행하면 예상대로 <code>a</code>가 출력됩니다. </p><p>(2) objA 객체의 aFunc 함수에서 bind(objB)를 호출합니다. 함수가 호출되었지만, 아무것도 출력되지 않죠. 다만, 원본 aFunc함수와 동일한 기능을 하는 바인딩된 새로운 함수가 만들어집니다. 이때, bind메서드에 전해진 인자는 복사된 바인딩 함수의 this로 전달됩니다. 즉, aFunc 함수내의 <code>this</code>가 <code>objB</code>가 되는 것이죠. 이게 <code>bind()함수</code>가 하는 일의 전부입니다.</p><p>(3) 바인드 함수를 변수에 할당합니다.</p><p>(4) 실행하면 <code>b</code>가 출력됩니다.</p><h3 id="React에서의-bind"><a href="#React에서의-bind" class="headerlink" title="React에서의 bind()"></a>React에서의 bind()</h3><p>처음 잠깐 살펴보았지만, 리액트에서 bind()함수는 다음과 같이 사용됩니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;<span class="type">Goodbye</span> bind&lt;/button&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> <span class="type">BindTest</span>;</span><br></pre></td></tr></table></figure><p>간단한 React 컴포넌트입니다. 버튼을 클릭하면 <code>this</code>에 해당하는 정보가 출력됩니다.</p><img src="/2017/07/01/arrow-function/bind.png"><p>버튼 태그의 onClick 속성을 보면 bind() 함수가 사용되고 있는걸 알수 있습니다. 근데 좀 이상합니다. this의 handleClick 함수에다가 this 객체를 바인드시켰습니다. 같은 this인데 굳이 또 바인드해주는 이유가 뭘까요? bind 함수를 빼보겠습니다. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithoutBindTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;<span class="type">Goodbye</span> bind without <span class="keyword">this</span>&lt;/button&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> <span class="type">WithoutBindTest</span>;</span><br></pre></td></tr></table></figure><p>어떤 결과가 나올까요?</p><img src="/2017/07/01/arrow-function/withoutbind.png"><p><code>null</code>이 출력되었습니다. 왜 null이 출력되었을까요?</p><p>이 내용을 이해하려면 자바스크립트에서의 <code>this</code>에 대해 어느정도 알고 있어야 합니다. </p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>객체지향 언어에서의 일반적인 this의 의미(현재 객체를 지칭)와는 달리 자바스크립트의 this는 실행시의 context를 말하죠. 아래 예제를 보면,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thisTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">thisTest.value = <span class="string">"I am this"</span>;</span><br><span class="line">thisTest();</span><br></pre></td></tr></table></figure><p><code>&quot;I am this&quot;</code>가 나올거라는 예상과는 달리 <code>undefined</code>가 출력됩니다. 왜냐하면 <code>thisTest()</code>가 출력될 때의 context가 전역객체이기 때문입니다. thisTest.value는 thisTest에 속성인데 전역객체에서 value를 찾으려고 하니 undefined가 나올수 밖에 없습니다(window 객체가 아니라 undefined인 이유는 React가 기본적으로 strict 모드에서 실행되기 때문입니다). </p><p>“I am this”를 출력하려면, this에 해당하는 객체의 메서드를 호출하면 this.value값을 가져올 수 있습니다. 아래 예제를 보면, </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thisTest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">thisTest.value = <span class="string">"I am this"</span>;</span><br><span class="line">thisTest.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">thisTest.func();</span><br></pre></td></tr></table></figure><p><code>thisTest.func</code> 함수를 만들어서 그안에서 <code>this.value</code>를 출력합니다. thisTest 객체의 func() 메서드를 호출하면 이 때는 <code>this</code>가 thisTest가 되기 때문에 정상적으로 this.value를 가져와 “I am this”를 출력합니다.</p><p>이제, 리액트로 다시 돌아가보죠.</p><h3 id="React에서의-this"><a href="#React에서의-this" class="headerlink" title="React에서의 this"></a>React에서의 this</h3><p>WithoutBindTest 클래스의 render() 함수를 다시 살펴보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;Goodbye bind without <span class="keyword">this</span>&lt;/button&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>컴포넌트의 render()함수가 실행되면 DOM이 그려질것입니다. 이때 this는 WithoutBindTest 객체를 가리키는것이 맞습니다. 하지만 handleClick()함수가 호출될때의 this는 WithoutBindTest가 아닌 전역객체(Window)를 의미합니다. 왜냐하면 this라는 값은 호출하는 문맥(context)에의해 좌우되는데 클릭이 실행되는 문맥이 바로 전역(window)객체이기 때문이죠.</p><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><p>click, change 등의 이벤트 리스너를 붙여줄때마다 <code>bind()</code>함수를 작성하는건 귀찮은 일입니다. ES6의 <code>화살표함수</code>를 사용하면 이 문제를 간단히 해결할 수 있습니다. BindTest를 화살표 함수를 이용해 새로 작성해보았습니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindTest</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = () =&gt; &#123;</span><br><span class="line">        console.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;<span class="type">Goodbye</span> bind&lt;/button&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">default</span> <span class="type">BindTest</span>;</span><br></pre></td></tr></table></figure><p>이제는 this가 무엇인지 걱정할 필요가 없습니다. 화살표 함수의 this는 외부함수(부모함수)의 this를 상속받기 때문에 this는 항상 일정합니다. 위 예제의 경우에는 BindTest 클래스(사실 함수입니다)가 되겠죠.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>bind()함수는 전달된 인자를 this로 보내는 바인딩 함수를 만듭니다.<br>this는 다른 언어와 달리 실행 문맥(context)에 따라 변합니다.<br>React에서 이벤트 핸들러 함수를 바인드할때 화살표 함수를 사용합니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;리액트를 개발하다보면 이런 코드를 본적 있을것입니다.&lt;/p&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="es6" scheme="http://blueshw.github.io/tags/es6/"/>
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="bind" scheme="http://blueshw.github.io/tags/bind/"/>
    
      <category term="this" scheme="http://blueshw.github.io/tags/this/"/>
    
      <category term="arrow function" scheme="http://blueshw.github.io/tags/arrow-function/"/>
    
  </entry>
  
  <entry>
    <title>[번역] 프레젠테이션 컴포넌트와 컨테이너 컴포넌트</title>
    <link href="http://blueshw.github.io/2017/06/26/presentaional-component-container-component/"/>
    <id>http://blueshw.github.io/2017/06/26/presentaional-component-container-component/</id>
    <published>2017-06-26T11:04:59.000Z</published>
    <updated>2017-07-01T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>원본 : <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0</a><br>2년이나 지난 글이지만, 컴포넌트를 어떻게 구현해야 하는 문제에 있어서는 이만한 가이드가 없다고 생각해서 번역해보았습니다.<br>자연스럽지 못한 부분, 의역이 다수 포함되어 있을 수 있습니다.</p></blockquote><p>리액트 어플레케이션을 만들때 제가 찾은 아주 유용하면서 간단한 패턴이 있습니다. 만약 여러분이 <a href="https://facebook.github.io/react/blog/2015/03/19/building-the-facebook-news-feed-with-relay.html" rel="external nofollow noopener noreferrer" target="_blank">현재 리액트를 사용한다면</a>, 이미 알고 있을지도 모릅니다. <a href="https://medium.com/@learnreact/container-components-c0e67432e005" rel="external nofollow noopener noreferrer" target="_blank">이 페이지</a>)가 잘 설명해 줄것입니다. 하지만, 저는 몇가지 더 얘기하고 싶네요.</p><p>여러분은 컴포넌트를 더 쉽게 재사용할 수 있는 방법과 왜 컴포넌트를 두개의 카테고리로 나눠야 하는지에 대한 이유를 알게 될 것입니다. 이미 들어보았던, Fat and Skinny, Smart and Dumb, Stageful and Pure, 화면과 컴포넌트 등과 같은 개념들이 이미 있지만 저는 이것을 컨테이너와 프레젠테이션 컴포넌트(*)라 부르겠습니다. 이것들이 모두 동일한 개념은 아니지만, 기본적인 아이디어는 비슷합니다.</p><h3 id="프레젠테이션-컴포넌트"><a href="#프레젠테이션-컴포넌트" class="headerlink" title="프레젠테이션 컴포넌트"></a>프레젠테이션 컴포넌트</h3><ul><li>어떻게 보여지는지와 관련있다.</li><li>프레젠테이션 컴포넌트와 컨테이너 컴포넌트가 모두 그 안에 들어가 있을것(**)이고, 일부 DOM 마크업과 스타일도 가지고 있다.</li><li>종종 this.props.children을 통해서 노출된다.</li><li>Flux 액션이나 stores 등과 같은 앱의 나머지 부분들에 의존적이지 않다.</li><li>데이터를 가져오거나 변경하는 방법에 대해서 관여할 필요가 없다.</li><li>props를 통해 배타적으로 callback 함수와 데이터를 받는다.</li><li>상태를 거의 가지고 있지 않다(만약 상태를 가지고 있다면, 데이터에 관한 것이 아닌 UI 상태에 관한 것이다).</li><li>만약 상태, 생명주기, hooks, 또는 퍼포먼스 최적화가 필요없다면, <a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components" rel="external nofollow noopener noreferrer" target="_blank">유틸함수</a>로서 쓰여질것이다.</li><li>예를들면 페이지, 사이드바, 스토리, 유저정보, 리스트 등이 있다.</li></ul><h3 id="컨테이너-컴포넌트"><a href="#컨테이너-컴포넌트" class="headerlink" title="컨테이너 컴포넌트"></a>컨테이너 컴포넌트</h3><ul><li>어떻게 동작하는지와 관련있다.</li><li>프레젠테이션 컴포넌트와 마찬가지로 프레젠테이션 컴포넌트와 컨테이너 컴포넌트 모두 가지고 있지만 감싼 divs를 제외하고는 DOM 마크업을 가지고 있지 않는다. 스타일 역시 가지고 있지 않는다.</li><li>데이터와 기능(행동)을 프레젠테이션 컴포넌트와 다른 컴포넌트에 제공한다.</li><li>Flux(or Redux) 액션을 호출하고, 프레젠테이션 컴포넌트에 콜백함수로써 제공한다.</li><li>데이터 소스 역할을 하기 때문에 상태가 자주 변경된다.</li><li>직접 만드는것 보단 대게 React Redux의 connect() 함수, Relay의 createContainer() 함수, Flux Utils의 Container.create()와 같은 <a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750" rel="external nofollow noopener noreferrer" target="_blank">Higher Order Components</a>를 이용해서 만들어진다.</li><li>예를들면 유저페이지, 팔로워 사이드바, 스토리 컨테이너, 팔로우한 유저 리스트 등이 있다.</li></ul><p>저는 이것들을 확실하게 구분하기 위하여 서로 다른 폴더에 생성합니다.</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>이 방법으로 컴포넌트를 작성하면 당신의 앱(기능)과 UI에 대한 구분을 이해하기가 더 수월하다.</li><li>재사용성이 더 뛰어나다. 완전히 서로 다른 상태값과 함께 같은 프레젠테이션 컴포넌트를 사용할 수 있고, 재사용 될 수 있는 별도의 컨테이너 컴포넌트로 변경할 수 있다.</li><li>프레젠테이션 컴포넌트는 말하자면 앱의 팔레트와 같다. 앱의 싱글페이지 위에서 앱의 로직을 건드리지 않고 디자이너에게 모든 변화를 조정하게 할 수 있다.</li><li>이것은 사이드바, 페이징, 컨텍스트메뉴와 같은 레이아웃 컴포넌트를 추출하도록 할것이고, 이것은 동일한 마크업이나 몇몇의 컨테이너 레이아웃을 반복해서 작성하는 대신 this.props.children을 통해서 구현될 수 있다.</li></ul><blockquote><p>컴포넌트는 DOM을 생성하지 말아야 합니다. 컴포넌트는 단지 UI와 관련된 것들을 조합하는 것을 제공하는 것이 필요합니다.</p></blockquote><p>이러한 이점을 당신의 앱에 적용해보세요.</p><h3 id="언제-컨테이너를-도입해야하나요"><a href="#언제-컨테이너를-도입해야하나요" class="headerlink" title="언제 컨테이너를 도입해야하나요?"></a>언제 컨테이너를 도입해야하나요?</h3><p>우선 앱을 만들때 프레젠테이션 컴포넌트를 먼저 만드세요. 그러면 너무 많은 props를 중간 컴포넌트로 보내야 한다는 것을 깨닫게 될것입니다. 전달받은 props를 사용하지 않고 아래로 전달하기만 하는 컴포넌트나 자식 컴포넌트가 더 많은 데이터를 필요로 할때 모든 중간 컴포넌트를 재구성해야하는 컴포넌트들이 있다는 것을 알게 될것입니다. 바로 이 때 컨테이너 컴포넌트를 도입해야합니다. 데이터나 아무 상관없는 중간 컴포넌트에 대해 걱정이 없는 leaf 컴포넌트의 행위가 담긴 props를 얻을 수 있는 방법이 될 것입니다.</p><p>리팩토링이 진행중이기 때문에 처음부터 도입하려고 시도해서는 안됩니다. 이 패턴을 실험해보려면, 어떤때에 함수를 추출할지를 아는것 처럼 어떤때에 컨테이너를 추출해야하는지를 직감으로 알아야 합니다. 저의 <a href="https://egghead.io/series/getting-started-with-redux" rel="external nofollow noopener noreferrer" target="_blank">free Redux Egghead series</a>가 당신에게 도움이 될것입니다.</p><h3 id="다른-분리방법들"><a href="#다른-분리방법들" class="headerlink" title="다른 분리방법들"></a>다른 분리방법들</h3><p>프레젠테이션 컴포넌트와 컨테이너 컴포넌트의 차이는 기술적인 부분이 아니라는 것을 이해하는 것은 중요합니다. 이것은 오히려 용도에 따른 차이입니다.</p><p>대조적으로, 여기 기술적으로 관련된 구분이 몇가지 있습니다.</p><ul><li>Stateful and Stateless<br>어떤 컴포넌트들은 React의 setState() 메소드를 사용한다. 컨테이너 컴포넌트는 상태가 자주 변하는 경향(stateful)이 있고 프레젠테이션 컴포넌트는 그렇지 않은 경향(stateless)이 있다. 다만 이것은 엄격한 규칙은 아니다. 프레젠테이션 컴포넌트에서 상태가 자주 바뀔수도 있고, 컨테이너 컴포넌트에서 상태변화가 없을수도 있다.</li><li>Classes and Function<br><a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components" rel="external nofollow noopener noreferrer" target="_blank">리액트 0.14부터</a> 컴포넌트를 클래스와 함수 모두로 선언이 가능하다. 함수 컴포넌트는 정의가 간단하지만 클래스 컴포넌트에 비해서 몇가지 부족한 점이 있다. 이러한 제한의 일부는 미래에는 없어질 수도 있지만 현재는 존재한다. 왜냐하면 함수 컴포넌트는 이해하기 쉽기 때문이다. 만약 state, 라이프사이클 후킹 또는 퍼포먼스 최적화가 필요하다면 반드시 클래스 컴포넌트를 사용해야한다. 왜냐하면 이들은 클래스 컴포넌트에서만 사용할 수 있기 때문이다.</li><li>Pure and Impure<br>만약 같은 props와 state가 주어졌을때 같은 결과가 돌아오는것이 보장된다면 사람들은 컴포넌트가 pure하다고 말한다. 퓨어 컴포넌트는 클래스나 함수로 모두 정의 될수 있습니다. 그리고 stateful하거나 stateless 할수도 있다. 퓨어 컴포넌트의 또다른 중요한 점은 props와 state의 변화에 깊게 관여하지 않다. 그래서 퓨어 컴포넌트의 렌더링 퍼포먼스는 shouldComponentUpdate() 함수의 얕은 비교에 의해 최적화 될 수 있다. 현재는 클래스에서만 shouldComponentUpdate() 함수를 사용할 수 있지만 아마도 나중에는 함수에서는 사용할 수 있을것이다.</li></ul><p>프레젠테이션 컴포넌트와 컨테이너 컴포넌트 둘다 어느쪽 컴포넌트에나 들어갈 수 있습니다. 제 경험에 의하면 프레젠테이션 컴포넌트는 stateless한 pure 함수가 되는 경향이 있고, 컨테이너 컴포넌트는 stateful한 pure 클래스가 되려는 경향이 있습니다. 하지만 규칙은 아니고 주목할만한 것입니다. 왜냐하면 저는 구체적인 상황들에서 정확히 반대의 경우로 만들어지는 것을 보았기 때문입니다.</p><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><p><a href="https://gist.github.com/chantastic/fc9e3853464dffdb1e3c" rel="external nofollow noopener noreferrer" target="_blank">This Gist</a> by <a href="https://twitter.com/chantastic" rel="external nofollow noopener noreferrer" target="_blank">Michael Chan</a></p><h3 id="읽을거리"><a href="#읽을거리" class="headerlink" title="읽을거리"></a>읽을거리</h3><ul><li><a href="https://egghead.io/series/getting-started-with-redux" rel="external nofollow noopener noreferrer" target="_blank">Getting Started with Redux</a></li><li><a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750" rel="external nofollow noopener noreferrer" target="_blank">Mixins are Dead, Long Live Composition</a></li><li><a href="https://medium.com/@learnreact/container-components-c0e67432e005" rel="external nofollow noopener noreferrer" target="_blank">Container Components</a></li><li><a href="http://bradfrost.com/blog/post/atomic-web-design/" rel="external nofollow noopener noreferrer" target="_blank">Atomic Web Design</a></li><li><a href="https://facebook.github.io/react/blog/2015/03/19/building-the-facebook-news-feed-with-relay.html" rel="external nofollow noopener noreferrer" target="_blank">Building the Facebook News Feed with Relay</a></li></ul><h3 id="각주"><a href="#각주" class="headerlink" title="각주"></a>각주</h3><blockquote><p>* 이전 버전의 아티클에서 저는 smart and dumb 컴포넌트라고 불렀습니다. 그러나 이것은 프레젠테이션 컴포넌트에게 너무나 심한 표현이었습니다.<br>그리고 가장 중요한점은 목적의 차이에 대해서 정확하게 설명할 수 없다는 것이었습니다. 저는 새로운 표현이 더 낫다고 생각했고 당신도 그랬으면 좋겠네요!</p><p>** 이전 버전의 아티클에서 저는 프레젠테이션 컴포넌트가 프레젠테이션 컴포넌트만 포함해야 한다고 주장했었습니다.<br>저는 더이상 다른 케이스를 생각해보지 않았습니다. 어떤 컴포넌트가 프레젠테이션 컴포넌트인지 컨테이너 컴포넌트인지는 그것의 구체적인 구현방법에 따라 달라지는 것입니다. 프레젠테이션 컴포넌트는 사이트 요청에 의한 변화가 없다면 컨테이너 컴포넌트로 변경이 가능해야 합니다. 그러므로 프레젠테이션 컴포넌트와 컨테이너 컴포넌트는 둘다 서로를 포함할 수 있습니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;원본 : &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot; rel=&quot;external nofollow noopener norefer
      
    
    </summary>
    
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="component" scheme="http://blueshw.github.io/tags/component/"/>
    
      <category term="container" scheme="http://blueshw.github.io/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>[react] react-router(리액트 라우터) v3 VS v4</title>
    <link href="http://blueshw.github.io/2017/06/22/static-routing-vs-dynamic-routing/"/>
    <id>http://blueshw.github.io/2017/06/22/static-routing-vs-dynamic-routing/</id>
    <published>2017-06-22T13:55:43.000Z</published>
    <updated>2017-07-01T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>react-router v4가 릴리즈 되면서 라우팅 적용 방식이 바뀌었습니다.<br>이전버전(v3)까지는 일반적으로 사용하는 정적 라우팅(Static Routing)이였다면, 동적 라우팅(Dynamic Routing)이 적용되었는데요.<br>여기서 말하는 정적 라우팅이란 일반적으로 최상위 페이지에 라우팅 정보를 모두 기입해 두고, 특정 패스가 브라우저에 입력되었을 때 해당되는 컴포넌트를 그려주는 방식을 말합니다. 모든 라우팅 정보가 한곳에 위치하기 때문에 관리하기 쉽다는 장점이 있겠지만, 정적이라는 특징 때문에 확장성과 재사용성은 떨어질 수 있습니다. 반면에 동적 라우팅의 경우에는 라우팅 정보를 한곳에 모아둘 필요가 없습니다. 라우팅이 필요한 컴포넌트에 직접 붙여 사용할 수 있기 때문에 동적으로 컴포넌트를 구성하는데 더 효율적이라 할 수 있습니다.</p><p>이외에도 몇가지 바뀐점이 꽤 있다보니 이전버전과 어떤 점이 달라졌나 비교해볼까 합니다.</p><p><a href="https://reacttraining.com/react-router/" rel="external nofollow noopener noreferrer" target="_blank">공식 홈페이지 바로가기</a></p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>설치하는 모듈을 선택할 수 있는데요. 이전 버전까지는 <code>react-router</code> 하나만 사용 할 수 있었는데,<br>이번에 버전업 되면서 몇가지 늘었습니다. react-router는 코어 모듈이구요.<br>이밖에도 <code>react-router-dom</code>, <code>react-router-native</code> 등이 추가되었습니다.<br>react-router-dom은 react-router 모듈에 dom이 바인딩 되어 있다고 보시면 됩니다. 즉, 웹 개발자들을 위한 모듈이죠.<br>그리고 react-router-native는 이름에서도 알 수 있듯이 react-native를 개발할 때 사용하는 모듈입니다.<br>저는 웹개발자이기 때문에 당연히 react-router-dom을 사용하도록 하겠습니다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># v3</span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> react-router</span></span><br><span class="line"><span class="bash">npm install react-router</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># v4</span></span></span><br><span class="line"><span class="bash">yarn add react-router-dom</span></span><br><span class="line"><span class="bash">npm install react-router-dom</span></span><br></pre></td></tr></table></figure><h2 id="v3-VS-v4"><a href="#v3-VS-v4" class="headerlink" title="v3 VS v4"></a>v3 VS v4</h2><p>v3와 v4의 차이점을 간략히 비교해 보았습니다.</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">v3</th><th style="text-align:left">v4</th></tr></thead><tbody><tr><td style="text-align:center">라우팅</td><td style="text-align:left">정적(static) 라우팅</td><td style="text-align:left">동적(dynamic) 라우팅</td></tr><tr><td style="text-align:center">Route 컴포넌트</td><td style="text-align:left">라우트 정보를 프로젝트 최상단에 모두 정의</td><td style="text-align:left">코드 어디에나 사용 가능</td></tr><tr><td style="text-align:center">계층구조</td><td style="text-align:left">라우트 정보를 계층구조로 표현</td><td style="text-align:left">계층구조 대신 렌더링 되는 컴포넌트에 직접 구현 (계층구조 표현 안됨)</td></tr><tr><td style="text-align:center">히스토리</td><td style="text-align:left">browserHistory에 저장하여 Router 객체에 props로 삽입</td><td style="text-align:left">BrowserRouter 객체에 내장</td></tr></tbody></table><h2 id="v3의-라우팅-코드"><a href="#v3의-라우팅-코드" class="headerlink" title="v3의 라우팅 코드"></a>v3의 라우팅 코드</h2><p>프로젝트 구조를 자세히 설명하지는 않겠습니다.<br>간단히 구조만 살펴볼 것이기 때문에 최소한의 파일만으로 구성하였습니다.</p><p>react-router v3는 정적 라우팅을 사용하기 때문에 미리 라우팅 정보를 탑 레벨에서 모두 정해두고 시작합니다.<br>react-router는 계층구조로 설정할 수가 있는데, 최상위에 <code>Router</code> 컴포넌트를 만들고 <code>Route</code>(실제 패스에 따라 컴포넌트를 교체해주는 역할) 컴포넌트를 아래에 만듭니다. 그리고 또 그 아래에 <code>IndexRoute</code>가 있고 여러개의 <code>Route</code> 컴포넌트가 존재합니다.<br>어떤 url이 브라우저에 입력되면(또는 앵커 태그가 클릭되면), 각 라우터에 해당하는 컴포넌트가 렌더링 되는 구조입니다.</p><p>예를 들어 <code>http://localhost:3000/second</code> url이 브라우저에 입력되면 path가 <code>/</code>인 라우트를 먼저 찾고 렌더링 합니다. 그리고 뒤에 해당되는 <code>second</code>를 찾아서 해당되는 컴포넌트를 렌더링 합니다. </p><p>App.js 파일의 App 클래스를 보면, Header 컴포넌트 아래에 <code>{this.props.childern}</code>이 있는데, 이 부분이 바로 path가 <code>/</code>인 라우트 아래의 IndexRoute, first, second, third인 부분이 렌더링 되는곳 입니다.</p><p>마지막으로 라우터의 히스토리는 browserHistory에 저장해 둡니다. 그래야 브라우저에서 <code>뒤로가기</code>를 했을때 이전 페이지를 불러올 수 있기 때문이죠.</p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><p>앱이 처음 시작하는 부분인 index.js입니다.<br>index에서 직접 라우팅을 구현하였습니다.<br>third 뒤의 <code>:id</code> 부분은 컴포넌트의 <code>this.props.params.id</code> 형태로 전달되어 컴포넌트 내에서 사용할 수 있습니다.</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">import React from 'react';</span></span><br><span class="line"><span class="xml">import ReactDOM from 'react-dom';</span></span><br><span class="line"><span class="xml">import </span><span class="template-variable">&#123; Router, Route, IndexRoute, browserHistory &#125;</span><span class="xml"> from 'react-router';</span></span><br><span class="line"><span class="xml">import App, </span><span class="template-variable">&#123; Home, First, Second, Third, Item &#125;</span><span class="xml"> from './App.js';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=</span></span><span class="template-variable">&#123;browserHistory&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;App&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Home&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"first"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;First&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"second"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Second&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"third/"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Third&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">":id"</span> <span class="attr">component</span>=</span></span><span class="template-variable">&#123;Item&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">  document.getElementById('root'),</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><h4 id="Header-js"><a href="#Header-js" class="headerlink" title="Header.js"></a>Header.js</h4><p>헤더의 메뉴 부분입니다.<br>버튼에 클릭했을때 라우터의 정보에 따라 컴포넌트를 바꿔줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/'&#125;&gt;</span>홈<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">first</span>'&#125;&gt;</span>첫번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">second</span>'&#125;&gt;</span>두번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">third</span>'&#125;&gt;</span>세번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h4><p>헤더를 제외한 모든 컴포넌트가 들어있는 App.js 파일입니다.</p><p>App 컴포넌트는 최상위 패스인 <code>/</code>에서 렌더링 되는 부분인데요. <code>Header</code>와 같이 공통으로 사용하는 컴포넌트를 여기에 붙여줍니다.<br>그러면, 어떤 url로 이동하더라도 Header는 계속 노출되겠지요.</p><p>Third 부분이 v4와 다른부분인데요. 컴포넌트 내에서 직접 라우팅 정보를 지정할 수 없기 때문에,<br>우회하는 방법으로 <code>this.props.children</code> 컴포넌트가 있는지 여부에 따라서 어떻게 렌더링할지를 결정합니다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">Header</span> from './<span class="type">Header</span>.js';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">Link</span> &#125; from <span class="symbol">'react</span>-router';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;<span class="type">Header</span> /&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;홈 페이지&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;<span class="number">1</span>, 첫번째 페이지&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Second</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;<span class="number">2</span>, 두번째 페이지&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Third</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.dir(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;'/third/<span class="number">1</span>'&#125; style=&#123;&#123; marginRight: <span class="symbol">'5p</span>x' &#125;&#125;&gt;</span><br><span class="line">          <span class="number">1</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;'/third/<span class="number">2</span>'&#125;&gt;</span><br><span class="line">          <span class="number">2</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children</span><br><span class="line">          ? <span class="keyword">this</span>.props.children</span><br><span class="line">          : &lt;div&gt;</span><br><span class="line">              &lt;h3&gt;id를 선택해 주세요.&lt;/h3&gt;</span><br><span class="line">            &lt;/div&gt;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.params.id&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">App</span>;</span><br></pre></td></tr></table></figure><p>결과 화면입니다.</p><img src="/2017/06/22/static-routing-vs-dynamic-routing/result.png"><h2 id="v4의-라우팅-코드"><a href="#v4의-라우팅-코드" class="headerlink" title="v4의 라우팅 코드"></a>v4의 라우팅 코드</h2><p>비교를 위해서 v3와 동일한 화면으로 만들어 보겠습니다.</p><h4 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h4><p>Router(BrowserRouter) 컴포넌트에 히스토리가 내장되어 있는걸로 보입니다.<br>v3에서는 history 객체를 별도로 가져와 Router의 프로퍼티로 넣어줘야 했습니다만, v4에서는 어떤 설정도 해줄 필요가 없습니다.<br>또한, 라우터 컴포넌트 아래로 DOM 코드를 직접 넣어줄 수 있게 되었습니다.<br>이게 의미하는게 뭐냐면, 어떤 코드에서든 <code>Route</code> 컴포넌트를 넣을 수 있다는 뜻입니다.<br>즉, 라우트는 필요할때마다 동적으로 생성 가능하다는 것이죠.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Home, First, Second, Third &#125; <span class="keyword">from</span> <span class="string">'./App.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./Header.js'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/first"</span> component=&#123;First&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/first"</span> component=&#123;First&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/second"</span> component=&#123;Second&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/third"</span> component=&#123;Third&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/Router&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Header-js-1"><a href="#Header-js-1" class="headerlink" title="Header.js"></a>Header.js</h4><p>v3와 거의 같습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/'&#125;&gt;</span>홈<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">first</span>'&#125;&gt;</span>첫번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">second</span>'&#125;&gt;</span>두번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>'/<span class="attr">third</span>'&#125;&gt;</span>세번째<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><h4 id="App-js-1"><a href="#App-js-1" class="headerlink" title="App.js"></a>App.js</h4><p>App 컴포넌트를 아예 만들지 않습니다. v3에서 App 컴포넌트의 역할은 공통으로 사용하는 컴포넌트를 붙여주기 위함이었는데요.<br>v4에서는 라우트 컴포넌트 내에 직접 다른 컴포넌트를 붙여주면 되기 때문에 App 컴포넌트는 더이상 필요하지 않습니다. </p><p>그리고 <code>Third</code> 컴포넌트는 위에서 동적라우팅 설명할때 잠깐 언급했던 것처럼<br>컴포넌트 내에서 라우트 정보를 직접 넣어줄 수 있기 때문에 훨씬 명확한 코드를 작성할 수 있는것 같습니다. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">Header</span> from './<span class="type">Header</span>.js';</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="type">Route</span>, <span class="type">Link</span> &#125; from <span class="symbol">'react</span>-router-dom';</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;홈 페이지&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;<span class="number">1</span>, 첫번째 페이지&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Second</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;<span class="number">2</span>, 두번째 페이지&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Third</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;`$&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;/<span class="number">1</span>`&#125; style=&#123;&#123; marginRight: <span class="symbol">'5p</span>x' &#125;&#125;&gt;</span><br><span class="line">          <span class="number">1</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &lt;<span class="type">Link</span> to=&#123;`$&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;/<span class="number">2</span>`&#125;&gt;</span><br><span class="line">          <span class="number">2</span>번</span><br><span class="line">        &lt;/<span class="type">Link</span>&gt;</span><br><span class="line">        &lt;<span class="type">Route</span></span><br><span class="line">          exact</span><br><span class="line">          path=&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;</span><br><span class="line">          render=&#123;() =&gt; &lt;div&gt;&lt;h3&gt;id를 선택해 주세요.&lt;/h3&gt;&lt;/div&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;<span class="type">Route</span> path=&#123;`$&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.url&#125;/:id`&#125; component=&#123;<span class="type">Item</span>&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.<span class="keyword">match</span>.params.id&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과 화면입니다. 똑같습니다.</p><img src="/2017/06/22/static-routing-vs-dynamic-routing/result.png"><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>아직 깊이 살펴보지 못해서 어떤 장점이 더 있는지는 모르겠습니다만,<br>어떻게 보면 v4가 v3에 비해서 산만해 보일수도 있습니다.<br>한곳에서 모든 라우팅 정보를 볼 수 있는게 좋다고 생각할 수도 있으니까요.<br>하지만, 리액트의 철학과 어울리는 라우팅 방식은 v4의 동적 라우팅이 아닐까 생각이 듭니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react-router v4가 릴리즈 되면서 라우팅 적용 방식이 바뀌었습니다.&lt;br&gt;이전버전(v3)까지는 일반적으로 사용하는 정적 라우팅(Static Routing)이였다면, 동적 라우팅(Dynamic Routing)이 적용되었는데요.&lt;br&gt;여기
      
    
    </summary>
    
    
      <category term="react" scheme="http://blueshw.github.io/tags/react/"/>
    
      <category term="routing" scheme="http://blueshw.github.io/tags/routing/"/>
    
      <category term="react-router" scheme="http://blueshw.github.io/tags/react-router/"/>
    
      <category term="react-router v4" scheme="http://blueshw.github.io/tags/react-router-v4/"/>
    
  </entry>
  
  <entry>
    <title>[ReactJs] create-react-app으로 react 시작하기</title>
    <link href="http://blueshw.github.io/2017/06/20/create-react-app/"/>
    <id>http://blueshw.github.io/2017/06/20/create-react-app/</id>
    <published>2017-06-20T09:40:02.000Z</published>
    <updated>2017-07-01T03:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>리액트를 본격적으로 사용하기 시작하면서 각종 라이브러리의 테스트 및 실험을 해볼 필요가 생겼습니다. 몇 가지 boilerplate 프로젝트를 찾아보다가 동료로부터 <a href="https://github.com/facebookincubator/create-react-app" rel="external nofollow noopener noreferrer" target="_blank">create-react-app</a>이라는 프로젝트에 대해 듣게 되었습니다(이제서야 알게되다니..).</p><p>대부분의 비공식적인 boilerplate 프로젝트들은 package.json과 같은 모듈 관리 파일에 필요한 모듈을 모두 정의해두고 설치해서 사용합니다. 그러다보니 특정 시점에 boilerplate 프로젝트를 다운받아 사용하다보면 어느새 오래된 프로젝트가 되어버리는 경우가 허다하죠. 워낙에 빠르게 변하는 js 환경이다 보니 일일이 변경되거나 업데이트된 부분을 바꿔주는것도 한계가 있습니다. create-react-app을 이용하면 이 문제는 한번에 해결됩니다. (물론 추가로 설치한 모듈들에 대한 관리는 해줘야 합니다)</p><p>설치는 아주 간단합니다.</p><p>우선 프로젝트를 받아서(git clone을 하던 zip으로 받던 상관없어요) create-react-app 모듈을 글로벌로 설치해줍니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g <span class="keyword">create</span>-react-app</span><br></pre></td></tr></table></figure><blockquote><p>node 버전은 v8.1.2를 사용하였습니다 (npm은 v5.0.3)</p></blockquote><p>그리고는 앱을 생성합니다.</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">create-react-app</span> <span class="string">react-test</span></span><br><span class="line"><span class="string">cd </span><span class="string">react-test</span></span><br></pre></td></tr></table></figure><p>만들어진 react-test 앱에 들어가보면 아래와 같은 구조로 프로젝트가 만들어져 있습니다.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">react-test/</span><br><span class="line">  README.md</span><br><span class="line">  node_modules/     <span class="meta"># 이미 modules가 설치되어 있습니다.</span></span><br><span class="line">  package.json      <span class="meta"># 의존성 패키지는 대부분 node_modules/react-scripts 모듈내에 선언되어 있습니다.</span></span><br><span class="line">  .gitignore</span><br><span class="line">  <span class="keyword">public</span>/</span><br><span class="line">    favicon.ico</span><br><span class="line">    <span class="keyword">index</span>.html</span><br><span class="line">    manifest.json</span><br><span class="line">  src/</span><br><span class="line">    App.css</span><br><span class="line">    App.js</span><br><span class="line">    App.test.js</span><br><span class="line">    <span class="keyword">index</span>.css</span><br><span class="line">    <span class="keyword">index</span>.js        <span class="meta"># 앱이 시작되는 부분입니다.</span></span><br><span class="line">    logo.svg</span><br><span class="line">    registerServiceWorker.js    <span class="meta"># prodution 레벨에서 로컬캐시로부터 리소스를 제공하기 위한 서비스 워커 관련 설정,</span></span><br></pre></td></tr></table></figure><p>앱을 실행해봅니다.</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> start</span><br></pre></td></tr></table></figure><p>제대로 동작하는걸 확인합니다. 끝입니다.</p><p>만들어진 앱에 기본적으로 포함하고 있는 모듈은 아래와 같습니다.<br>이외에 필요한 모듈은 직접 설치하셔서 사용하면 되겠습니다.</p><ul><li>Webpack : minify, uglify 등을 포함한 모듈 번들링 도구</li><li>Babel : ES6, React 등의 문법을 ES5 코드로 변환시켜주는 트랜스파일러</li><li>Autoprefixer : 다양한 벤더(브라우저)들에게 적절한 CSS가 적용될 수 있도록 prefix를 붙여준다.</li><li>ESLint : 자바스크립트 lint, 코드 컨벤션과 오류 등을 잡아준다.</li><li>Jest : 자바스크립트 테스트 도구</li><li>이외에 여러개</li></ul><p>아무런 설정없이 react부터 하나하나씩 설처해보는 것도 큰 도움이 되겠지만, 초기에 webpack 같은 번들링 도구에 대한 이해와 삽질하는데 상당한 시간이 소요됩니다(정말 그렇습니다). 정말 react에만 집중하고 싶다면 이런 프로젝트를 이용해서 개발하는게 react 입문자들에게는 훨씬 도움되는 일이라 생각합니다. </p><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><blockquote><p><a href="https://github.com/facebookincubator/create-react-app" rel="external nofollow noopener noreferrer" target="_blank">create-react-app github</a><br><a href="https://github.com/facebookincubator/create-react-app/tree/master/packages/react-scripts/template" rel="external nofollow noopener noreferrer" target="_blank">craete-react-app 가이드 문서</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;리액트를 본격적으로 사용하기 시작하면서 각종 라이브러리의 테스트 및 실험을 해볼 필요가 생겼습니다. 몇 가지 boilerplate 프로젝트를 찾아보다가 동료로부터 &lt;a href=&quot;https://github.com/facebookincubator/
      
    
    </summary>
    
    
      <category term="React" scheme="http://blueshw.github.io/tags/React/"/>
    
      <category term="js" scheme="http://blueshw.github.io/tags/js/"/>
    
      <category term="create-react-app" scheme="http://blueshw.github.io/tags/create-react-app/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] require vs import (CommonJs와 ES6)</title>
    <link href="http://blueshw.github.io/2017/05/16/ES-require-vs-import/"/>
    <id>http://blueshw.github.io/2017/05/16/ES-require-vs-import/</id>
    <published>2017-05-16T14:59:31.000Z</published>
    <updated>2017-05-16T15:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CommonJs-AMD-ES6-Module"><a href="#CommonJs-AMD-ES6-Module" class="headerlink" title="CommonJs, AMD, ES6 Module"></a>CommonJs, AMD, ES6 Module</h2><p>require와 import에 대해서 비교해 보기 위해서는 우선 <a href="http://www.commonjs.org/" rel="external nofollow noopener noreferrer" target="_blank">CommonJs</a>와 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" rel="external nofollow noopener noreferrer" target="_blank">AMD(Asynchronous Module Definition)</a>, ES6 내장모듈과 같은 자바스크립트의 모듈 시스템에 대해 알고 있어야 합니다. 모듈에 대한 본격적인 포스팅이 아니기 때문에 깊게 다루진 않겠습니다(사실 자세히 모르게도 합니다ㅠ).</p><p>기존의 자바스크립트(ES5, 현재 대부분의 브라우저에서 지원하는 자바스크립트 문법)는 모듈이라는 개념이 부족하여 각 모듈(또는 파일)간의 의존성 처리에 제한이 있었습니다. 고전적인 웹 프로젝트에서 자바스크립트를 사용하는 방법을 살펴보면, HTML 파일내부에 <code>&lt;script&gt;</code> 태그를 삽입하여 모듈을 로드하고 있습니다. 하지만 이런 방식은 한가지 문제가 있는데, 자바스크립트 파일(또는 모듈)끼리 서로 모듈을 공유하는데 제약이 없다는점입니다. 그 이유는 script 태그로 로드된 모듈은 모두 window 객체의 속성이기 때문에 서로 다른 파일에 위치하면서도 모든 객체를 공유할 수 있기 때문입니다. 이처럼 각 자바스크립트 파일이 독립적으로 존재하지 못해 발생하는 여러 문제들(예를들어 다른 파일에서 같은 이름의 변수를 사용하는 경우) 때문에 하나의 모듈로 관리하기위한 다양한 패턴(모듈패턴, 즉시실행함수 등)을 사용하여 의존성을 관리할 수 밖에 없었습니다.</p><p>이를 해결하기 위한 수단으로 모듈이라는 개념을 도입하여 정의한 방법(또는 표준)이 CommonJs와 AMD입니다. 이 둘은 내부적으로 모듈 서로 간의 의존성(로드)이 지원되지 않는 상태로 만들어졌는데, ES6에 이르러 언어 내부적으로 자바스크립트 모듈 의존성을 지원하게 되었습니다(import, export).</p><h3 id="모듈정의-방식의-혼용"><a href="#모듈정의-방식의-혼용" class="headerlink" title="모듈정의 방식의 혼용"></a>모듈정의 방식의 혼용</h3><p>ES6 모듈은 기본적으로 CommonJs와 AMD 모듈을 혼용해서 사용할 수 있습니다. 모듈을 가져오는 부분에 require와 import를 같이 쓰더라도 문제없이 동작하죠. import는 ES6 문법이라 현재 사용되는 브라우저에서는 지원하지 않지만 babel과 같은 트랜스파일러가 해결해줄수 있습니다. AMD는 생략하고 ES6와 CommonJs를 비교하여 설명해보겠습니다.</p><p>모듈을 정의한다는 것은 다른 모듈에서 사용할 수 있도록 하나의 모듈로써 노출하겠다는 의미다.</p><h4 id="모듈-정의하기-export"><a href="#모듈-정의하기-export" class="headerlink" title="모듈 정의하기 (export)"></a>모듈 정의하기 (export)</h4><p><strong>ES6</strong></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모듈 전체를 export, 파일내 한번만 사용가능하다.</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="built_in">module</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 속성을 export</span></span><br><span class="line"><span class="keyword">export</span> *;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수를 직접 export</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">moduleFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">property</span><span class="string"> </span>= <span class="string">"some property"</span>;</span><br><span class="line"><span class="title">export</span> &#123;<span class="keyword">property</span><span class="string">&#125;</span>;</span><br></pre></td></tr></table></figure><p><strong>CommonJs</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모듈 전체를 export</span></span><br><span class="line">module.<span class="keyword">exports</span> = module;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 속성을 export</span></span><br><span class="line"><span class="comment">// (아시는 분 알려주세요) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수를 직접 export</span></span><br><span class="line"><span class="keyword">exports</span>.moduleFunc = <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span>;</span></span><br></pre></td></tr></table></figure><h4 id="모듈-가져오기-import"><a href="#모듈-가져오기-import" class="headerlink" title="모듈 가져오기 (import)"></a>모듈 가져오기 (import)</h4><p><strong>ES6</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 모듈 전체를 <span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> module</span><br><span class="line"><span class="keyword">import</span> module <span class="keyword">as</span> myModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 모든 속성 <span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> * from module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 특정 멤버(함수 등)만 <span class="keyword">import</span></span><br><span class="line"><span class="keyword">import</span> &#123;moduleFunc, moduleFunc2&#125; from module</span><br></pre></td></tr></table></figure><p><strong>CommonJs</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 모듈 전체를 <span class="keyword">import</span></span><br><span class="line">var <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./someModule.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 모든 속성 <span class="keyword">import</span></span><br><span class="line"><span class="regexp">//</span> (위의 <span class="built_in">module</span> 객체에 모든 속성이 담아져 온다.)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 특정 멤버(함수 등)만 <span class="keyword">import</span>, 위의 <span class="built_in">module</span>을 이용한다.</span><br><span class="line"><span class="built_in">module</span>.moduleFunc</span><br></pre></td></tr></table></figure><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>바벨과 같은 트랜스파일링 모듈을 사용한다면 주저없이 ES6를 사용합니다.<br>혼용하는것도 가능하지만 가급적이면 통일되게 사용하는 것이 좋다고 생각합니다.<br>실제로 제가 프로젝트 진행하면서 mocha 테스트 중 ES6의 import/export와 CommonJs의 <code>module.exports</code> 를 혼용하여 사용시 문제가 발생했었습니다(자세히 언급하지 않음). </p></blockquote><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><a href="http://d2.naver.com/helloworld/12864" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 표준을 위한 움직임: CommonJS와 AMD</a></li><li><a href="https://www.exratione.com/2015/12/es6-use-of-import-property-from-module-is-not-a-great-plan/" rel="external nofollow noopener noreferrer" target="_blank">ES6: Use of “import { property } from ‘module’” is Not a Great Plan</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CommonJs-AMD-ES6-Module&quot;&gt;&lt;a href=&quot;#CommonJs-AMD-ES6-Module&quot; class=&quot;headerlink&quot; title=&quot;CommonJs, AMD, ES6 Module&quot;&gt;&lt;/a&gt;CommonJs, AMD, 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://blueshw.github.io/tags/ES6/"/>
    
      <category term="require" scheme="http://blueshw.github.io/tags/require/"/>
    
      <category term="import" scheme="http://blueshw.github.io/tags/import/"/>
    
  </entry>
  
  <entry>
    <title>[javascript] 클로저(closure)에 대해서 알아보자</title>
    <link href="http://blueshw.github.io/2017/04/12/javascript-closure/"/>
    <id>http://blueshw.github.io/2017/04/12/javascript-closure/</id>
    <published>2017-04-11T15:20:04.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 대충 클로저가 무언인지는 말할 수 있지만, 정확한 의미와 용도에 대해서는 쉽고 명확히 대답하기는 힘들것입니다. 제가 클로저 개념이 헷갈렸던 이유는 의외로 황당한 이유 때문이었습니다.</p><blockquote><p><del>closer (가까운, 닫힌)</del> ==&gt; <strong>closure (폐쇄)</strong></p></blockquote><p>멍청하게도 처음에는 클로저를 “closer”라고 생각했습니다. 정확한 개념은 당연히 몰랐고 단어의 의미로 단순하게 유추해서 “어떤 것을 닫는다” 정도로 느끼고 있었죠. 당시의 “닫는다”는 의미를 지금에 와서 생각해보면 “변수의 범주(스코프)를 닫는다” 정도로 이해하고 있었던거 같습니다. 하나도 모르고 있었다고해도 과언이 아니었죠.</p><p>구글에서 검색하면 알 수 있는 클로저의 의미는 아래와 같이 조금 모호합니다.</p><blockquote><p>외부함수의 맥락(context)에 접근 가능한 내부함수<br>좀 더 포괄적으로는 함수 선언시 생성되는 유효 범위</p></blockquote><p>이런 정의만 보고 과연 사람들이 이해를 할 수 있는건지는 잘 모르겠지만, 클로저에 대한 이해가 거의 없는 분들은 아마도 이해하기 어렵울 것입니다. 그러면, 일단 코드를 보도록 하죠.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFunc</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> outVar = <span class="string">"my name is "</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> outVar + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> innerFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = outFunc(<span class="string">"bono"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result: "</span> + result());</span><br><span class="line"></span><br><span class="line"><span class="comment">// result: my name is bono</span></span><br></pre></td></tr></table></figure><p>내부함수 <code>innerFunc()</code>에서 <code>outFunc()</code> 함수의 인자와 지역변수에 접근이 가능합니다. <code>outFunc()</code>의 return 값(var result에 할당)은 <code>innerFunc()</code>라는 내부 함수입니다. outFunce() 함수가 실행되면, outFunc()의 스코프는 끝이 나기 때문에 outFunc() 인자인 name과 지역변수인 outVar는 메모리에서 정리되어야합니다. 하지만, 실제 console.log에서 result를 호출하면(내부 함수가 호출), 내부함수 innerFunc()가 선언될때 outFunc() 함수의 인자와 outVar() 지역변수를 innerFunc()의 클로저 객체로 남아 실제로 innerFunc()가 호출될 때 클로저 객체를 통해서 outFunc()의 인자와 변수에 접근이 가능한 것입니다. 이게 바로 클로저가 하는 일입니다. </p><p>다른 예제를 살펴보겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> out = <span class="string">"out value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="string">"in value"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inFunc</span>(<span class="params">inParam</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"out: "</span> + out);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"inner: "</span> + inner);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"inParam: "</span> + inParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> inFunc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> param = <span class="string">"this is param"</span>;</span><br><span class="line"><span class="keyword">var</span> outResult = outFunc();</span><br><span class="line">outResult(param);</span><br><span class="line"></span><br><span class="line"><span class="comment">// out: out value</span></span><br><span class="line"><span class="comment">// inner: in value</span></span><br><span class="line"><span class="comment">// inParam: this is param</span></span><br></pre></td></tr></table></figure><p>이 예제에는 크게 세가지 스코프가 존재합니다. 첫번째는 <code>전역스코프</code>, 그다음은 <code>outFunc()</code> 함수 내 스코프, 마지막으로 <code>inFunc()</code> 내 스코프입니다. 가장 위에 out 이라는 변수가 선언되어 있고, outFunc() 함수 및 param과 outFunc() 의 return 값인 outResult까지 총 4개의 변수(or 함수)가 선언되어 있고 마지막에 outResult 함수를 호출하고 있습니다. </p><p>outResult는 outFunc() 함수의 결과값이므로, inFunc() 함수 자체를 참조하고 있습니다. 그 말은 마지막에 호출한 outResult 함수에 인자를 전달하면 실제 내부 함수인 inFunc()의 파라미터에 해당 값이 들어온다는 의미겠죠. </p><p>클로저의 관점에서 생각해보겠습니다. outFunc() 함수가 선언되었지만, 실제로 호출되기전까진 언제 사용될지 모릅니다. 그래서 해당 함수(outFunc())의 클로저로써 유효범위(전역범위)의 변수들이 클로저 객체로 메모리상에 남아 있게 됩니다. 즉, outFunc() 함수가 실행될 때 해당 함수 내부에서 outFunc() 바깥의 전역영역의 변수에 접근할 수 있는거죠. 그리고 outFunc() 내부에 inFunc()가 선언되는 순간 outFunc() 내의 변수(여기서는 inner 변수)가 inFunc() 함수의 클로저 객체 안에 존재하게 되는것이죠. 그러고나면 각각의 outFunc(), inFunc() 함수가 실제로 호출되어 실행되는 순간에 미리 <code>메모리에 저장되어 있던 클로저</code>에서 각각의 변수를 가져올수 있게 되는겁니다.</p><p>클로저의 정의에 대해서 알아보았으니 클로저로 활용할 수 있는게 뭐가 있는지는 다음에 알아보도록 하겠습니다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><p>클로저는 단순히 함수 외부의 변수에 접근 가능한 내부함수가 아니라 함수가 선언되는 순간에 함수가 실행될때 실제 외부변수에 접근하기 위한 객체이다.<br>클로저도 남발하면 위험하다. 가비지컬렉션 대상이 되어야할 객체들이 메모리상에 남아 있게 되므로, 클로저를 남발하면 오버플로우가 발생할수도 있다. 이는 클로저에 대해 정확히 알아야 하는 이유이기도 하다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바스크립트 문법 중에 가장 어려운 부분을 꼽으라면 단연 클로저(closure)일것입니다. 저 또한 클로저 개념은 어느정도는 이해하고 있었지만, 정확한 용도와 개념을 설명하라고 하면 명쾌하게 말하기 쉽지 않습니다. 아마도 많은 사람들이 저 처럼 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="closure" scheme="http://blueshw.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>[ES6] var VS const VS let</title>
    <link href="http://blueshw.github.io/2017/03/28/ES-var-VS-const-VS-let/"/>
    <id>http://blueshw.github.io/2017/03/28/ES-var-VS-const-VS-let/</id>
    <published>2017-03-28T14:52:49.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 <em>var</em>에다 <em>const</em>와 <em>let</em>이라는 키워드가 추가되었습니다. 물론 var 없이도 변수를 선언할 수 있습니다만, 그렇게 되면 전역객체(브라우저 환경에서는 window 객체)의 속성이 되기 때문에 동일한 이름의 변수를 사용하다가는 치명적인 문제가 발생할 수도 있습니다.</p><p>기존 자바스크립트의 변수는 기본적으로 Function Scope입니다(var로 선언한 변수). 변수의 유효범위가 함수단위라는 이야기입니다. java나 C등의 많이 사용되는 프로그래밍 언어를 공부해 보았다면 알겠지만, 대체로 이 언어들은 Function Scope가 아닌 Block Scope를 가집니다.(python은 예외) 그래서 java나 C 계열의 언어를 사용하다가 자바스크립트 코드를 짜다보면 간혹 스코프 문제로 헷갈릴때가 있기 마련이죠. 그래서 ES6부터는 const와 let이 등장했습니다. 예상한대로 const와 let은 Block Scope를 가집니다. 기존에 많이 사용되는 언어들과 같습니다. const는 단어의 의미처럼 상수를 의미하고 let(무슨 단어를 줄인건지 감이 잡히지 않네요)은 기존의 var처럼 변수를 의미합니다.</p><p>이 밖에도 이 세가지 키워드에는 몇가지 차이점이 존재합니다. 예제를 통해 이 세가지 변수선언 키워드에 대해서 알아보겠습니다.</p><h3 id="재할당-및-재선언하기"><a href="#재할당-및-재선언하기" class="headerlink" title="재할당 및 재선언하기"></a>재할당 및 재선언하기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var의 경우</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let의 경우</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// SyntaxError: Identifier 'b' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const의 경우</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">c = <span class="number">2</span>; <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><p>var의 경우 굉장히 유연합니다. <em>var a = 1;</em>로 선언한 뒤, 2를 재할당하고 다시 <em>var = 3;</em>으로 재선언(?) 해도 문제될게 없습니다.<br>그런데 let의 경우 재할당은 문제 없습니다만, <em>let b = 3;</em>으로 재선언하고 나면 이미 선언된 변수라는 에러를 뱉어냅니다.<br>마지막으로 const는 상수이기 때문에 재할당, 재선언 모두 불가합니다.</p><h3 id="스코프-Scope"><a href="#스코프-Scope" class="headerlink" title="스코프 (Scope)"></a>스코프 (Scope)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">222</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 111</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 222</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>전역 영역에서 var a, let b 를 선언하고 각각 1, 2를 할당했습니다. 우선 if 블럭 내에서 각각의 변수 값을 변형시켰더니 블럭 내에서는 변경된 값이 모두 출력되었습니다. 그런데, if 블럭 바깥으로 나갔더니 let으로 선언했던 b 값은 가장 상단에 선언한 값과 동일한 2인데, a는 11로 변경되었습니다. 그 이유는 var의 경우 변수의 유효범위가 함수이므로 블럭으로 감쌌다고 하더라도 함수 스코프가 바뀐것이 아니기 때문에 if 블럭 내에서 재할당한 값을 출력하는 것입니다.</p><p>함수내에서 a, b 각 변수를 선언했을때는 어떨까요? var든, const든 새로운 함수로 감싸게 되면 그 안에서 선언한 변수는 함수(func)내의 지역변수가 되므로 바깥에서 선언한 변수의 이름과 겹치더라도 함수(func) 내에서는 새로 할당한 값들이 출력됩니다. 마지막으로 함수가 호출되고 나서 각 변수를 출력해보면, 함수 내에서 할당한 값은 그 함수 호출이 끝남과 동시에 유효범위도 사라지므로 함수 선언 이전의 a, b 값이 출력됩니다.</p><h3 id="let-vs-const"><a href="#let-vs-const" class="headerlink" title="let vs const"></a>let vs const</h3><p>위에서 let은 변수, const는 상수라고 구분지어 설명했지만, 좀더 구체적으로 설명할 필요가 있어보입니다. let은 변수고 const는 상수가 맞긴 하지만, 할당된 값이 원시타입이냐 참조타입(array, object, function)이냐에 따라서 조금 다르게 사용됩니다.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">const b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line">b = <span class="number">22</span>;// TypeError: Assignment <span class="keyword">to</span> constant variable.</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj_a = &#123;</span><br><span class="line">name: <span class="string">'obj_a'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const obj_b = &#123;</span><br><span class="line">name: <span class="string">'obj_b'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj_a[<span class="string">'name'</span>] = <span class="string">'a'</span>;</span><br><span class="line">obj_b[<span class="string">'name'</span>] = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line">obj_a[<span class="string">'number'</span>] = <span class="number">1</span>;</span><br><span class="line">obj_b[<span class="string">'number'</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj_a = &#123;&#125;</span><br><span class="line">obj_b = &#123;&#125;// TypeError: Assignment <span class="keyword">to</span> constant variable.</span><br></pre></td></tr></table></figure><p>기본적으로 let은 재할당이 가능한반면, const는 재할당이 불가합니다. 재할당하게 되면 TypeError가 발생하죠. 그런데 차이점이 있다면, 처음 할당된 객체를 변형시킬때는 아무 문제없이 동작한다는 것을 알 수 있습니다. 처음에는 두 객체 모두 ‘name’ 이라는 속성만 가지고 있었는데, 이를 변형하거나 새로운 속성(number)를 추가하더라도 let, const 둘다 에러를 발생시키지 않습니다. 이는 array와 function의 경우도 마찬가지인데, 이유는 const에 실제로 할당된 값은 원시타입처럼 특정 값이 아니라 객체의 주소값이기 때문입니다. 실제 객체가 변한다고해서 한번 할당된 객체의 주소값이 바뀌는건 아니죠. </p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><blockquote><ul><li>ES6에서 var, const, let 모두 사용 가능하지만, 상황에 맞게 적절한 키워드를 사용해야 하겠습니다. (되도록 const, let을 사용하는게 좋겠죠)</li><li>객체를 새로 할당할 특별한 이유(이런 경우는 드물다 생각합니다)가 없다면 되도록 const를 사용하여 객체를 선언하는게 좋을것 같습니다.</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6(ECMA Script 2015, 줄여서 ES6)로 넘어오면서 기존 ES5까지 사용하던 변수 선언 키워드인 &lt;em&gt;var&lt;/em&gt;에다 &lt;em&gt;const&lt;/em&gt;와 &lt;em&gt;let&lt;/em&gt;이라는 키워드가 추가되었습니다. 물론 var 없이도 변수
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://blueshw.github.io/tags/ES6/"/>
    
      <category term="var" scheme="http://blueshw.github.io/tags/var/"/>
    
      <category term="const" scheme="http://blueshw.github.io/tags/const/"/>
    
      <category term="let" scheme="http://blueshw.github.io/tags/let/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 패키지 공유하기</title>
    <link href="http://blueshw.github.io/2017/03/23/2017-03-23-migration-packages-sublime-text-3/"/>
    <id>http://blueshw.github.io/2017/03/23/2017-03-23-migration-packages-sublime-text-3/</id>
    <published>2017-03-22T15:37:32.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SublimeText-3-환경-설정-공유하기"><a href="#SublimeText-3-환경-설정-공유하기" class="headerlink" title="SublimeText 3 환경 설정 공유하기"></a>SublimeText 3 환경 설정 공유하기</h3><p>서브라임 텍스트 사용 중에 가장 아쉬운 점은 바로 환경설정 부분입니다. 아톰 등의 몇몇 텍스트에디터들은 계정과 연동되어 어느 기기에서 설치하더라도 동일한 환경으로 작업할 수 있는 장점이 있는데, 서브라임은 이 기능을 지원하지 않아 매번 <em><a href="https://packagecontrol.io/installation" rel="external nofollow noopener noreferrer" target="_blank">package Control</a></em>부터 사용하는 패키지를 새로 설치해야 되는 문제가 있죠. 패키지를 몇가지 사용하지 않는다면 이게 뭐가 문제냐라고 생각할지 모르지만, 수많은 패키지를 설치한 사용자에게는 모든 패키지 리스트를 받아서 새로 설치하는건 크나큰 고역이 아닐 수 없습니다.</p><p>방법은 의외로 간단합니다. 사용자가 개발한 여러 싱크 플러그인 중 하나를 사용해도 무방하지만 저는 package control 사이트에서 기본적으로 제안하는 방법을 사용하도록 하겠습니다.</p><h3 id="Syncing"><a href="#Syncing" class="headerlink" title="Syncing"></a><a href="https://packagecontrol.io/docs/syncing" rel="external nofollow noopener noreferrer" target="_blank">Syncing</a></h3><p>위 페이지를 보면 크게 2가지 방법이 있는 것을 알 수 있습니다.</p><blockquote><ol><li>Using Git (Git을 이용하는 방법)</li><li>Using Dropbox (Dropbox를 이용하는 방법)</li></ol></blockquote><p>Git을 이용하게 되면 별도의 Git 서버를 구축하지 않는 이상 대부분 Github 같은 서비스를 이용하게 될텐데 이때 문제가 하나 있습니다. Github은 private 저장소가 아닌 이상 오픈되어 있기 때문에 서브라임을 사용하면서 유료로 구매한 패키지 정보들이 고스란히 노출될 수 있습니다. 그래서 저는 Git을 이용하지 않고 안전한 Dropbox를 선택했습니다.</p><h3 id="Using-Dropbox-mac"><a href="#Using-Dropbox-mac" class="headerlink" title="Using Dropbox (mac)"></a>Using Dropbox (mac)</h3><ul><li><p>Step 1. 드롭박스를 이용하려면 우선 mac 용 드롭박스 앱을 설치합니다. (~/Dropbox 생성)</p></li><li><p>Step 2. 우선 저장할 패키지를 가진 기기에서 아래의 명령어를 차례로 입력합니다. Dropbox에 Sublime이라는 디렉토리를 생성하고, Packages 디렉토리 안에있는 User 정보를 dropbox의 Sublime 디렉토리로 이동합니다. 그리고 dropbox내 유저 정보를 simbolic link로 연결합니다.</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/</span><br><span class="line">mkdir ~/Dropbox/Sublime</span><br><span class="line">mv<span class="built_in"> User </span>~/Dropbox/Sublime/</span><br><span class="line">ln -s ~/Dropbox/Sublime/User</span><br></pre></td></tr></table></figure><ul><li>Step 3. 이제 다른 기기(새로 설치할 기기)에 가서 아래 명령어를 순차적으로 입력합니다</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/</span><br><span class="line">rm -r User</span><br><span class="line">ln -s ~/Dropbox/Sublime/User</span><br></pre></td></tr></table></figure><p>이렇게 초기의 환경에서</p><p><img src="/img/sublime-before.png" alt=""></p><p>이렇게 변합니다.</p><p><img src="/img/sublime-after.png" alt=""></p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>이게 끝입니다. 간단하죠?<br>혹시 완료했는데 적용이 안된다면, Sublime Text를 완전히 종료한 뒤 다시 실행시켜보세요.<br>서브라임은 최초에 실행될때 누락된 패키지가 있는지 체크하고 설치하는 과정을 거쳐<br>간단히 요약해보면, 아래와 같습니다.</p><blockquote><p>패키지 정보가 들어있는 User 정보를 dropbox로 이동하고 해당 폴더를 simbolic link로 바라보게 만든다.<br>이렇게 되면 내 sublime 정보가 dropbox에만 존재하므로, 어느 기기에서 사용하더라도 동일한 환경으로 설정이 가능하다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SublimeText-3-환경-설정-공유하기&quot;&gt;&lt;a href=&quot;#SublimeText-3-환경-설정-공유하기&quot; class=&quot;headerlink&quot; title=&quot;SublimeText 3 환경 설정 공유하기&quot;&gt;&lt;/a&gt;SublimeText 3 
      
    
    </summary>
    
      <category term="tool" scheme="http://blueshw.github.io/categories/tool/"/>
    
    
      <category term="SublimeText" scheme="http://blueshw.github.io/tags/SublimeText/"/>
    
      <category term="tool" scheme="http://blueshw.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>[ionic] ionic 개발에 필요한 것들</title>
    <link href="http://blueshw.github.io/2016/11/16/2016-11-16-ionic-install/"/>
    <id>http://blueshw.github.io/2016/11/16/2016-11-16-ionic-install/</id>
    <published>2016-11-15T16:14:00.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ionic-개발에-필요한-것들"><a href="#ionic-개발에-필요한-것들" class="headerlink" title="ionic 개발에 필요한 것들"></a>ionic 개발에 필요한 것들</h2><p>기본적으로 ionic, nodejs, cordova 등만 있어도 개발은 가능하겠지만, 안드로이드 에뮬레이터 실행을 위해서는 jdk 설치가 필요하겠고, ios 에뮬레이터 실행을 위해서는 xcode 설치도 필수가 되겠다(아래에선 생략한다). 그리고 ionic과 관련해서 설치해두면 편리하게 사용할 수 있는 모듈들을 몇개 추려봤다.</p><p>참고로 아직 ionic 파악이 덜 끝난 상태이므로 해당 리스트는 추가되거나 삭제될 수 있다.</p><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>안드로이드가 자바기반으로 개발되기 때문에 반드시 필요하다.</li><li>JAVA_HOME 경로를 ~/.bash_profile(or ~/.profile)파일에 설정한다.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h4 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h4><ul><li>Android 에뮬레이터 설치, 디버깅 등에 필요하다.</li><li>Ionic이 Android 앱을 빌드하거나 실행할 때는 Stand-Alone SDK Tools가 필요하다.</li><li>ANDROID_HOME 경로도 지정해준다.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_HOME</span>=/Projects/Libraries/adt-bundle-mac-x86_64/sdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</span><br></pre></td></tr></table></figure><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><ul><li>우선 설치부터, <a href="https://nodejs.org/en/download/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/en/download/</a> 사이트에서 원하는 os, version을 선택하여 설치한다.</li><li>또는 맥 사용자라면, 아래 명령어로 설치한다.</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><ul><li>NODE_HOME도 경로설정 해준다.</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_HOME</span>=p/Projects/Libraries/node/node-v0.12.7-darwin-x64</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_PATH</span>=<span class="variable">$NODE_HOME</span>/lib/node_modules</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$NODE_HOME/bin:$NODE_PATH</span><br></pre></td></tr></table></figure><h4 id="cordova"><a href="#cordova" class="headerlink" title="cordova"></a>cordova</h4><ul><li>npm install -g cordova (-g 옵션은 global, CLI(Command Line Interface) 명령어를 제공하는 경우는 글로벌로 설치)</li><li>ionic은 내부적으로 cordova를 이용한다(디바이스 배포용도).</li></ul><h4 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h4><ul><li>npm install -g gulp</li><li>ionic 빌드 시스템</li></ul><h4 id="bower"><a href="#bower" class="headerlink" title="bower"></a>bower</h4><ul><li>npm install -g bower</li><li>ionic은 필요한 패키지를 bower를 이용해서 다운 받는다.</li></ul><h4 id="ios-sim"><a href="#ios-sim" class="headerlink" title="ios-sim"></a>ios-sim</h4><ul><li>npm install -g ios-sim</li><li>폰갭 프로젝트를 ios 시뮬레이터에서 실행하기 위한 패키지</li><li>다음 명령어로 타겟을 지정해줄수 있다.</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 가능한 device 확인</span></span><br><span class="line">ios-sim showdevices</span><br><span class="line"></span><br><span class="line"><span class="meta"># 타겟 지정 실행</span></span><br><span class="line">ionic emualte ios --target=<span class="string">"iPhone-5s"</span></span><br></pre></td></tr></table></figure><h4 id="ios-deploy"><a href="#ios-deploy" class="headerlink" title="ios-deploy"></a>ios-deploy</h4><ul><li>npm imstall -g ios-deploy</li><li>PhoneGap 프로젝트를 Xcode 없이 iOS 디바이스로 앱을 설치하거나 디버깅하는 패키지</li><li>ios-sim, ios-deploy 패키지를 설치했다면, ios 시뮬레이터를 띄우기 위해서 굳이 xcode를 실행할 필요는 없다(물론 설치는 되어있어야 함).</li></ul><h4 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h4><ul><li>npm install -g ionic</li><li>드디어 ionic 설치, 이전것들은 ionic 프로젝트를 만들기전 꼭 필요한 패키지 들이니 꼭 설치하고 시작하도록 하자.</li><li>몇가지 명령어를 살펴보자</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sidemenu 형식의 프로젝트 생성</span></span><br><span class="line">ionic start testApp sidemenu</span><br><span class="line"></span><br><span class="line"><span class="comment"># ionic 서버 실행</span></span><br><span class="line">ionic serve </span><br><span class="line"></span><br><span class="line"><span class="comment"># ionic ios 앱 빌드</span></span><br><span class="line">ionic build</span><br><span class="line"></span><br><span class="line"><span class="comment"># ios 에뮬레이터 실행</span></span><br><span class="line">ionic emulate ios (<span class="attribute">--target</span>=<span class="string">"iPhone-6s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ios real 디바이스에서 실행</span></span><br><span class="line">ionic <span class="builtin-name">run</span> ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># android 추가</span></span><br><span class="line">ionic platform <span class="builtin-name">add</span> android</span><br></pre></td></tr></table></figure><p>참고자료 : <a href="http://blog.saltfactory.net/ionic/start-ionic-edge-book.html" rel="external nofollow noopener noreferrer" target="_blank">http://blog.saltfactory.net/ionic/start-ionic-edge-book.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ionic-개발에-필요한-것들&quot;&gt;&lt;a href=&quot;#ionic-개발에-필요한-것들&quot; class=&quot;headerlink&quot; title=&quot;ionic 개발에 필요한 것들&quot;&gt;&lt;/a&gt;ionic 개발에 필요한 것들&lt;/h2&gt;&lt;p&gt;기본적으로 ionic, n
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
      <category term="ionic" scheme="http://blueshw.github.io/tags/ionic/"/>
    
      <category term="모바일앱" scheme="http://blueshw.github.io/tags/%EB%AA%A8%EB%B0%94%EC%9D%BC%EC%95%B1/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 4</title>
    <link href="http://blueshw.github.io/2016/10/02/2016-10-02-frontend-javascript-framework-angularjs-week4/"/>
    <id>http://blueshw.github.io/2016/10/02/2016-10-02-frontend-javascript-framework-angularjs-week4/</id>
    <published>2016-10-02T08:38:30.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Client-Server-Communication-and-Angular-Testing"><a href="#Client-Server-Communication-and-Angular-Testing" class="headerlink" title="Client-Server Communication and Angular Testing"></a>Client-Server Communication and Angular Testing</h2><h3 id="Networking-Essentials"><a href="#Networking-Essentials" class="headerlink" title="Networking Essentials"></a>Networking Essentials</h3><p>이번 챕터에서는 클라이언트 서버 구조에서 AngularJS가 어떻게 동작하는지 살펴볼것이다.<br>요즘 가장 많이 사용되는 Client-Server 관계는 HTTP프로토콜과 REST API를 이용한 백엔드(서버)와 브라우저(클라이언트)간의 통신으로 이뤄진다. 이전 강의까지 보았던 방식은 브라우저에 출력되는 데이터가 services.js 파일의 자바스크립트 오브젝트로 존재했었다. 하지만, Client-Server 구조에서는 거의 모든 데이터를 서버사이드에서 클라이언트 사이드로 제공해준다. HTTP와 REST API에 대한 내용은 자세히 다루지는 않겠다(강의 보세요).</p><p>HTTP Response는 클라이언트로 보낼 HTML 페이지나 특정 포맷으로 data를 가지는데, 주로 XML 또는 JSON을 많이 사용한다. 이 중에서 JSON(Javascript Object Notation)은 가장 많이 사용되는 데이터 포맷이다. 이름만 보면 자바스크립트에서만 사용될것 같지만, 모바일이나 웹서비스 등 일반적인 HTTP 통신에서 대부분 사용된다. XML이 잘 사용되지 않는 이유는 JSON에 비해서 데이터를 parsing 하는 과정이 복잡하기 때문이다.</p><p>JSON 데이터 구조를 간단히 살펴보자<br>자바스크립트 object와 구조가 비슷하다. name : value 구조로 이뤄지며, value 내에는 array, 스트링, 숫자, object 등의 데이터 타입 등이 들어갈 수 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"promotion"</span>:</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"weekend buffet"</span>,</span><br><span class="line"><span class="attr">"image"</span>: <span class="string">"images/buffet.png"</span>,</span><br><span class="line"><span class="attr">"label"</span>: <span class="string">"New"</span>,</span><br><span class="line"><span class="attr">"price"</span>: <span class="string">"19.99"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"asdjfkljaskdlfjas..."</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-Server-Communication-using-http"><a href="#Client-Server-Communication-using-http" class="headerlink" title="Client-Server Communication using $http"></a>Client-Server Communication using $http</h3><h4 id="Angular-http"><a href="#Angular-http" class="headerlink" title="Angular $http"></a>Angular $http</h4><p>$http는 브라우저에서 서버와의 통신을 위한 가장 핵심적인 서비스로 HTTP protocol을 사용한다. 아마 내부적으로는 AJAX 통신을 할것이기 때문에 비동기로 처리될 것이다.</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>자바스크립트에서 Promise란 비동기 통신이 완료된 후에 상태에 따라 특정 콜백을 리턴해 줄 것이라는 일종의 약속 같은 것을 말한다. $http 서비스 역시 프로미스를 리턴한다. 패턴은 아래와 같다.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;method: <span class="string">'GET'</span>, url:<span class="string">'/dishes'</span>&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123; ... &#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123; ... &#125;);</span><br></pre></td></tr></table></figure><p>then 뒤에는 두개의 function이 파라미터로 들어가 있다. 첫번째는 request가 성공했을 때 발생하는 함수이고, 두번째는 요청이 실패했을때 발생하는 함수이다. 보통 AJAX 통신을 사용할 때, ‘success’, ‘error’ 속성을 사용하는 것과 비슷하다.</p><h4 id="HTTP-Response"><a href="#HTTP-Response" class="headerlink" title="HTTP Response"></a>HTTP Response</h4><p>요청의 결과로 response라는 object가 서버로부터 넘어온다. 이때 reponse 객체에는 다음과 같은 속성들이 포함되어 있다.</p><ul><li>response.data : 메세지 바디를 포함하느 string / object</li><li>response.status : 상태 코드 (200, 400 등)</li><li>response.headers : 헤더정보</li><li>response.config : configuration object</li><li>response.statusText : response 상태 텍스트 값 </li></ul><h4 id="ng-if-directive"><a href="#ng-if-directive" class="headerlink" title="ng-if directive"></a>ng-if directive</h4><p>html 코드를 작성할 때 해당 DOM을 보여줄지 말지를 결정하기 위해 ngIf directive를 사용할 수 있다. 사용법은 간단하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-12"</span> ng-<span class="keyword">if</span>=<span class="string">"!showMenu"</span>&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>showMenu가 true면 ng-if는 false가 되므로 해당 message는 안보일것이고, showMenu가 false면 반대로 message가 나타날 것이다.</p><h3 id="Brief-Representational-State-Transfer-REST"><a href="#Brief-Representational-State-Transfer-REST" class="headerlink" title="Brief Representational State Transfer (REST)"></a>Brief Representational State Transfer (REST)</h3><p>본격적으로 서버와의 통신을 해보기 전에 가장 많이 사용하는 방식인 REST에 대해서 알아보자. 웹 서비스를 만들때 네트워크와 연결하는 방법에 대한 시스템은 보통 아래 두개 접근법이 가장 일반적이다.</p><ul><li><p>SOAP (Simple Object Access Protocol) : Uses WSDL(Web Service Description Language), 프레젠테이션 영역에 XML을 사용 </p></li><li><p>REST (Representational State Transfer) : 가장 많이 사용됨, Use Web standards, Exchange of data using either XML or JSON, SOAP나 WSDL보다 훨씬 간단한다.</p></li></ul><p>REST는 WWW(World Wide Web)과 같이 분산 hypermedia systems을 위한 아키텍쳐 스타일 중 하나이며, 웹 페이지의 리소스에 어떻게 접근하고 어떻게 정의되고 어떻게 이동하는지에 대한 법칙을 모아놓은 시스템이다. </p><h4 id="REST의-기본-법칙"><a href="#REST의-기본-법칙" class="headerlink" title="REST의 기본 법칙"></a>REST의 기본 법칙</h4><ul><li>HTTP 메소드를 사용하며 (Use HTTP methods explicitly)</li><li>상태를 저장하지 않는다 (Be stateless)</li><li>리소스는 URI와 같이 디렉토리 스트럭쳐가 그대로 노출된다 (Expose directory structure-like URIs)</li><li>통신의 매개체로 XML, JSON 등이 사용된다.</li></ul><p>REST는 세가지 컨셉으로 표현할 수 있다. 특정 URI로 표현되는 <em>Nouns(Resources)</em>, GET or POST 등의 HTTP 메소드인 <em>Verbs</em>, XML or JSON 등으로 표현하는 <em>Representaions</em></p><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>REST의 리소스는 다음과 같이 표기한다. 리소스에는 문서나 이미지, 리소스 컬렉션 등이다.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/dishes/</span><span class="comment"># Retrieve all dishses</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/dishes/</span><span class="number">123</span><span class="comment"># Retrieve information about the specific dish (id:123)</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/promotions/</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/leadership/</span></span><br><span class="line">http:<span class="regexp">//</span>www.conFusion.food<span class="regexp">/leadership/</span><span class="number">456</span></span><br></pre></td></tr></table></figure><h4 id="Verbs"><a href="#Verbs" class="headerlink" title="Verbs"></a>Verbs</h4><p>Verb에 해당하는 HTTP 메소드는 각각 다음과 같은 의미를 가진다.</p><ul><li>GET -&gt; READ</li><li>POST -&gt; CREATE</li><li>PUT -&gt; UPDATE </li><li>DELETE -&gt; DELETE</li></ul><p>GET 메소드는 클라이언트가 서버에게 어떤 리소스를 요청하는 메소드이다. 어떤 GET 메소드가 서버에 요청(Request)이 들어오면, 서버는 XML 또는 JSON 형태로 클라이언트(브라우저)에게 응답(Response)을 한다.</p><h4 id="Representaions"><a href="#Representaions" class="headerlink" title="Representaions"></a>Representaions</h4><p>표현을 위해 클라이언트에게 어떤 데이터를 보낼 것이냐 하는 것인데, 가장 많이 쓰이는 두가지 방식이 바로 JSON과 XML이다. 최근에는 JSON 타입이 정보 교환을 위한 standards로 여겨지고 있다. </p><h4 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h4><p>REST는 상태를 저장하지 않다. 매 요청바다 항상 새로운 요청이 발생하게 된다. 그렇기 때문에 클라이언트측에서 요청에 따라 상태가 변화하는 것을 트래킹하기 위해서는 클라이언트 자신이 요청 전의 상태를 기억하고 있어야 한다.</p><h3 id="Clint-Server-Communication-using-resource"><a href="#Clint-Server-Communication-using-resource" class="headerlink" title="Clint-Server Communication using $resource"></a>Clint-Server Communication using $resource</h3><h4 id="Angular-ngResource"><a href="#Angular-ngResource" class="headerlink" title="Angular ngResource"></a>Angular ngResource</h4><p>ngResource 모듈은 restful API 서버와 통신하기 위해 $http 보다 고수준의 추상화를 제공한다(흠…). angular core가 아니기 때문에 따로 설치해 줘야 한다. </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-resource -S</span><br></pre></td></tr></table></figure><p>DI를 이용해서 ngResource를 사용할 수 있다.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.<span class="keyword">module</span>(<span class="string">'confusionApp'</span>, [<span class="string">'ui.router'</span>, <span class="string">'ngResource'</span>])</span><br></pre></td></tr></table></figure><h4 id="Angular-resource-Service"><a href="#Angular-resource-Service" class="headerlink" title="Angular $resource Service"></a>Angular $resource Service</h4><p>$http에 비해 $resource는 훨씬 편리하게 사용할 수 있다. 우선 사용 예시를 살펴보기 전에 $resource 서비스를 사용하기 위해서는 사용하고자하는 service나 controller에 DI로 추가한다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.service(<span class="string">'menuFactory'</span>, [<span class="string">'$resouce'</span>, <span class="string">'baseURL'</span>, <span class="function"><span class="keyword">function</span><span class="params">($resource, baseURL)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$scope.dishes = $resouce(baseURL + <span class="string">"dishes/:id"</span>, <span class="keyword">null</span>, &#123;<span class="string">'update'</span>:&#123;method:<span class="string">'PUT'</span>&#125;&#125;).query();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dish = $resource(baseURL + <span class="string">"dishes/:id"</span>, <span class="keyword">null</span>, &#123;<span class="string">'update'</span>:&#123;method:<span class="string">'PUT'</span>&#125;&#125;).get(&#123;id:<span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dish.name = <span class="string">"dovanut"</span>;</span><br><span class="line">dish.$save();</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>$resource의 기본 action들은 다음과 있다.</p><blockquote><p>{‘get’:{method:’GET’},<br>‘save’:{method:’POST’},<br>‘query’:{method:’GET’, isArray:true},<br>‘remove’:{method:’DELETE’},<br>‘delete’:{method:’DELETE’}};</p></blockquote><p>action을 커스텀으로 만들 수도 있는데, 위의 예제에서 본 것 처럼 update라는 메서드를 HTTP PUT 메서드로 정의해 놓으면 update() 함수를 사용할 수 있다. 다음의 예제를 보자</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$resource(baseURL+<span class="string">"dishes/:id"</span>, null, &#123;<span class="string">'update'</span>:&#123;method:<span class="string">'PUT'</span>&#125;&#125;).<span class="keyword">update</span>(&#123;id:$scope.dish.id&#125;,$scope.dish);</span><br></pre></td></tr></table></figure><h3 id="Angular-Testing"><a href="#Angular-Testing" class="headerlink" title="Angular Testing"></a>Angular Testing</h3><p>Angular 테스팅은 unit 테스트를 제공한다. unit 테스트란 각 부분의 독립된 로직을 테스트하는 기법을 말하는데, Angluar에서는 작성한 controller, filter, factory, service 등의 모듈을 개별적으로 검사할 수 있다. 그렇기 때문에 angular로 작성한 코드는 DOM과는 완전히 분리되어 테스트할 수가 있다.</p><h4 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h4><p>angularJS를 테스트하기위해 Behavior driven development 프레임웍인 Jasmine을 이용한다. 구체적으로 그룹 테스트를 위해 “describe” 함수를 이용하고, 개별테스트를 위해서 “it” 함수를 이용한다.</p><p>다음의 예를 보자</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe('Controller<span class="symbol">:MenuController</span>', function() &#123;</span><br><span class="line">it('should create <span class="string">"dishes"</span> with <span class="number">2</span> dishes fetched from xhr', function() &#123;</span><br><span class="line">// showMenu가 true이길 기대함</span><br><span class="line">expect(<span class="name">scope</span>.showMenu).toBeTruthy()<span class="comment">;</span></span><br><span class="line">// dishes가 정의됨을 기대함</span><br><span class="line">expect(<span class="name">scope</span>.dishes).toBeDefined()<span class="comment">;</span></span><br><span class="line">// dishes의 개수가 <span class="number">2</span>개임을 기대함</span><br><span class="line">expect(<span class="name">scope</span>.dishes.length).toBe(<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>describe는 MenuController를 테스트 한다는것을 말한다. 두번째 it은 xhr로부터 dishes가 2 dishes가 fetched된 dishes가 만들어질 것이라는 걸 말하고 두번째 인자에 들어간 함수 내에서는 expect 함수로 각각의 조건이 만족하는지를 체크한다.</p><h4 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h4><p>카르마는 자바스크립트 기반 command line tool이다(NodeJS application). 카르마를 이용하면 Jasmine으로 테스트한 결과를 브라우저로 가져와 쉽게 확인할 수 있다.</p><h4 id="angular-mocks"><a href="#angular-mocks" class="headerlink" title="angular-mocks"></a>angular-mocks</h4><p>ngMock 모듈을 이용하면 테스트의 결과를 의존성을 가지는 다른 서비스나 컨트롤러에 미리 적용해 볼 수 있다. 한가지 예로 $httpBackend를 이용하면 서버에 XHR 리퀘스트를 테스트로 날려볼수도 있다.</p><h4 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h4><p>우선 필요한 모듈들을 install 한다. 글로벌로 설치하는 건 상관없지만 그 외에는 conFusion 폴더 내에서 설치하도록 하자.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자스민 코어 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span><span class="keyword">jasmine-core </span>--save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># karma-jasmine 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span>karma-<span class="keyword">jasmine </span>--save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 카르마, 클라이언트 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span>karma --save-dev</span><br><span class="line">sudo npm <span class="keyword">install </span>karma-cli -g</span><br><span class="line">sudo npm <span class="keyword">install </span>karma-cli --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 카르마를 통한 결과를 크롬에 보여주기 위한 모듈 설치</span></span><br><span class="line">sudo npm <span class="keyword">install </span>phantomjs karma-phantomjs-launcher karma-chrome-launcher --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># angular mocks 설치</span></span><br><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-mocks -S</span><br></pre></td></tr></table></figure><p>/conFusion/test 폴더를 생성하고 karma.conf.js 파일을 생성한다.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> &#123;</span></span><br><span class="line">config.<span class="keyword">set</span>(&#123;</span><br><span class="line">basePath: <span class="string">'../'</span>,</span><br><span class="line">framework<span class="variable">s:</span> [<span class="string">'jasmine'</span>],</span><br><span class="line">// <span class="keyword">list</span> of <span class="keyword">files</span>, 테스트하려는 파일 목록</span><br><span class="line"><span class="keyword">file</span><span class="variable">s:</span> [</span><br><span class="line"><span class="string">'bower_components/angular/angular.js'</span>,</span><br><span class="line"><span class="string">'bower_components/angular-resource/angular-resource.js'</span>,</span><br><span class="line"><span class="string">'bower_components/angular-ui-router/release/angular-ui-router.js'</span>,</span><br><span class="line"><span class="string">'bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class="line"><span class="string">'app/scripts/*.js'</span>,</span><br><span class="line"><span class="string">'test/unit/**/*.js'</span></span><br><span class="line">],</span><br><span class="line">// <span class="keyword">list</span> of <span class="keyword">files</span> <span class="keyword">to</span> exclude, 테스트 제외 목록</span><br><span class="line">exclude: [</span><br><span class="line"><span class="string">'test/protractor.conf.js'</span>, <span class="string">'test/e2e/*.js'</span></span><br><span class="line">],</span><br><span class="line">preprocessor<span class="variable">s:</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">// test results reporter <span class="keyword">to</span> use</span><br><span class="line">// possible value<span class="variable">s:</span> <span class="string">'dots'</span>, <span class="string">'progress'</span></span><br><span class="line">reporter<span class="variable">s:</span> [<span class="string">'progress'</span>],</span><br><span class="line">por<span class="variable">t:</span> <span class="number">9876</span>,</span><br><span class="line">// colors in the output (reporters <span class="built_in">and</span> logs)</span><br><span class="line">color<span class="variable">s:</span> true,</span><br><span class="line">// config.LOG_DISALBE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">logLeve<span class="variable">l:</span> config.LOG_INFO,</span><br><span class="line">// 파일 변경시 auto reload</span><br><span class="line">autoWatch: true,</span><br><span class="line">// browser, available browser launchers</span><br><span class="line">browser<span class="variable">s:</span> [<span class="string">'Chrome'</span>, <span class="string">'PhantomJS'</span>, <span class="string">'PhantomJS_custom'</span>],</span><br><span class="line">customLauncher<span class="variable">s:</span> &#123;</span><br><span class="line"><span class="string">'PhantomJS_custom'</span>: &#123;</span><br><span class="line">base: <span class="string">'PhantomJS'</span>,</span><br><span class="line">option<span class="variable">s:</span> &#123;</span><br><span class="line">windowName: <span class="string">'my-window'</span>,</span><br><span class="line">setting<span class="variable">s:</span> &#123;</span><br><span class="line">webSecurityEnabled: false</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">flag<span class="variable">s:</span> [<span class="string">'--load-images=true'</span>],</span><br><span class="line">debu<span class="variable">g:</span> true</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">phantomjsLauncher: &#123;</span><br><span class="line">// ResourceError 발생시 phantomjs 종료, 비정상 종료시 유용함</span><br><span class="line">exitOnResourceError: true</span><br><span class="line">&#125;,</span><br><span class="line">// Continuous Integration <span class="keyword">mode</span></span><br><span class="line">// <span class="keyword">if</span> true, Karma captures browsers, runs the tests <span class="built_in">and</span> exits</span><br><span class="line">singleRun: false,</span><br><span class="line">// Concurrency level</span><br><span class="line">concurrency: Infinity</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>conFusion/test/unit/menucontroller.js 파일을 생성해서 unit 테스트를 실행한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Client-Server-Communication-and-Angular-Testing&quot;&gt;&lt;a href=&quot;#Client-Server-Communication-and-Angular-Testing&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 3-2</title>
    <link href="http://blueshw.github.io/2016/09/05/2016-09-05-frontend-javascript-framework-angularjs-week3-2/"/>
    <id>http://blueshw.github.io/2016/09/05/2016-09-05-frontend-javascript-framework-angularjs-week3-2/</id>
    <published>2016-09-05T14:10:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Single-Page-Applications"><a href="#Single-Page-Applications" class="headerlink" title="Single Page Applications"></a>Single Page Applications</h2><h3 id="Angular-ngRoute-and-Single-Page-Applications"><a href="#Angular-ngRoute-and-Single-Page-Applications" class="headerlink" title="Angular ngRoute and Single Page Applications"></a>Angular ngRoute and Single Page Applications</h3><h4 id="Single-Page-Applications-SPA"><a href="#Single-Page-Applications-SPA" class="headerlink" title="Single Page Applications(SPA)"></a>Single Page Applications(SPA)</h4><p>Single Page Application이란, 말그대로 하나의 페이지에서 동작하는 어플리케인션을 말한다. 기존의 웹사이트를 보면, 어떤 페이지를 서버에 요청하면 서버가 요청 받은 페이지를 브라우저에 보내는 방식이 반복되는 형태였다. 그래서 어떤 페이지로 이동하려면 서버에 해당 페이지 전부를 요청해야만 했다. 이런방법은 사실 header나 footer, js, css 파일 등과 같이 모든 페이지에서 필요로하는 것들을 매번 요청해야하는 문제가 따른다(물론 캐싱이 된다).<br>하지만 SPA는 index.html과 같은 single master page를 다운받은 후, 다른 페이지로 이동하는 것이 아니라 서버에 필요한 데이터만 요청하여 화면을 바꿔치기 하는 형태로 동작한다.</p><p>하지만 SPA도 극복해야할 문제들이 있다.</p><blockquote><p>검색엔진 같은 경우, 검색 후 결과를 클릭하면 다른 웹사이트로 이동해야하는데 과연 SPA로 가능할것이냐?<br>SPA 같은 경우는 서버의 데이터를 다운받아 클라이언트에서 사용하게 되는데 이때 서버와 클라이언트 중에 어디에 책임을 전가해야할지를 정하는 문제<br>단일 페이지이기 때문에 history 관리가 어려운 문제<br>페이지의 데이터를 모으기 어려운 문제<br>필요한 모든 라이브러리 및 페이지가 들어있는 최초의 페이지를 읽어 올때의 속도 문제</p></blockquote><h4 id="Angular-and-SPA"><a href="#Angular-and-SPA" class="headerlink" title="Angular and SPA"></a>Angular and SPA</h4><p>지금까지 봐왔던 많은 요소들은 Angular JS로 SPA 디자인이 가능하다는 것을 보여주고 있다.</p><blockquote><p>one-way and two-way 바인딩<br>MVC/MVVM/MVW 프레임워크<br>view -&gt; template을 사용하고 controller를 통해서 모델의 데이터를 이용해서 render<br>location and routing을 제공</p></blockquote><p>SPA에서 서버는 REST API를 통해서 데이터를 제공하거나 static HTML, Angular templates와 리소스를 제공한다. 클라이언트는 Temlating과 라우팅을 이용하여 뷰를 그리는 역할을 한다.</p><h4 id="Deep-Linking"><a href="#Deep-Linking" class="headerlink" title="Deep Linking"></a>Deep Linking</h4><p>검색이 가능하거나 indexing이 가능한 웹페이지 내 컨텐츠의 하이퍼링크를 말한다.<br>예를들면,</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//www.conFusion.food/index.html<span class="meta">#/menu/0</span></span><br></pre></td></tr></table></figure><p>해시태그(#)가 url에 왜 붙었느냐??<br>url에 해시태그가 붙으면 해시태그 이후에 나타나는 부분에 대해서는 서버에 요청(?)하지 말라는 의미다. 즉, reload 안하겠다는 거다. 이미 index.html 페이지에 위치한 상태에서 #/menu/0가 붙는다고 페이지가 리로드 되지 않는다. 다만, #/menu/0에 해당하는 리소스를 찾는다. angularJS에서는 router 의해 해당 리소스를 찾게된다. 물론 페이지가 리로드되지 않지만 해시태그 뒷부분 url의 데이터가 서버에 위치할 수도 있지만 아마 그때는 ajax로 데이터를 가져오지 않을까 싶다.</p><p>즉, angularJS에서는 url의 해시태그 뒷부분을 handling하여 페이지를 변경하게된다.</p><h4 id="location-service"><a href="#location-service" class="headerlink" title="$location service"></a>$location service</h4><ul><li>현재 주소창의 URL을 보여준다.</li><li>back / forward 버튼 등에 의한 url 변화에 대해 동기화시켜준다.</li><li>url(), path(), search(), hash() 등의 메서드로 get / set을 통해 url을 변경할 수 있도록 해준다.</li></ul><h4 id="ngRoute-Module"><a href="#ngRoute-Module" class="headerlink" title="ngRoute Module"></a>ngRoute Module</h4><p>우선 install한다. conFusion 폴더에서 실행한다.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-route -S</span><br></pre></td></tr></table></figure><p>ngRoute는 $location 서비스와 렌더된 뷰 사이의 관계를 관리한다. url을 변경할 필요가 있으면 $location 서비스의 메서드를 이용하여 url 변경(# 뒷부분)하여 페이지를 갱신할 수 있다.</p><p>다음과 괕이 angular module에서 사용된다.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 의존적으로 주입한다.</span></span><br><span class="line">angular.<span class="keyword">module</span>(<span class="string">'confusionApp'</span>, [<span class="string">'ngRoute'</span>])</span><br></pre></td></tr></table></figure><p>ngRoute에서는 Angular provider를 사용할 수 있는데, provider는 url이 변경됨에 따라 그에 알맞는 적절한 template과 url(handlers)로 매핑시켜준다.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">angular</span><span class="selector-class">.module</span>(<span class="string">'confusionApp'</span>, [<span class="string">'ngRoute'</span>])</span><br><span class="line"><span class="comment">// 라우팅을 위해 config 함수를 사용한다.</span></span><br><span class="line"><span class="comment">// 파라미터로 $routeProvider가 들어간다.</span></span><br><span class="line">    <span class="selector-class">.config</span>(function($routeProvider) &#123;</span><br><span class="line"></span><br><span class="line">      $<span class="selector-tag">routeProvider</span></span><br><span class="line">        <span class="selector-class">.when</span>(<span class="string">'/contactus'</span>, &#123;</span><br><span class="line">          <span class="attribute">templateUrl </span>: <span class="string">'contactus.html'</span>,</span><br><span class="line">          <span class="attribute">controller </span>: <span class="string">'ContactController'</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.when</span>(<span class="string">'/menu'</span>, &#123;</span><br><span class="line">          <span class="attribute">templateUrl </span>: <span class="string">'menu.html'</span>,</span><br><span class="line">          <span class="attribute">controller </span>: <span class="string">'MenuController'</span></span><br><span class="line">        &#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="selector-class">.when</span>(<span class="string">'/menu/:id'</span>, &#123;</span><br><span class="line">          <span class="attribute">templateUrl </span>: <span class="string">'dishDetail.html'</span>,</span><br><span class="line">          <span class="attribute">controller </span>: <span class="string">'DishDetailController'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 디폴트, 아무것도 매치가 안되면 otherwise 실행</span></span><br><span class="line">        <span class="selector-class">.otherwise</span>(<span class="string">'/contactus'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>url이 변경되면 해당되는 url을 $routeProvider.when의 첫번째 파라미터에서 찾은 다음 각각 알맞는 template과 contoller를 지정해주어 view를 렌더링한다.</p><p>$routeParams를 이용하면 주어진 파라미터로 url에 삽입할 수 있다.<br>예를 보자</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// menu.html</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span><br><span class="line">&lt;a ng-href=<span class="string">"#/menu/&#123;&#123;dish._id&#125;&#125;"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controllers.js</span></span><br><span class="line">.controller(<span class="string">'DishDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>,</span><br><span class="line"><span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $routeParams, menuFactory</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dish = menuFactory.getDish(<span class="built_in">parseInt</span>($routeParams.id, <span class="number">10</span>));</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>/menu/[id]와 같은 url이 들어왔을때 [id] 부분은 파라미터로 처리한다.<br>만약 dish 이미지를 클릭햇을때 각각의 detail 페이지로 이동하는 동작을 처리한다고 생각해보자. 각각의 dish에 id를 부여하고 이미지의 a 태그에 id를 이용하여 링크를 만들어 둔다.</p><p>이미지를 클릭하면 DishDetailController에 의존적으로 주입한 $routeParams에 url에 전달된 dish._id가 id라는 이름으로 들어가 이 id에 해당하는 dish 데이터를 가져오게 될 것이다.</p><p>마지막으로 지난 강의에서 index.html의 header와 footer 사이에 넣었던 ng-include를 ng-view로 변경하자. ng-view directive는 $route 서비스와 함께 동작하여 url 변경에 따라 현재 렌더링된 템플릿을 html 파일에 포함시켜준다. </p><h3 id="Angular-UI-Router-for-Single-Page-Applications"><a href="#Angular-UI-Router-for-Single-Page-Applications" class="headerlink" title="Angular UI-Router for Single Page Applications"></a>Angular UI-Router for Single Page Applications</h3><p>이전 강의에서 살펴본 ngRoute는 한계가 있다.</p><ul><li>한 페이지 당 하나의 뷰만 사용이 가능하다 (no multiple, no nested)</li><li>view가 url에 종속적이다.</li></ul><p>이에반해 UI Router는 어플리케이션의 상태에 기반을 두고 있다. 이 말은 즉, url이 바뀌지 않아도 일부분을 바꿀 수 있다는 뜻이다. (multiple, nested)</p><p>우선 설치부터 하자</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bower </span><span class="keyword">install </span>angular-ui-router -S</span><br></pre></td></tr></table></figure><p>사용법은 이전과 비슷하다.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'confusionApp'</span>, [<span class="string">'ui.router'</span>])</span><br><span class="line">.config(<span class="keyword">function</span>($stateProvider, $urlRouterProvider) &#123;</span><br><span class="line">$stateProvider</span><br><span class="line">.state(<span class="string">'app'</span>, &#123;</span><br><span class="line">url:<span class="string">'/'</span>,</span><br><span class="line">views: &#123;</span><br><span class="line"><span class="string">'header'</span>: &#123;templateUrl: <span class="string">'views/header'</span>html&#125;,</span><br><span class="line"><span class="string">'content'</span>: &#123;template: <span class="string">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class="string">'IndexController'</span>&#125;</span><br><span class="line"><span class="string">'footer'</span>: &#123;templateUrl: <span class="string">'views/footer.html'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.state(<span class="string">'app.aboutus'</span>, &#123;</span><br><span class="line">url:<span class="string">'aboutus'</span>,</span><br><span class="line">views: &#123;</span><br><span class="line"><span class="string">'content@'</span>: &#123;template: <span class="string">'&lt;h1&gt;To be Completed&lt;/h1&gt;'</span>, controller : <span class="string">'AboutController'</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">// default</span><br><span class="line">$urlRouterProvider.otherwise(<span class="string">'/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>state에 따라서 각각 url을 지정해줄 수 있다. 그리고 views 속성에 여러 뷰(multiple)를 선언해줄 수도 있다. </p><p>두번째 state는 app의 nested view를 나타내는데, 특이하게 content 뒤에 ‘@’ 마크가 붙어 있다. 이는 해당 view가 content에 속하는 view라는 것을 말해준다.</p><p>위의 state 내 views 속성에 지정해둔 view name은 html 코드에서 ui-view로 매핑시켜준다.<br>그리고 ui-sref 속성은 state를 변경 시켜주는데 사용한다. href가 url을 이동하기 위한 속성이었다면 ui-sref는 url은 변경시켜주지 않고 속성만 바꾸는 link 역할을 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.aboutus"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>$routeParams와 마찬가지로 $stateParams를 사용할 수 있다.<br>사용법은 기존과 거의 같다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// menu.html</span></span><br><span class="line">&lt;a ui-sref=<span class="string">"app.dishdetails(&#123;id:dish._id&#125;)"</span>&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DishDetailController</span></span><br><span class="line">.controller(<span class="string">'DishDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$stateParams'</span>,</span><br><span class="line"><span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, $stateParams, menuFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dish = menuFactory.getDish(parseInt(parseInt($stateParams.id,<span class="number">10</span>));</span><br><span class="line">$scope.dish = dish;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Single-Page-Applications&quot;&gt;&lt;a href=&quot;#Single-Page-Applications&quot; class=&quot;headerlink&quot; title=&quot;Single Page Applications&quot;&gt;&lt;/a&gt;Single Page Ap
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 3-1</title>
    <link href="http://blueshw.github.io/2016/09/02/2016-09-02-frontend-javascript-framework-angularjs-week3-1/"/>
    <id>http://blueshw.github.io/2016/09/02/2016-09-02-frontend-javascript-framework-angularjs-week3-1/</id>
    <published>2016-09-02T11:46:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Single-Page-Applications"><a href="#Single-Page-Applications" class="headerlink" title="Single Page Applications"></a>Single Page Applications</h2><h3 id="Angular-Factory-Service-and-Dependency-Injection"><a href="#Angular-Factory-Service-and-Dependency-Injection" class="headerlink" title="Angular Factory, Service and Dependency Injection"></a>Angular Factory, Service and Dependency Injection</h3><h4 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h4><p>Dependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC에 해당한다. IoC 개념을 이해하고 다시 DI를 살펴보자. DI는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다.</p><p>마틴 파울러가 말한 DI를 구현하는 세가지 방법은 다음과 같다.</p><ul><li>Create dependency using new operator</li><li>Look up dependency using a global variable</li><li>Have dependency passed to it where needed</li></ul><p>위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.</p><h4 id="Angular-and-DI"><a href="#Angular-and-DI" class="headerlink" title="Angular and DI"></a>Angular and DI</h4><p>AngularJS에서는 DI를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.</p><p>services, directives, filters and animations 등의 컴포넌트에서 DI가 사용된다. 주입 가능한 factory method나 생성자를 정의한 다음 Controller와 같은 곳에 주입시켜 호출한다.</p><p>또한 config와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.<br>몇가지 예를 들어보자.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 첫번째 방법은 array에 명시</span></span><br><span class="line">module.controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 두번째 방법은 property 추가</span></span><br><span class="line"><span class="keyword">var</span> MenuController = funciton($scope, menuFactory) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">MenuController.$Inject = [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>];</span><br><span class="line">module.controller(<span class="string">'MenuController'</span>, MenuController);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 세번째 방법은 Implicit annotation</span></span><br><span class="line">module.controller(<span class="string">'MenuController'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Angular-Factory-and-Service"><a href="#Angular-Factory-and-Service" class="headerlink" title="Angular Factory and Service"></a>Angular Factory and Service</h4><p>factory와 service는 controller에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory와 service를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory와 service에 집중하자.</p><h4 id="Angular-Services"><a href="#Angular-Services" class="headerlink" title="Angular Services"></a>Angular Services</h4><p>service는 여러개의 app에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다. </p><p>$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.</p><h4 id="Angular-Factory"><a href="#Angular-Factory" class="headerlink" title="Angular Factory"></a>Angular Factory</h4><p>factory는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service와 factory의 차이가 별로 안 느껴지는데, 결정적으로 service는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory를 많이 이용한다.</p><p>우선 factory 사용 예를 보자</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// factory code</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .factory(<span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> menufac = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> dishes = [ ... ];</span><br><span class="line"></span><br><span class="line">    menufac.getDishes = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    menufac.getDish = <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes[index];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 객체를 리턴한다.</span></span><br><span class="line">    <span class="keyword">return</span> menufac;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line">    $scope.dishes = menuFactory.getDishes();</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><p>service 사용과 비교해보자</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service code</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .service(<span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 객체선언, 리턴이 필요없다. </span></span><br><span class="line">    <span class="keyword">var</span> dishes = [ ... ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getDishes = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getDish = <span class="function"><span class="keyword">function</span> <span class="params">(index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dishes[index];</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, menuFactory)</span> </span>&#123;</span><br><span class="line">    $scope.dishes = menuFactory.getDishes();</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><p>service와 factory의 사용법은 완전히 같다. 하지만 차이가 있는데, factory는 객체를 생성해서 리턴을 한다. 하지만 service의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.</p><h4 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h4><p>app.js</p><p>모든 컨트롤러 코드는 controllers.js로 이동한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>, [])</span><br><span class="line"></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>controllers.js</p><p>controller 코드는 모두 controllers.js로 이동하였고, 데이터를 가져오는 부분은 services.js로 이동</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, menuFactory</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        $scope.tab = <span class="number">1</span>;</span><br><span class="line">        $scope.filtText = <span class="string">''</span>;</span><br><span class="line">        $scope.showDetails = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        $scope.dishes = menuFactory.getDishes();</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;])</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    .controller(<span class="string">'DishDetailController'</span>, [<span class="string">'$scope'</span>, <span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, menuFactory</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dish = menuFactory.getDish(<span class="number">3</span>);        </span><br><span class="line">        $scope.dish = dish;</span><br><span class="line">        </span><br><span class="line">    &#125;])</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><p>services.js</p><p>데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)<br>아래는 service를 사용한 예제임.<br>그리고 dishdetail.html에서 사용하던 comment를 dishes에 합쳐서 사용<br>각 dish의 comment 속성에 리스트로 선언</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>)</span><br><span class="line">.service(<span class="string">'menuFactory'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> dishes = [</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'Uthapizza'</span>,</span><br><span class="line">image: <span class="string">'images/uthapizza.png'</span>,</span><br><span class="line">category: <span class="string">'mains'</span>,</span><br><span class="line">label: <span class="string">'Hot'</span>,</span><br><span class="line">price: <span class="string">'4.99'</span>,</span><br><span class="line">description:<span class="string">'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer'</span>,</span><br><span class="line">comment: <span class="string">'aaaaaaa'</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.getDishes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dishes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.getDish = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dishes[index];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Angular-Templates"><a href="#Angular-Templates" class="headerlink" title="Angular Templates"></a>Angular Templates</h3><p>Angular Tmeplate은 HTML과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template의 역할이 반드시 필요하다.</p><p>Angular Template은 Angular JS의 여러 요소에 사용되었는데, Directives, Markup:, Filter, Form controls 등이 대표적이다.</p><h4 id="ng-include-directive"><a href="#ng-include-directive" class="headerlink" title="ng-include directive"></a>ng-include directive</h4><p>external HTML 조각을 HTML 내에 포함하기 위해 directive다.<br>사용방법은 간단하다. </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> ng-<span class="built_in">include</span>=<span class="string">"'menu.html'"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;ng-<span class="built_in">include</span> src=<span class="string">"'menu.html'"</span>&gt;&lt;/ng-<span class="built_in">include</span>&gt;</span><br></pre></td></tr></table></figure><p>두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.</p><p>그리고 한가지 알아두어야 할 점이 있다. ng-include directive를 사용하면 ng-controller를 사용할 때처럼 새로운 scope가 생성된다는 점이다.</p><h4 id="exercise-1"><a href="#exercise-1" class="headerlink" title="exercise"></a>exercise</h4><p>index.html</p><p>header, footer, js, css 등을 import하는 부분을 모두 index.html에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include를 이용하여 포함시킨다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"confusionApp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-include</span> <span class="attr">src</span>=<span class="string">"'menu.html'"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-include</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"row-footer"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>single page application을 구현하기 위해서는 데이터가 변함에 따라서 ng-include를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Single-Page-Applications&quot;&gt;&lt;a href=&quot;#Single-Page-Applications&quot; class=&quot;headerlink&quot; title=&quot;Single Page Applications&quot;&gt;&lt;/a&gt;Single Page Ap
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 2-2</title>
    <link href="http://blueshw.github.io/2016/08/28/2016-08-28-frontend-javascript-framework-angularjs-week2-2/"/>
    <id>http://blueshw.github.io/2016/08/28/2016-08-28-frontend-javascript-framework-angularjs-week2-2/</id>
    <published>2016-08-27T16:46:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task-Runners-Angular-Scope-Forms-and-Form-Validation-2"><a href="#Task-Runners-Angular-Scope-Forms-and-Form-Validation-2" class="headerlink" title="Task Runners, Angular Scope, Forms and Form Validation-2"></a>Task Runners, Angular Scope, Forms and Form Validation-2</h2><h3 id="Angular-Scope"><a href="#Angular-Scope" class="headerlink" title="Angular Scope"></a>Angular Scope</h3><p>스코프는 다음과 같이 정의된다.</p><blockquote><p>스코프는 application model과 관련된 object다.<br>This is at the core of Angular’s two-way data binding<br>view와 controller 사이를 연결해주는 역할을 한다.</p></blockquote><p>우선 controller에 scope를 만들어 속성을 부여한다. 그리고 view는 controller에 정의된 속성들을 bind 한다. 이런 방식을 통해 view와 controller의 sync를 맞춰준다.</p><h4 id="rootScope"><a href="#rootScope" class="headerlink" title="$rootScope"></a>$rootScope</h4><p>가장 상위의 scope다. app이 시작되면 만들어진다. 새로운 스코프는 ng-controller와 같은 directives 를 통해 만들수 있다. scope의 구조는 DOM의 구조와 비슷하다. 그렇기 때문에 child scope에서는 parent scope의 속성에 접근이 가능하지만 그 반대는 불가하다.</p><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 코드</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>, [])</span><br><span class="line">    .controller(<span class="string">'MenuController'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        this.tab = <span class="number">1</span>;</span><br><span class="line">        this.filtText = <span class="string">''</span>;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// scope 적용 코드</span></span><br><span class="line">angular.module(<span class="string">'confusionApp'</span>, [])</span><br><span class="line"><span class="comment">// scope 정의</span></span><br><span class="line">    .controller(<span class="string">'MenuController'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span><br><span class="line">        $scope.tab = <span class="number">1</span>;</span><br><span class="line">        $scope.filtText = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    )]&#125;;</span><br></pre></td></tr></table></figure><p>기존의 코드를 보면 this접근자를 통해서 속성들을 부여하고 있다. 여기서 스코프를 사용하면, this가 아닌 scope에 속성들을 부여함으로써 view단에서 scope를 통해 각 속성에 접근하게 된다. </p><h4 id="menu-html"><a href="#menu-html" class="headerlink" title="menu.html"></a>menu.html</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 기존 코드 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"MenuController as menuCtrl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;active:menuCtrl.isSelected(1)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(1)"</span> <span class="attr">aria-controls</span>=<span class="string">"all menu"</span></span></span></span><br><span class="line"><span class="xml">                     role="tab"&gt;The Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list tab-pane fade in active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span> <span class="attr">ng-repeat</span>=<span class="string">"dish in menuCtrl.dishes | filter:menuCtrl.filtText"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- scope 적용 코드 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"MenuController"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;active:isSelected(1)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"select(1)"</span> <span class="attr">aria-controls</span>=<span class="string">"all menu"</span></span></span></span><br><span class="line"><span class="xml">                     role="tab"&gt;The Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list tab-pane fade in active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span> <span class="attr">ng-repeat</span>=<span class="string">"dish in dishes | filter:filtText"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>기존코드에서는 menuController의 alias인 menuCtrl을 만들어 각 변수와 함수 앞에 붙여줬었다. 하지만 MenuController에 스코프가 적용되면서 해당 컨트롤러가 속한 DOM 내부에서는 컨트롤러 이름없이 변수/함수명으로 직접 접근이 가능해진다. 스코프를 적용함으로써 훨씬 코드가 간단해졌다. </p><h4 id="ng-show"><a href="#ng-show" class="headerlink" title="ng-show"></a>ng-show</h4><p>ng-show directive는 주어진 조건(true/false)에 따라서 해당 DOM 객체를 보여줄것인지(show) 말것인지(not show)를 결정해준다. 길게 설명할 필요없이 예제를 보자</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"toggleDetails()"</span> <span class="attr">class</span>=<span class="string">"btn btn-xs btn-primary pull-right"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;showDetails ? 'Hide Details':'Show Details'&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"showDetails"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.description&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>$scope.showDetails를 app.js에 설정해놓고 기본값으로 false를 지정해놓자. 그리고는 button을 하나 만들어 showDetails가 true이면 Hide Details 문구의 버튼을 노출하고 false면 Show Details 문구의 버튼을 노출한다. 리스트의 요소중에 description 부분에 ng-show directive를 선언하고 showDetails를 넣어주자. 그리고 버튼을 클릭하면(showDetails가 toggle 된다. app.js에 function을 만들어둔다.) showDetails가 true가 됐다가 false가 되면서 description이 보여졌다가 가려졌다가 할 것이다.</p><h3 id="Angular-Forms-and-Form-Validation"><a href="#Angular-Forms-and-Form-Validation" class="headerlink" title="Angular Forms and Form Validation"></a>Angular Forms and Form Validation</h3><h4 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h4><p>form은 유저에게 웹 사이트의 정보를 제공하는 가장 널리 상요되는 방법이다. 이번 강의에서는 angularJS에서 form을 이용하는 방법과 form의 validation 체크하는 방법에 대해서 알아보자.</p><p>form에서는 two-way data binding이 중요하게 사용되는데,<br>넘어가기 앞서 잠깐 짚고 넘어가야할게 있다.<br>ng-model의 개념이 약간 모호해서 한번 찾아봤다.</p><blockquote><p><em>ng-model</em></p><p>html의 input, select, textarea 와 같은 입력 요소에 값을 갱신하면 ng-model해 설정된 변수의 값도 변함<br>반대로 변수의 값이 바뀌면 input 등의 화면도 동일하게 변경된다.<br>이를 two-way data binding이라 한다.<br>참고로 form 필드에 설정된 ng-model의 속성을 필드 내에서 부여할 수도 있다.</p></blockquote><p>form과 자바스크립트 object간의 연결해주는 역할을 하는 것이 ng-model이다. ng-model에 설정된 변수가 변경되면 변경된 것을 html에 그대로 반영해준다.<br>예를들어보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript code</span></span><br><span class="line">.controller(<span class="string">'ContactController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">    $scope.feedback = &#123;<span class="attr">mychannel</span>:<span class="string">""</span>, <span class="attr">firstname</span>:<span class="string">""</span>,</span><br><span class="line">                       lastname:<span class="string">""</span>, <span class="attr">agree</span>:<span class="string">""</span>, <span class="attr">email</span>:<span class="string">""</span>&#125;;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// html code</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"firstname"</span> </span><br><span class="line">name=<span class="string">"firstname"</span> placeholder=<span class="string">"Enter First Name"</span> </span><br><span class="line">ng-model=<span class="string">"feedback.firstname"</span> required&gt;</span><br></pre></td></tr></table></figure><p>위와 같이 angularJS의 controller에 feedback이라는 object를 만들어두고, html에서 feedback.firstname을 ng-model attribute에 지정해두면, firstname이 변함에 따라서 자동으로 feedback.firstname의 값을 변경한다.</p><p>select의 경우에는 어떤가 보자</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript code</span></span><br><span class="line"><span class="keyword">var</span> channels = [&#123;<span class="keyword">value</span>:<span class="string">"tel"</span>, label:<span class="string">"Tel."</span>&#125;, &#123;<span class="keyword">value</span>:<span class="string">"Email"</span>, label:<span class="string">"Email"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// html code</span></span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">class</span>=<span class="string">"form-control"</span> ng-model=<span class="string">"feedback.mychannel"</span> </span><br><span class="line">ng-options=<span class="string">"channel.value as channel.label for channel in channels"</span>&gt;</span><br><span class="line">&lt;option <span class="keyword">value</span>=<span class="string">""</span>&gt;Tel. or Email?&lt;/option&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><p>우선 select의 item들을 저장해둘 자바스크립트 array 변수 channels를 만든다. 그리고 select 태그내에 ng-model, ng-options를 위와 같이 설정해두자. ng-model의 mychannel에는 유저가 선택된 channel의 value가 들어갈 것이다. ng-options directive에서 channels라는 자바스크립트 array를 for loop로 분해하여 각각 channel이라는 object를 가져온다. 그리고 channel.label이 option의 text로 들어가고, channel.value가 option 태그의 value로써 들어가게 된다. 즉, 만들어진 selectbox의 item 하나를 선택하게 되면, 해당 item의 value 가 feedback.mychannel 변수에 할당된다.</p><p>위의 방법을 이용하면 form의 다른요소나, 웹페이지의 상태에 따라 select의 항목을 동적으로 바꿀 수 있게 된다. </p><h4 id="Form-Validation"><a href="#Form-Validation" class="headerlink" title="Form Validation"></a>Form Validation</h4><p>우선 HTML5 form validation을 끄자<br>그리고 ng-submit directive를 이용하여 form이 submit될 때 sendFeedback함수를 호출하도록 하자.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="attribute">class</span>=<span class="string">"form-horizontal"</span> <span class="attribute">name</span>=<span class="string">"feedbackForm"</span> <span class="attribute">ng-submit</span>=<span class="string">"sendFeedback()"</span> novalidate&gt;</span><br></pre></td></tr></table></figure><p>validation 체크할때 field name을 이용하여 다음의 필드 속성들을 체크할 수 있다.</p><table><thead><tr><th>property</th><th>Description</th></tr></thead><tbody><tr><td>$pristine</td><td>true if form has not been changed (form의 변경사항이 없다면,)</td></tr><tr><td>$dirty</td><td>reverse of $pristine</td></tr><tr><td>$valid</td><td>true if form field/whole form is valid (form이 valid 하면,)</td></tr><tr><td>$invalid</td><td>reverse of $valid</td></tr></tbody></table><p>예를 들어보자.</p><ul><li>feedbackForm.firstName.$pristine : firstName 필드의 변경사항이 없으면 true</li><li>feebackForm.$valid : feedbackForm의 모든 항목이 valid 하면 true</li></ul><p>에러가 있을경우(invalid 하면) bootstrap의 class를 이용하자.</p><blockquote><p>.has-error, .has-warning, .has-success<br>.help-block to display helpful messages below the field</p></blockquote><h4 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">.controller(<span class="string">'ContactController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span><br><span class="line">    $scope.feedback = &#123;mychannel:<span class="string">""</span>, firstname:<span class="string">""</span>,</span><br><span class="line">                       lastname:<span class="string">""</span>, agree:<span class="string">""</span>, email:<span class="string">""</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> channels = [&#123;value:<span class="string">"tel"</span>, label:<span class="string">"Tel."</span>&#125;, </span><br><span class="line">                    &#123;values:<span class="string">"Email"</span>, label:<span class="string">"Email"</span>&#125;];</span><br><span class="line">    $scope.channels = channels;</span><br><span class="line">    $scope.invalidChannelSelection = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;])</span><br><span class="line">.controller(<span class="string">'FeedbackController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span><br><span class="line">    $scope.sendFeedback = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        console.log($scope.feedback);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($scope.feedback.agree &amp;&amp; ($scope.feedback.mychannel == <span class="string">""</span>)) &#123;</span><br><span class="line">            $scope.invalidChannelSelection = <span class="keyword">true</span>;</span><br><span class="line">            console.log(<span class="string">'incorrent'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $scope.invalidChannelSelection = <span class="keyword">false</span>;</span><br><span class="line">            $scope.feedback = &#123;</span><br><span class="line">                mychannel:<span class="string">""</span>, firstname:<span class="string">""</span>,</span><br><span class="line">                lastname:<span class="string">""</span>, agree:<span class="keyword">false</span>, email:<span class="string">""</span> </span><br><span class="line">            &#125;;</span><br><span class="line">            $scope.feedback.mychannel = <span class="string">""</span>;</span><br><span class="line">            $scope.feedbackForm.$setPristine();</span><br><span class="line">            console.log($scope.feedback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br><span class="line">    </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="contactus-html"><a href="#contactus-html" class="headerlink" title="contactus.html"></a>contactus.html</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"confusionApp"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">ng-controller</span>=<span class="string">"ContactController"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">name</span>=<span class="string">"feedbackForm"</span> <span class="attr">ng-submit</span>=<span class="string">"sendFeedback()"</span> <span class="attr">novalidate</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : feedbackForm.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"firstname"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"firstname"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">placeholder</span>=<span class="string">"Enter First Name"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.firstname"</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedback.firstname.$error.required &amp;&amp; !feedbackForm.firstname.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Your First name is required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : feedbackForm.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lastname"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"lastname"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">placeholder</span>=<span class="string">"Enter Last Name"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.lastname"</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedback.lastname.$error.required &amp;&amp; !feedbackForm.lastname.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Your Last name is required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"telnum"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Contact Tel.<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-5 col-sm-4 col-md-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>(<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"areacode"</span> <span class="attr">name</span>=<span class="string">"areacode"</span> <span class="attr">placeholder</span>=<span class="string">"Area code"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.tel.areacode"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-7 col-sm-6 col-md-7"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"telnum"</span> <span class="attr">name</span>=<span class="string">"telnum"</span> <span class="attr">placeholder</span>=<span class="string">"Tel. number"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.tel.number"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"emailid"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"emailid"</span> <span class="attr">name</span>=<span class="string">"emailid"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.email"</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine"</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-remove form-control-feedback"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedbackForm.emailid.$invalid &amp;&amp; !feedbackForm.emailid.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Enter a valid email address.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"feedbackForm.emailid.$error.required &amp;&amp; !feedbackForm.emailid.$pristine"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Enter a valid email address.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; 'has-error' : invalidChannelSelection &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox col-sm-5 col-sm-offset-2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"approve"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">ng-model</span>=<span class="string">"feedback.agree"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">strong</span>&gt;</span>May we contact you?<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3 col-sm-offset-1"</span> <span class="attr">ng-show</span>=<span class="string">"feedback.agree"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.mychannel"</span> <span class="attr">ng-options</span>=<span class="string">"channel.value as channel.label for channel in channels"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>Tel. or Email?<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"invalidChannelSelection"</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Select an option.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"feedback"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Your Feedback<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"feedback"</span> <span class="attr">name</span>=<span class="string">"feedback"</span> <span class="attr">rows</span>=<span class="string">"12"</span> <span class="attr">ng-model</span>=<span class="string">"feedback.comments"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-disabled</span>=<span class="string">"feedbackForm.$invalid"</span>&gt;</span>Send Feedback<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Your Current Feedback:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;feedback.firstname&#125;</span><span class="xml">&#125; </span><span class="template-variable">&#123;&#123;feedback.lastname | uppercase &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Contact Tel.: (</span><span class="template-variable">&#123;&#123;feedback.tel.areacode&#125;</span><span class="xml">&#125;)</span><span class="template-variable">&#123;&#123;feedback.tel.number&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Contact Email: </span><span class="template-variable">&#123;&#123;feedback.email&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"feedback.agree"</span>&gt;</span>Contact by:</span><span class="template-variable">&#123;&#123;feedback.mychannel&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Comments: </span><span class="template-variable">&#123;&#123;feedback.comments&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Task-Runners-Angular-Scope-Forms-and-Form-Validation-2&quot;&gt;&lt;a href=&quot;#Task-Runners-Angular-Scope-Forms-and-Form-Validation-2&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 2-1</title>
    <link href="http://blueshw.github.io/2016/08/25/2016-08-25-frontend-javascript-framework-angularjs-week2-1/"/>
    <id>http://blueshw.github.io/2016/08/25/2016-08-25-frontend-javascript-framework-angularjs-week2-1/</id>
    <published>2016-08-24T17:30:10.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task-Runners-Angular-Scope-Forms-and-Form-Validation-1"><a href="#Task-Runners-Angular-Scope-Forms-and-Form-Validation-1" class="headerlink" title="Task Runners, Angular Scope, Forms and Form Validation-1"></a>Task Runners, Angular Scope, Forms and Form Validation-1</h2><h3 id="Web-Tools-Grunt-and-Gulp"><a href="#Web-Tools-Grunt-and-Gulp" class="headerlink" title="Web Tools: Grunt and Gulp"></a>Web Tools: Grunt and Gulp</h3><h4 id="Task-Runners"><a href="#Task-Runners" class="headerlink" title="Task-Runners"></a>Task-Runners</h4><p>웹개발을 하다보면 반복적으로 처리해야하는 태스크가 많이 있다. DRY(do not repeat yourself) 원칙에 따라 태스크를 자동화하기 빌드툴을 사용할 필요가 있다.</p><p>CSS에서 보면 Sass나 Less로 컴파일하거나, 어떤 vender prefixes를 추가하거나 Minification(spaces, newlines, comments 등의 불필요한 캐릭터 삭제)하거나 Concatenation 등의 반복적이 Tasks가 있다.</p><p>Javascript의 경우에는, JSHint를 이용한 자바스크립트 에러체킹이나 Concatenation, Uglification(minification + mangling(변수명 char 하나로 줄이기)) 등이 있겠다.</p><p>이 외에도 Image 용량 최적화, 태스크 rerunning, 변경된 사항 반영하기 위한 server and Livereload, 파일 변경, 테스팅 등의 반복적인 태스크가 있다.</p><p>위에서 살펴본 반복적인 태스크를 Grunt, Gulp 등의 Task Runners를 이용해 자동화 할 수 있다.</p><h3 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h3><p>Grunt는 configuration 기반의 태스크 러너이다. 우선 install 하자. -g 옵션을 주어 global하게 사용할 수 있도록 한다.</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p>Grunt의 설정팔일은 Gruntfile.js로 정의한다. 대략적인 구조를 살펴보면 아래와 같다.<br>function의 argument에 grunt 객체가 들어가고 그 아래에 필요한 코드를 추가한다. 자세한 내용은 차차 알아보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"><span class="comment">// do requires here</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'jit-grunt'</span>)(grunt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// do grunt task configurations here</span></span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register tasks here</span></span><br><span class="line">grunt.registerTask(<span class="string">'build'</span>, [<span class="string">'jshint'</span>]);</span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="File-Globbing-Patterns"><a href="#File-Globbing-Patterns" class="headerlink" title="File Globbing Patterns"></a>File Globbing Patterns</h4><p>Grunt는 File Globbing Patterns를 사용한다. File Globbing Patterns이란 다음의 내용을 말한다.</p><ul><li>* 문자열, but not /</li><li>? 문자 하나, but not /</li><li>** 문자열 including /</li><li>{} comma로 or 를 표현함</li><li>! 패턴매치가 negative함 </li></ul><p>몇가지 예제를 살펴보자<br>우선 jshint와 jshint-stylish 모듈을 install 한다.<br>jshint는 자바스크립트의 문법을 체크해주는 모듈이다. 세미콜론이 빠졌거나, 괄호가 빠져 있는것 처럼 문법오류나 개선할 부분이 필요한 것을 체크해준다. jshint-stylish는 jshint의 메세지를 좀 더 잘 보여주기 위한 스타일을 제공하는 모듈이다.</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>grunt-contrib-<span class="keyword">jshint </span>--save-dev</span><br><span class="line">npm <span class="keyword">install </span><span class="keyword">jshint-stylish </span>--save-dev</span><br></pre></td></tr></table></figure><p>그리고 Configuration을 다음과 같이 작성하자.<br>Configuration 파일은 프로젝트 root 폴더에서 Gruntfile.js를 만들어 아래 내용을 저장한다.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jshint</span>: &#123;</span><br><span class="line"><span class="attribute">options</span>: &#123;</span><br><span class="line"><span class="attribute">jshintrc</span>: <span class="string">'.jshintrc'</span>,</span><br><span class="line"><span class="attribute">reporter</span>: require(<span class="string">'jshint-stylish'</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attribute">all</span>: &#123;</span><br><span class="line"><span class="comment">// 실제 체크할 자바스크립트 파일의 경로를 지정한다.</span></span><br><span class="line"><span class="comment">// Gruntfile.js와 app/scripts의 모든 .js 파일을 검사하겠다는 의미다.</span></span><br><span class="line"><span class="attribute">src</span>: [<span class="string">'Gruntfile.js'</span>, <span class="string">'app/scripts/&#123;,*/&#125;*.js'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설정파일은 자바스크립트 객체 형식으로 구성된다. options는 jshint 설정파일과 그외 포맷을 위한 style 모듈이 reporter로 정의되어 있다. hshintrc는 jshint 설정파일이다. all 부분은 jshint를 적용할 자바스크트 파일을 Globbing 패턴으로 지정하였다.</p><h4 id="Greating-a-Distribution-Folder"><a href="#Greating-a-Distribution-Folder" class="headerlink" title="Greating a Distribution Folder"></a>Greating a Distribution Folder</h4><p>수많은 Grunt관련 모듈과 css, js 파일들을 설치함으로써 프로젝트 구성이 점점 복잡해지고 있다. 그래서 Distribution Folder를 만들어 꼭 필요한 모듈만 이용하는 웹사이트를 만들어 보자.</p><p>다음의 모듈을 설치한다.<br>global(-g) 옵션이 없는 설치는 local 설치이므로 모듈을 사용할 프로젝트 디렉토리에서 실행한다.</p><h4 id="usemin-module"><a href="#usemin-module" class="headerlink" title="usemin module"></a>usemin module</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 조건에 맞는 모든 파일을 원하는 폴더(여기서는 dist)로 복사한다.</span></span><br><span class="line">npm install grunt-contrib-copy --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당 폴더의 clean out 한다. rebuild를 위한 초반 작업이다. 그렇기 때문에 가장 먼저 실행해야한다.</span></span><br><span class="line">npm install grunt-contrib-clean --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js, css 파일들을 하나로 합쳐준다.</span></span><br><span class="line">npm install grunt-contrib-concat --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css 파일 minification</span></span><br><span class="line">npm install grunt-contrib-cssmin --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 자바스크립트 변수를 문자열 =&gt; 문자로 변경한다.</span></span><br><span class="line">npm install grunt-contrib-uglify --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// minification한 뒤, css, js 파일을 버전업한다. (브라우저 캐싱 대비)</span></span><br><span class="line"><span class="comment">// 해싱 알고리즘과 length등을 선택할 수 있다.</span></span><br><span class="line">npm insatll grunt-filerev --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css, js 파일을 minification 해준다.</span></span><br><span class="line"><span class="comment">// useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin의 순서로 태스크가 진행된다. </span></span><br><span class="line">npm insatll grunt-usemin --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>usemin은 js, css 파이릉 minification 하기 위한 모듈이다. usemin은 독자적으로 동작하지 않고 여러가지 모듈을 거쳐가는데 대체로 다음과 같다.</p><blockquote><p>useminPrepare -&gt; concat -&gt; cssmin -&gt; uglify -&gt; filerev -&gt; usemin</p></blockquote><p>우선 useminPrepare는 html 주석 처리된 부분을 기준으로 css, js 각각의 하나의 파일로 합치기 위한 준비를 한다. concat을 통해 css, js 파일들을 각각 하나로 합쳐준다. 그리고 cssmin, uglify 모듈을 통해 css, js 파일을 minification 하고 filerev로 버전관리를 한다. 마지막으로 usemin이 html 파일에 이전의 모든 모듈이 행한 결과를 반영한다.</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>original 파일의 변경이 발생하였을때 rerun하기 위한 모듈이다.<br>설정된 모든 파일중에 하나라도 변경이 일어나면 즉시 reload한다.<br>reload는 모든 파일들을 복사하는것과 같다고 보면 된다.<br>그런데, js, css 파일들은 copy를 예외처리하는데, usemin 모듈에서 먼저 빌드처리 되기 때문에 watch에서는 제외된다.</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-contrib-watch --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>브라우저에서 dist 폴더의 특정 html 파일(보통 index.html)이 실행되도록 한다.<br>watch 모듈과 같이 사용하면 이렇게 사용할 수 있다.</p><blockquote><p>파일 변경 -&gt; livereload (build and copy) -&gt; open(update) browse</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> grunt-contlib-<span class="keyword">connect</span> <span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><h4 id="Gruntfile-js"><a href="#Gruntfile-js" class="headerlink" title="Gruntfile.js"></a>Gruntfile.js</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">module.exports = <span class="keyword">function</span> (grunt) &#123;</span><br><span class="line"></span><br><span class="line">require(<span class="string">'time-grunt'</span>)(grunt);</span><br><span class="line">require(<span class="string">'jit-grunt'</span>)(grunt, &#123;</span><br><span class="line">useminPrepare: <span class="string">'grunt-usemin'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line">pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">jshint: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">jshintrc: <span class="string">'.jshintrc'</span>,</span><br><span class="line">reporter: require(<span class="string">'jshint-stylish'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">all: &#123;</span><br><span class="line">src: [</span><br><span class="line"><span class="string">'Gruntfile.js'</span>,</span><br><span class="line"><span class="string">'app/scripts/&#123;,*/&#125;*.js'</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">useminPrepare: &#123;</span><br><span class="line">html: <span class="string">'app/menu.html'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">dest: <span class="string">'dist'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">concat: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">separator: <span class="string">';'</span></span><br><span class="line">&#125;,</span><br><span class="line">dist: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">uglify: &#123;</span><br><span class="line">dist: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">cssmin: &#123;</span><br><span class="line">dist: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">filerev: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">encoding: <span class="string">'utf8'</span>,</span><br><span class="line">algorithm: <span class="string">'md5'</span>,</span><br><span class="line">length: <span class="number">20</span></span><br><span class="line">&#125;,</span><br><span class="line">release: &#123;</span><br><span class="line">files: [&#123;</span><br><span class="line">src: [</span><br><span class="line"><span class="string">'dist/scripts/*js'</span>,</span><br><span class="line"><span class="string">'dist/styles/*.css'</span></span><br><span class="line">]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">usemin: &#123;</span><br><span class="line">html: [<span class="string">'dist/*.html'</span>],</span><br><span class="line">css: [<span class="string">'dist/styles/*.css'</span>],</span><br><span class="line">options: &#123;</span><br><span class="line">assetsDirs: [<span class="string">'dist'</span>, <span class="string">'dist/styles'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">copy: &#123;</span><br><span class="line">dist: &#123;</span><br><span class="line">cwd: <span class="string">'app'</span>,</span><br><span class="line">src: [<span class="string">'**'</span>, <span class="string">'!styles/**/*.css'</span>, <span class="string">'!scripts/**/*.js'</span>],</span><br><span class="line">dest: <span class="string">'dist'</span>,</span><br><span class="line">expand: true</span><br><span class="line">&#125;,</span><br><span class="line">fonts: &#123;</span><br><span class="line">files:[</span><br><span class="line">&#123;</span><br><span class="line">expand: true,</span><br><span class="line">dot: true,</span><br><span class="line">cwd: <span class="string">'bower_components/bootstrap/dist'</span>,</span><br><span class="line">src: [<span class="string">'fonts/*.*'</span>],</span><br><span class="line">dest: <span class="string">'dist'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">expand: true,</span><br><span class="line">dot: true,</span><br><span class="line">cwd: <span class="string">'bower_components/font-awesome'</span>,</span><br><span class="line">src: [<span class="string">'fonts/*.*'</span>],</span><br><span class="line">dest: <span class="string">'dist'</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">copy: &#123;</span><br><span class="line">files: [<span class="string">'app/**'</span>, <span class="string">'!app/**/*.css'</span>, <span class="string">'!app/**/*.js'</span>],</span><br><span class="line">tasks: [<span class="string">'build'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">scripts: &#123;</span><br><span class="line">files: [<span class="string">'app/scripts/app.js'</span>],</span><br><span class="line">tasks: [<span class="string">'build'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">styles: &#123;</span><br><span class="line">files: [<span class="string">'app/styles/mystyles.css'</span>],</span><br><span class="line">tasks:[<span class="string">'build'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">livereload: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">livereload: <span class="string">'&lt;%= connect.options.livereload %&gt;'</span></span><br><span class="line">&#125;,</span><br><span class="line">files: [</span><br><span class="line"><span class="string">'app/&#123;,*/&#125;*.html'</span>,</span><br><span class="line"><span class="string">'.tmp/styles/&#123;,*/&#125;*.css'</span>,</span><br><span class="line"><span class="string">'app/images/&#123;,*/&#125;*.&#123;png,jpg,jpeg,gif,webp,svg&#125;'</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">connect: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">port: <span class="number">9000</span>,</span><br><span class="line">hostname: <span class="string">'localhost'</span>,</span><br><span class="line">livereload: <span class="number">35729</span></span><br><span class="line">&#125;,</span><br><span class="line">dist: &#123;</span><br><span class="line">options: &#123;</span><br><span class="line">open: true, </span><br><span class="line">base: &#123;</span><br><span class="line">path: <span class="string">'dist'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">index: <span class="string">'menu.html'</span>,</span><br><span class="line">maxAge: <span class="number">300000</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">clean: &#123;</span><br><span class="line">build: &#123;</span><br><span class="line">src: [<span class="string">'dist/'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 태스크 등록</span><br><span class="line">// 순서가 중요하다.</span><br><span class="line">// jshint로 모든 .js 파일을 검사하게 된다.</span><br><span class="line">grunt.registerTask(<span class="string">'build'</span>, [</span><br><span class="line"><span class="string">'clean'</span>,</span><br><span class="line"><span class="string">'jshint'</span>,</span><br><span class="line"><span class="string">'useminPrepare'</span>,</span><br><span class="line"><span class="string">'concat'</span>,</span><br><span class="line"><span class="string">'cssmin'</span>,</span><br><span class="line"><span class="string">'uglify'</span>,</span><br><span class="line"><span class="string">'copy'</span>,</span><br><span class="line"><span class="string">'filerev'</span>,</span><br><span class="line"><span class="string">'usemin'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">// 순서가 중요하다. 먼저 build, 다음에는 브라우져 오픈, watch</span><br><span class="line">// watch가 마지막에 실행되므로, 파일 변경을 감지하면 build, 브라우저 오픈, 다시 watch 와 같은 순서로 진행된다.</span><br><span class="line">grunt.registerTask(<span class="string">'serve'</span>, [<span class="string">'build'</span>,<span class="string">'connect:dist'</span>,<span class="string">'watch'</span>]);</span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><p>Grunt는 Configuration기반의 태스크 러너였다면, 반대로 Gulp는 코드 기반의 태스크 러너 이다. Gulp는 Grunt 처럼 태스크를 실행하기 위한 중간 파일을 만들지 않고 NodeJS streams을 사용하여 복잡한 파이프라인 형태로 실행된다(무슨 말이지는 잘 모르겠지만, 예제를 보면 알겠지). </p><p>일단 global로 설치하자.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g gulp</span><br></pre></td></tr></table></figure><p>Grunt 예제와 비슷하게 동작하는 예제를 실행하기 위해 다음과 같은 plugins 을 설치한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> </span><br><span class="line">gulp-jshint jshint-stylish</span><br><span class="line">gulp-imagemin gulp-<span class="keyword">concat</span> gulp-uglify gulp-minify-css gulp-usemin</span><br><span class="line">gulp-<span class="keyword">cache</span> gulp-rev gulp-<span class="keyword">rename</span> gulp-notify</span><br><span class="line">browser-<span class="keyword">sync</span> del</span><br><span class="line"><span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><p>플러그인을 로드하는 방법은 다음과 같다.<br>직접 각 플러그인을 로드해도 되지만, package.json 파일 형태로 저장할 수도 있다.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">  jshint = <span class="keyword">require</span>(<span class="string">'gulp-jshint'</span>)</span><br><span class="line">  sylish = <span class="keyword">require</span>(<span class="string">'jshint-stylish'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="params">...</span></span><br></pre></td></tr></table></figure><h4 id="Gulp-Streams"><a href="#Gulp-Streams" class="headerlink" title="Gulp Streams"></a>Gulp Streams</h4><p>Gulp Streams는 nodeJS streams를 사용하여 파이프라인을 구성하는데, 파이프 라인이란 하나의 function의 결과가 다음 function으로 그대로 전달되는 연쇄적인 명령셋을 말한다. 예제를 살펴보자</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gulp.src(<span class="string">'app/scripts/**/*.js'</span>)</span><br><span class="line">.pipe(jshint())</span><br><span class="line">.pipe(jshint.reporter(stylish));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>우선 걸프 태스크를 생성하고 그 안에서 소스를 선택하고 jshint를 생성하고 스타일을 적용해주는 일련의 명령들을 pipe라는 function을 이용하여 연결하였다.</p><p>Watch 태스크 예제를 살펴보자</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'browser-sync'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gulp.watch(<span class="string">'&#123;app/scripts/**/*.js, app/style/**/*.css, app/**/*.html&#125;'</span>, [<span class="string">'usemin'</span>]);</span><br><span class="line">gulp.watch(<span class="string">'app/images/**/*'</span>, [<span class="string">'imagemin'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>태스크의 두번째 인자를 보면, browser-sync가 대괄호로 묶여져 있다. 이 의미는 browser-sync는 watch 태스크에 종속적이라는 말이다. 즉, watch 태스크가 실행되면 자동으로 browser-sync가 실행된다.</p><h4 id="Default-Task"><a href="#Default-Task" class="headerlink" title="Default Task"></a>Default Task</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">gulp.start(<span class="string">'usemin'</span>, <span class="string">'imagemin'</span>, <span class="string">'copyfonts'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>default 태스크는 콘솔창에서 gulp 라고 입력하면 실행되는 태스크이다. clean 태스크가 연쇄적으로 발생하게 되고, 내부에서는 서로 dependency가 없는 usemin, imagemin, copyfonts가 동시에 실행된다.</p><h4 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h4><p>콤마(,)와 띄어쓰기에 유의해야 한다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</span><br><span class="line">jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</span><br><span class="line">stylish = <span class="built_in">require</span>(<span class="string">'jshint-stylish'</span>),</span><br><span class="line">uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">usemin = <span class="built_in">require</span>(<span class="string">'gulp-usemin'</span>),</span><br><span class="line">imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</span><br><span class="line">rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</span><br><span class="line">notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</span><br><span class="line">cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</span><br><span class="line">changed = <span class="built_in">require</span>(<span class="string">'gulp-changed'</span>),</span><br><span class="line">rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>),</span><br><span class="line">browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>),</span><br><span class="line">del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'app/scripts/**/*.js'</span>)</span><br><span class="line">.pipe(jshint())</span><br><span class="line">.pipe(jshint.reporter(stylish));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'usemin'</span>, [<span class="string">'jshint'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'./app/menu.html'</span>)</span><br><span class="line">.pipe(usemin(&#123;</span><br><span class="line">css:[minifycss(),rev()],</span><br><span class="line">js: [uglify(),rev()]</span><br><span class="line">&#125;))</span><br><span class="line">.pipe(gulp.dest(<span class="string">'dist/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'imagemin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> del([<span class="string">'dist/images'</span>]), gulp.src(<span class="string">'app/images/**/*'</span>)</span><br><span class="line">.pipe(cache(imagemin(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span>, <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;)))</span><br><span class="line">.pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">.pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Images task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> del([<span class="string">'dist'</span>])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'copyfonts'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.src(<span class="string">'./bower_components/font-awesome/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/fonts'</span>));</span><br><span class="line">gulp.src(<span class="string">'./bower_components/bootstrap/dist/fonts/**/*.&#123;ttf,woff,eof,svg&#125;*'</span>)</span><br><span class="line">.pipe(gulp.dest(<span class="string">'./dist/fonts'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, [<span class="string">'browser-sync'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.watch(<span class="string">'&#123;app/scripts/**/*.js,app/styles/**/*.css,app/**/*.html&#125;'</span>, [<span class="string">'usemin'</span>]);</span><br><span class="line">gulp.watch(<span class="string">'app/images/**/*'</span>, [<span class="string">'imagemin'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, [<span class="string">'default'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> files = [</span><br><span class="line"><span class="string">'app/**/*.html'</span>,</span><br><span class="line"><span class="string">'app/styles/**/*.css'</span>,</span><br><span class="line"><span class="string">'app/images/**/*.png'</span>,</span><br><span class="line"><span class="string">'app/scripts/**/*.js'</span>,</span><br><span class="line"><span class="string">'dist/**/*'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">browserSync.init(files, &#123;</span><br><span class="line">server: &#123;</span><br><span class="line">baseDir: <span class="string">"dist"</span>,</span><br><span class="line">index: <span class="string">"menu.html"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, browserSync.reload);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">gulp.start(<span class="string">'usemin'</span>, <span class="string">'imagemin'</span>, <span class="string">'copyfonts'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Task-Runners-Angular-Scope-Forms-and-Form-Validation-1&quot;&gt;&lt;a href=&quot;#Task-Runners-Angular-Scope-Forms-and-Form-Validation-1&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>[coursera] AngularJS week 1</title>
    <link href="http://blueshw.github.io/2016/08/18/2016-08-18-frontend-javascript-framework-angularjs-week1/"/>
    <id>http://blueshw.github.io/2016/08/18/2016-08-18-frontend-javascript-framework-angularjs-week1/</id>
    <published>2016-08-18T14:10:50.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Full-Stack-Web-Development-The-Big-Picture"><a href="#Full-Stack-Web-Development-The-Big-Picture" class="headerlink" title="Full-Stack Web Development: The Big Picture"></a>Full-Stack Web Development: The Big Picture</h2><h3 id="Three-Tier-Architecture"><a href="#Three-Tier-Architecture" class="headerlink" title="Three Tier Architecture"></a>Three Tier Architecture</h3><p>보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.</p><ul><li>Presentaion Layer : HTML, CSS, JS</li><li>Business Layer : Ruby, Python, Java, C++</li><li>Data Access Layer : DBMS</li></ul><p>반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer에는 자바스크립트 프레임웍인 AngularJS, business layer에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB를 사용하여 개발한다.</p><p>이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.</p><h3 id="Course-Overview"><a href="#Course-Overview" class="headerlink" title="Course Overview"></a>Course Overview</h3><p>이번 강의에서 다루는 주제는 다음과 같다.</p><ul><li>AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)</li><li>Web Tools : Grunt, Gulp, Yo and Yeoman</li></ul><h2 id="Introduction-to-AngularJS"><a href="#Introduction-to-AngularJS" class="headerlink" title="Introduction to AngularJS"></a>Introduction to AngularJS</h2><h3 id="Front-End-JavaScript-Frameworks-OverView"><a href="#Front-End-JavaScript-Frameworks-OverView" class="headerlink" title="Front-End JavaScript Frameworks OverView"></a>Front-End JavaScript Frameworks OverView</h3><blockquote><p>소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery가 있다.</p><p>소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS나 durandal, backbone 등이 대표적이다.</p></blockquote><h4 id="10가지-Javascript-Framework"><a href="#10가지-Javascript-Framework" class="headerlink" title="10가지 Javascript Framework"></a>10가지 Javascript Framework</h4><ul><li>Angular : one of the three Major JS framework</li><li>Ember : one of the three Major JS framework</li><li>Backbone : one of the three Major JS framework</li><li>React : 프레임웍이라기 보다 라이브러리에 가까움</li><li>Aurelia</li><li>Meteor : 요즘 각광받기 시작</li><li>Polymer</li><li>Knockout</li><li>Vue</li><li>Mercury</li></ul><h4 id="3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1"><a href="#3가지-메이저-JS-Frameworks-비교-3-gt-2-gt-1" class="headerlink" title="3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)"></a>3가지 메이저 JS Frameworks 비교 (3 &gt; 2 &gt; 1)</h4><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">Ember</th><th style="text-align:center">Angular</th><th style="text-align:center">Backbone</th></tr></thead><tbody><tr><td style="text-align:left">Opinionated</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">Ease of Use</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">Learning Curve</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:left">Popularity</td><td style="text-align:center">-</td><td style="text-align:center">3</td><td style="text-align:center">-</td></tr></tbody></table><h3 id="Introduction-to-AngularJS-1"><a href="#Introduction-to-AngularJS-1" class="headerlink" title="Introduction to AngularJS"></a>Introduction to AngularJS</h3><p>HTML은 static한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular를 이용하면 다음과 같은 이점을 가질 수 있다.</p><blockquote><p>Solving the impedance mismatch</p></blockquote><p>back end 데이터와 static content를 출력하는데 HTML만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다.</p><blockquote><p>Designed with CRUD applications (data-driven) in mind</p></blockquote><p>데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD에 대해서는 다음 모듈에서 자세하게 다루기로 한다.</p><blockquote><p>Declarative approach</p></blockquote><p>Angular는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘…)</p><h4 id="Angular-Vocabulary"><a href="#Angular-Vocabulary" class="headerlink" title="Angular Vocabulary"></a>Angular Vocabulary</h4><p>앞으로 배울 Angular의 문법은 아래와 같은 것들이 있다.</p><ul><li>Two-way Data Binding</li><li>Scope</li><li>Directives</li><li>Templates</li><li>Routing</li><li>Testing</li><li>Modules</li><li>Controllers</li><li>Filters</li><li>Factory</li><li>Service</li><li>Provider</li></ul><p>우선은 Two-way Data Binding과 Directives에 대해서 먼저 알아보자</p><h4 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h4><p>Angular Directives는 ng-<em> or data-ng-</em> 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자</p><ul><li><p>ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.</p></li><li><p>ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression을 Evaluation한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array도 사용가능하다.</p></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-init</span>=<span class="string">"index=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-init</span>=<span class="string">"dish=</span></span></span><span class="template-variable">&#123;name:'example', ...&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>ng-model : input value를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Comment: </span><span class="template-variable">&#123;&#123;dish.comment&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Type your comment:</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"dish.comment"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>dish object의 comment는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag에서 ng-model 속성을 부여하고 이미 정의된 dish.comment를 입력하면 Two-way data binding에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.</p><p>양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding이라고 부르는 것 같다.</p><ul><li>ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.</li></ul><h4 id="Angular-Expressions"><a href="#Angular-Expressions" class="headerlink" title="Angular Expressions"></a>Angular Expressions</h4><ul><li><p>Evaluated against an Angular scope object<br>Angular 스코프에 맞게 value가 평가된다.</p></li><li><p>No conditionals, loops, or exceptions<br>위의 사항들은 expression으로 사용이 불가하다.</p></li><li><p>Expressions enclosed in <br>중괄호 두개를 겹쳐서 사용한다.</p></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>6 + 5 = </span><span class="template-variable">&#123;&#123; 6 + 5 &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123; dish.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Models-Views-and-Controllers"><a href="#Models-Views-and-Controllers" class="headerlink" title="Models, Views and Controllers"></a>Models, Views and Controllers</h2><h3 id="The-Model-View-Controller-Framework"><a href="#The-Model-View-Controller-Framework" class="headerlink" title="The Model View Controller Framework"></a>The Model View Controller Framework</h3><blockquote><p>Design pattern is ell-documented solution to a recurring problem</p></blockquote><p>디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.</p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>MVC는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다. </p><ul><li><p>Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.</p></li><li><p>View : 사용자에게 보여지는 영역이다. view는 유저와 상호작용을 위해 form에 모델정보를 redering 한다. 하나의 model로 서로 다른 목적의 뷰를 만들수도 있다.  </p></li><li><p>Controller : View와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다. </p></li></ul><h4 id="MVVM-Model-View-View-Model"><a href="#MVVM-Model-View-View-Model" class="headerlink" title="MVVM (Model View View-Model)"></a>MVVM (Model View View-Model)</h4><p>MVC 패턴의 파생된 형태중 하나인 MVVM은 Model, View, View-Model로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model과 View 사이에서 데이터 바인딩이 이루어진다.  </p><h3 id="Angular-Modules-and-Controllers"><a href="#Angular-Modules-and-Controllers" class="headerlink" title="Angular Modules and Controllers"></a>Angular Modules and Controllers</h3><p>일반적으로 Angular도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular가 MVVM이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.</p><h4 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h4><p>Angular Modules은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array인데 나중에 설명할 것이다. 아래같은 경우 ngApp이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ngApp</span>=<span class="string">"confusionApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'confusionApp'</span>,[]);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Angular-Controller"><a href="#Angular-Controller" class="headerlink" title="Angular Controller"></a>Angular Controller</h4><p>Angular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"menuController as menuCtrl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'confusionApp'</span>, []);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">'menuController'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> dishes = [item, ... ];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.dishes = dishes;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 <strong>this.dishes = dishes</strong> 부분은 아마도 div 태그 내에서 사용가능한 dishes를 정의해주기 위해 자바스크립트 오브젝트인 dishes를 this.dishes에 할당해준게 아닌가 생각된다.</p><h2 id="Angular-Filters"><a href="#Angular-Filters" class="headerlink" title="Angular Filters"></a>Angular Filters</h2><p>필터는 서버사이드 또는 클라이언트에서 만들어진 data를 end user에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"media-headgin"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.name&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger label-xs"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.label&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- currency 필터는 price에 $를 붙여준다.--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.price | currency&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.description&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Angluar의-Built-in-Filters"><a href="#Angluar의-Built-in-Filters" class="headerlink" title="Angluar의 Built-in Filters"></a>Angluar의 Built-in Filters</h4><ul><li>uppercase / lowercase : converts the text</li><li>currency : $를 붙여준다.</li><li>date : 날짜 포맷을 변경한다.</li><li>filter : 특정 조건에 맞게 array의 서브셋을 리턴한다.</li><li>orderBy : 조건에 맞게 정렬한다. </li><li>json, limitTo 등도 있다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- filter 예제, HTML 코드 --&gt;</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span>="<span class="title">media</span>" <span class="title">ng</span>-<span class="title">repeat</span>="<span class="title">dish</span> <span class="title">in</span> <span class="title">menuCtrl</span>.<span class="title">dishes</span> | <span class="title">filter</span>:<span class="type">menuCtrl.filtText"&gt;...</span>&lt;<span class="type">/li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- javascript 코드 --&gt;</span><br><span class="line"><span class="keyword">var</span> filtText = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.select = function(setTab) &#123;</span><br><span class="line"><span class="keyword">this</span>.tab = setTab;</span><br><span class="line"><span class="keyword">if</span> (setTab === <span class="number">2</span>)</span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">"appetizer"</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (setTab === <span class="number">3</span>)</span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">"mains"</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (setTab === <span class="number">4</span>)</span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">"dessert"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">this</span>.filtText = <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 HTML과 javascript 코드를 작성한다.<br>그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).<br>그럼 각 탭 을 눌렀을때 filtText가 특정 문자열로 변경된다.<br>미리 적용해놓은 filter에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.</p><h2 id="Excercise-Code"><a href="#Excercise-Code" class="headerlink" title="Excercise Code"></a>Excercise Code</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"confusionApp"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- The above 3 meta tags *must* come first in the head; any other head</span></span></span><br><span class="line"><span class="xml">         content must come *after* these tags --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ristorante Con Fusion: Menu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Bootstrap --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bower_components/bootstrap/dist/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bower_components/bootstrap/dist/css/bootstrap-theme.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../bower_components/font-awesome/css/font-awesome.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles/bootstrap-social.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"styles/mystyles.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://oss.maxcdn.com/respond/1.4.2/respond.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-content"</span> <span class="attr">ng-controller</span>=<span class="string">"menuController as menuCtrl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(1)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(1)"</span> <span class="attr">aria-controls</span>=<span class="string">"all menu"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>The Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(2)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(2)"</span> <span class="attr">aria-controls</span>=<span class="string">"appetizers"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>Appetizers<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(3)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(3)"</span> <span class="attr">aria-controls</span>=<span class="string">"mains"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>Mains<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:menuCtrl.isSelected(4)&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"menuCtrl.select(4)"</span> <span class="attr">aria-controls</span>=<span class="string">"desserts"</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span>Desserts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list tab-pane fade in active"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span> <span class="attr">ng-repeat</span>=<span class="string">"dish in menuCtrl.dishes | filter:menuCtrl.filtText"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object img-thumbnail"</span> <span class="attr">ng-src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;dish.image&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">"Uthapizza"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.name&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.label&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.price | currency&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;dish.description&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="comment">&lt;!-- &lt;p&gt;Comment: </span></span><span class="template-variable">&#123;&#123;dish.comment&#125;&#125;</span><span class="xml"><span class="comment">&lt;/p&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="comment">&lt;!-- &lt;p&gt;Type your comment: --&gt;</span></span></span><br><span class="line"><span class="xml">                                    <span class="comment">&lt;!-- &lt;input type="text" ng-model="dish.comment"&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../bower_components/angular/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">        var app = angular.module('confusionApp', []);</span></span><br><span class="line"><span class="xml">        app.controller('menuController', function()&#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            this.tab = 1;</span></span><br><span class="line"><span class="xml">            this.filtText = '';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            var dished = [</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza',</span></span><br><span class="line"><span class="xml">                                image: 'images/uthapizza.png',</span></span><br><span class="line"><span class="xml">                                category: 'mains',</span></span><br><span class="line"><span class="xml">                                label: 'Hot',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: 'aaaaaaa'</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza2',</span></span><br><span class="line"><span class="xml">                                image: 'images/zucchipakoda.png',</span></span><br><span class="line"><span class="xml">                                category: 'mains',</span></span><br><span class="line"><span class="xml">                                label: '',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: ''</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza3',</span></span><br><span class="line"><span class="xml">                                image: 'images/vadonut.png',</span></span><br><span class="line"><span class="xml">                                category: 'appetizer',</span></span><br><span class="line"><span class="xml">                                label: 'New',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: ''</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                              &#123;</span></span><br><span class="line"><span class="xml">                                name: 'Uthapizza4',</span></span><br><span class="line"><span class="xml">                                image: 'images/elaicheesecake.png',</span></span><br><span class="line"><span class="xml">                                category: 'dessert',</span></span><br><span class="line"><span class="xml">                                label: '',</span></span><br><span class="line"><span class="xml">                                price: '4.99',</span></span><br><span class="line"><span class="xml">                                description:'A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer',</span></span><br><span class="line"><span class="xml">                                comment: ''</span></span><br><span class="line"><span class="xml">                              &#125;,</span></span><br><span class="line"><span class="xml">                            ];</span></span><br><span class="line"><span class="xml">            this.dishes = dished;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            this.select = function(setTab) &#123;</span></span><br><span class="line"><span class="xml">                this.tab = setTab;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                if (setTab === 2)</span></span><br><span class="line"><span class="xml">                    this.filtText = "appetizer";</span></span><br><span class="line"><span class="xml">                else if (setTab === 3)</span></span><br><span class="line"><span class="xml">                    this.filtText = "mains"</span></span><br><span class="line"><span class="xml">                else if (setTab === 4)</span></span><br><span class="line"><span class="xml">                    this.filtText = "dessert"</span></span><br><span class="line"><span class="xml">                else </span></span><br><span class="line"><span class="xml">                    this.filtText = "";</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            this.isSelected = function(checkTab) &#123;</span></span><br><span class="line"><span class="xml">                return (this.tab === checkTab)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;);</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Full-Stack-Web-Development-The-Big-Picture&quot;&gt;&lt;a href=&quot;#Full-Stack-Web-Development-The-Big-Picture&quot; class=&quot;headerlink&quot; title=&quot;Full-Sta
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
      <category term="angularjs" scheme="http://blueshw.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blueshw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming in Scala week 6</title>
    <link href="http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week6/"/>
    <id>http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week6/</id>
    <published>2016-07-26T14:29:50.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-1-Other-Collections"><a href="#6-1-Other-Collections" class="headerlink" title="6.1 Other Collections"></a>6.1 Other Collections</h2><p>이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자.</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>리스트의 경우에는 첫번째 element에 접근하는게 마지막 element에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector는 리스트 보다 access pattern이 훨씬 균형잡혀 있다.</p><p>벡터는 최초에 2^5(32개)의 원소를 가지는 array가 만들어 진다. 32개가 넘는 원소가 필요하게 되면, 그다음은 32개를 추가로 만드는 것이 아니라, 2^5 * 2^5개, 그러니깐 총 2^10(1024개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32개보다 커지면, 처음 만들어진 32개짜리 벡터는 각각의 32개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32개짜리 원소에서 1024개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다.</p><p>또 다른 장점으로는 map, for, filter, fold와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32개가 하나의 묶음이다보니 a single cache line에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list는 vector에 비해서 locality가 나쁘다고 할 수 있다.</p><p>vector가 이렇게 좋다는데, list를 써야하는 이유는 무엇일까? recursive data structure의 head를 취하고 나머지를 다시 연산하는 모델 안에서는 list가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head를 취하기가 훨씬 쉽기 때문이다. 하지만 vector의 경우 depth가 1일때는 몰라도 depth가 1만 더 증가해도 훨씬 복잡해진다.</p><p>list의 concat 연산 (::)은 vector에서 다음과 같이 쓰인다.</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span> +: xs     // xs 앞에 <span class="keyword">x</span>를 포함하는 새로운 벡터를 붙인다.</span><br><span class="line">xs :+ <span class="keyword">x</span>     // xs 뒤에 <span class="keyword">x</span>를 포함하는 새로운 벡터를 붙인다.</span><br></pre></td></tr></table></figure><p>벡터 또한 immutable하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.</p><h3 id="Collection-Hierachy"><a href="#Collection-Hierachy" class="headerlink" title="Collection Hierachy"></a>Collection Hierachy</h3><p>스칼라의 collection은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List와 Vector가 속하는 Seq, 나머지는 Set과 Map이다. </p><p><img src="http://docs.scala-lang.org/resources/images/collections.immutable.png" alt="Collectino Hierachy"></p><p>Array와 String는 점선으로 되어있는데, 이들도 Seq로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array</span></span><br><span class="line">val xs = <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">44</span>)</span><br><span class="line">xs map (<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)</span><br><span class="line"><span class="comment">// res0 : Array[Int] = Array(2, 4, 6, 88)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line">val s = <span class="string">"Hello World"</span></span><br><span class="line">s filter (<span class="function"><span class="params">c</span> =&gt;</span> c.isUpper)</span><br><span class="line"><span class="comment">// res1: String = HW</span></span><br></pre></td></tr></table></figure><h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>Range는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val r: Range = <span class="number">1</span> <span class="keyword">until</span> <span class="number">5</span>   <span class="comment"> // 1, 2, 3, 4</span></span><br><span class="line">val s: Range = <span class="number">1</span> <span class="built_in">to</span> <span class="number">5</span>    <span class="comment"> // 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="number">1</span> <span class="built_in">to</span> <span class="number">10</span> <span class="keyword">by</span> <span class="number">3</span>         <span class="comment"> // 1, 4, 7, 10</span></span><br><span class="line"><span class="number">6</span> <span class="built_in">to</span> <span class="number">1</span> <span class="keyword">by</span> <span class="number">-2</span>         <span class="comment"> // 6, 4, 2</span></span><br></pre></td></tr></table></figure><h3 id="Some-more-Sequence-Operations"><a href="#Some-more-Sequence-Operations" class="headerlink" title="Some more Sequence Operations"></a>Some more Sequence Operations</h3><ul><li>xs exists p     : p 함수의 조건을 만족하는 원소가 있는지</li><li>xs forall p     : 모든 원소가 p 함수의 조건을 만족하는지</li><li>xs zip ys     : 두 collection의 원소를 pair로 가지는 새로운 collection 생성, 타입은 xs</li><li><p>xs.unzip      : zip 형태의 collection을 분해해서 List의 tuples을 만듦, Array는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.</p></li><li><p>xs.flatMap f    : 모든 element에 collection-valued functino f를 적용  </p></li><li>xs.sum          : numeric collection의 요소들의 합</li><li>xs.product    : numeric collection의 요소들의 곱</li><li>xs.max      : 최고값</li><li>xs.min      : 최소값</li></ul><h3 id="Scalar-Product"><a href="#Scalar-Product" class="headerlink" title="Scalar Product"></a>Scalar Product</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">val a: Vector[Double] = Vector<span class="comment">(1.0, 2.0, 3.0)</span></span><br><span class="line">val b: Vector[Double] = Vector<span class="comment">(3.0, 4.0, 5.0)</span></span><br><span class="line">  </span><br><span class="line">def scalarProduct<span class="comment">(xs: Vector[Double], ys: Vector[Double])</span>: Double =</span><br><span class="line">  <span class="comment">(xs zip ys)</span>.map<span class="comment">(xy =&gt; xy._1 * xy._2)</span>.sum</span><br><span class="line"></span><br><span class="line">scalarProduct<span class="comment">(a, b)</span></span><br><span class="line"></span><br><span class="line">def scalarProduct<span class="number">2</span><span class="comment">(xs: Vector[Double], ys: Vector[Double])</span>: Double =</span><br><span class="line">  <span class="comment">(xs zip ys)</span>.map&#123; case <span class="comment">(x, y)</span> =&gt; x * y &#125;.sum</span><br><span class="line"></span><br><span class="line">scalarProduct<span class="number">2</span><span class="comment">(a, b)</span></span><br></pre></td></tr></table></figure><p>두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs와 ys를 zip으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case문으로 대체할 수 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">case</span> <span class="function"><span class="params">p1</span> =&gt;</span> e1 ... <span class="keyword">case</span> <span class="function"><span class="params">pn</span> =&gt;</span> en&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위와 동일</span></span><br><span class="line">x =&gt; x match &#123; <span class="keyword">case</span> <span class="function"><span class="params">p1</span> =&gt;</span> e1 ... <span class="keyword">case</span> <span class="function"><span class="params">pn</span> =&gt;</span> en &#125;</span><br></pre></td></tr></table></figure><h3 id="isPrime"><a href="#isPrime" class="headerlink" title="isPrime"></a>isPrime</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(<span class="symbol">n:</span> Int)</span></span>: Boolean = (<span class="number">2</span> <span class="keyword">until</span> n) forall (x =&gt; (n % x) != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>2부터 n 전까지의 수가 모두 n으로 나누어 떨어지지 않으면 n을 prime number(소수)라 할 수 있다.</p><h2 id="6-2-Combinatorial-Search-and-For-Expressions"><a href="#6-2-Combinatorial-Search-and-For-Expressions" class="headerlink" title="6.2 Combinatorial Search and For-Expressions"></a>6.2 Combinatorial Search and For-Expressions</h2><p>양수 n이 있고, 또다른 양수 i와 j가 1 &lt;= j &lt; i &lt; n을 만족하고 i + j가 소수라는 조건이 있다.<br>코드로 나타내면 다음과 같다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val n = <span class="number">7</span></span><br><span class="line">(<span class="number">1</span> until n) map (<span class="selector-tag">i</span> =&gt; (<span class="number">1</span> until i) map (j =&gt; (<span class="selector-tag">i</span>, j)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line">res0: scala<span class="selector-class">.collection</span><span class="selector-class">.immutable</span><span class="selector-class">.IndexedSeq</span>[scala<span class="selector-class">.collection</span><span class="selector-class">.immutable</span><span class="selector-class">.IndexedSeq</span>[(Int, Int)]] = Vector(Vector(), Vector((<span class="number">2</span>,<span class="number">1</span>)), Vector((<span class="number">3</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">2</span>)), Vector((<span class="number">4</span>,<span class="number">1</span>), (<span class="number">4</span>,<span class="number">2</span>), (<span class="number">4</span>,<span class="number">3</span>)), Vector((<span class="number">5</span>,<span class="number">1</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">5</span>,<span class="number">3</span>), (<span class="number">5</span>,<span class="number">4</span>)), Vector((<span class="number">6</span>,<span class="number">1</span>), (<span class="number">6</span>,<span class="number">2</span>), (<span class="number">6</span>,<span class="number">3</span>), (<span class="number">6</span>,<span class="number">4</span>), (<span class="number">6</span>,<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores가 나왔다.<br>Range는 Seq의 하위 타입이지만 사실 그 중간에 IndexedSeq라는 타입이 존재한다. 결과값으로 pair가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair를 담을 가장 적합한 타입인 Vector가 선택되어 나타난것이다.</p><p>원래 우리가 찾으려고 했던 결과는 Vector의 Vector가 아니라 pair를 하나의 single list에 담아져야 한다. 그래서 모든 sub-sequences를 foldRight와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(xss foldRight Se<span class="string">q[Int]</span>())(<span class="number">_</span> ++ <span class="number">_</span>)</span><br><span class="line"></span><br><span class="line">// equvalently</span><br><span class="line">xss.flatten</span><br><span class="line"></span><br><span class="line">// so, 원래식 포함해서 아래와 같이 나타낼 수 있다.</span><br><span class="line">((<span class="number">1</span> <span class="keyword">until</span> n) <span class="keyword">map</span> (<span class="string">i =&gt;</span> (<span class="number">1</span> <span class="keyword">until</span> i) <span class="keyword">map</span> (<span class="string">j =&gt;</span> (i, j)))).flatten</span><br><span class="line"></span><br><span class="line">// 아래의 법칙을 이용하면</span><br><span class="line">xs flatMap f = (xs <span class="keyword">map</span> f).flatten</span><br><span class="line"></span><br><span class="line">// 더 간단해질 수 있다.</span><br><span class="line">(<span class="number">1</span> <span class="keyword">until</span> n) flatMap (<span class="string">i =&gt;</span> (<span class="number">1</span> <span class="keyword">until</span> i) <span class="keyword">map</span> (<span class="string">j =&gt;</span> (i, j)))</span><br><span class="line"></span><br><span class="line">// result </span><br><span class="line">res<span class="number">0</span>: scala.collection.immutable.IndexedSe<span class="string">q[(Int, Int)]</span> = Vector((<span class="number">2</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">2</span>), (<span class="number">4</span>,<span class="number">1</span>), (<span class="number">4</span>,<span class="number">2</span>), (<span class="number">4</span>,<span class="number">3</span>), (<span class="number">5</span>,<span class="number">1</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">5</span>,<span class="number">3</span>), (<span class="number">5</span>,<span class="number">4</span>), (<span class="number">6</span>,<span class="number">1</span>), (<span class="number">6</span>,<span class="number">2</span>), (<span class="number">6</span>,<span class="number">3</span>), (<span class="number">6</span>,<span class="number">4</span>), (<span class="number">6</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">// 두 합이 prime인것만 추려야함, 이전 챕터에서 만든 isPrime 이용</span><br><span class="line">(<span class="number">1</span> <span class="keyword">until</span> n) flatMap (<span class="string">i =&gt;</span> (<span class="number">1</span> <span class="keyword">until</span> i) <span class="keyword">map</span> (<span class="string">j =&gt;</span> (i, j))) filter (<span class="string">pair =&gt;</span> isPrime(pair._1 + pair._2))</span><br><span class="line"></span><br><span class="line">// result </span><br><span class="line">res<span class="number">0</span>: scala.collection.immutable.IndexedSe<span class="string">q[(Int, Int)]</span> = Vector((<span class="number">2</span>,<span class="number">1</span>), (<span class="number">3</span>,<span class="number">2</span>), (<span class="number">4</span>,<span class="number">1</span>), (<span class="number">4</span>,<span class="number">3</span>), (<span class="number">5</span>,<span class="number">2</span>), (<span class="number">6</span>,<span class="number">1</span>), (<span class="number">6</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="For-Expression"><a href="#For-Expression" class="headerlink" title="For-Expression"></a>For-Expression</h3><p>for loop에 대해서 알아보자</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="keyword">class</span> Person(<span class="keyword">name</span>: <span class="keyword">String</span>, age: Int)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20살 이상인 사람만 가져오고 싶을때</span></span><br><span class="line"><span class="keyword">for</span> (p &lt;- persons <span class="keyword">if</span> p.age &gt; <span class="number">20</span>) yield p.<span class="keyword">name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래와 같음</span></span><br><span class="line">persons filter (p =&gt; p.age &gt; <span class="number">20</span>) map (p = &gt; p.<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure><p>기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop는 어떤 요소가 변할 수 있는 side effect가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">for</span> (s) <span class="built_in">yield</span> e</span><br></pre></td></tr></table></figure><p>for-expression을 위와같이 단순화 시킬 수 있다.</p><blockquote><p>s is a sequence of generators and filters<br>e is an expression whose value is returned by an iteration</p></blockquote><ul><li>generator의 p &lt;- e에서 p는 하나의 패턴이고, e는 컬렉션의 값이다.</li><li>filter의 f는 boolean expression이다.</li><li>몇개의 generator가 있을때는 마지막이 처음보다 빠르다. why?</li><li>( s )는 { s }처럼 사용할 수도 있다.</li></ul><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>이전에 보았던 문제를 for loop를 이용해 다시 만들어 보자.<br>첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair를 구하는 함수</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="selector-tag">i</span> &lt;- <span class="number">1</span> until n</span><br><span class="line">  j &lt;- <span class="number">1</span> until i</span><br><span class="line">  <span class="keyword">if</span> isPrime(i+j)</span><br><span class="line">&#125; yield (<span class="selector-tag">i</span>, j)</span><br></pre></td></tr></table></figure><p>매우 심플해졌다.</p><p>두번째는 scalarProduct</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scalarProduct</span><span class="params">(<span class="symbol">xs:</span> Vector[Double], <span class="symbol">ys:</span> Vector[Double])</span></span>: Double =</span><br><span class="line">  (<span class="keyword">for</span> ((x, y) &lt;- xs zip ys) <span class="keyword">yield</span> x * y).sum</span><br></pre></td></tr></table></figure><p>따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.</p><h2 id="6-3-Combinatorial-Search-Example"><a href="#6-3-Combinatorial-Search-Example" class="headerlink" title="6.3 Combinatorial Search Example"></a>6.3 Combinatorial Search Example</h2><p>이번 챕터에서는 Set에 대해 알아보자.<br>Set도 Seq와 마찬가지로 Iterable의 subclass다. 그래서 Seq에서 사용하는 대부분의 연산(map, filter 등)을 Set에서도 동일하게 사용할 수 있다.</p><h3 id="Sets-vs-Sequences"><a href="#Sets-vs-Sequences" class="headerlink" title="Sets vs Sequences"></a>Sets vs Sequences</h3><ul><li>Set은 unordered하다. </li><li>Set은 중복되는 element를 가질 수 없다.</li><li>Set의 fundamental operation은 요소가 해당 Set에 포함되는지 확인하는 contains다.</li></ul><h3 id="Example-N-Queens"><a href="#Example-N-Queens" class="headerlink" title="Example: N-Queens"></a>Example: N-Queens</h3><p>예제를 살펴보자.<br>체스보드에 서로 위협이 되지 않는 8개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal에 둘 수 없는 문제와 같다.</p><p>알고리즘을 살펴보자.</p><ul><li>사이즈 n인 보드에 k-1개의 퀸이 놓여진 모든 솔루션 추출</li><li>각 솔루션을 0에서 n-1까지의 columns 숫자로 구성된 리스트로 변환</li><li>리스트의 첫번째 요소는 k-1번째 row가 될 것이고, k-2, k-3 …의 퀸을 붙여나간다.</li><li>각 솔루션의 하나의 element와 함께 set of lists로 만들어진다.</li><li>kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def queens(n: Int): <span class="keyword">Set</span>[<span class="keyword">List</span>[<span class="built_in">Int</span>]] = &#123;</span><br><span class="line">  <span class="keyword">def</span> placeQueens(k: <span class="built_in">Int</span>): <span class="keyword">Set</span>[<span class="keyword">List</span>[<span class="built_in">Int</span>]] =</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">Set</span>(<span class="keyword">List</span>())</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">for</span> &#123;</span><br><span class="line">        queens &lt;- placeQueens(k - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">col</span> &lt;- <span class="number">0</span> <span class="keyword">until</span> n</span><br><span class="line">        <span class="keyword">if</span> isSafe(<span class="keyword">col</span>, queens)</span><br><span class="line">      &#125; yield <span class="keyword">col</span> :: queens</span><br><span class="line"></span><br><span class="line">  placeQueens(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth씩 내려가다보면 마지막에는 빈 셋에 0에서 n까지 각각 배치될것이다. 그리고 1개의 퀸이 배치된 list들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def isSafe(<span class="built_in">col</span>: Int, queens: List[Int]): Boolean = &#123;</span><br><span class="line">  val <span class="built_in">row</span> = queens.<span class="built_in">length</span></span><br><span class="line">  val queensWithRow = (<span class="built_in">row</span> -<span class="number">1</span> to <span class="number">0</span> by -<span class="number">1</span>) zip queens</span><br><span class="line">  queensWithRow forall &#123;</span><br><span class="line">    case (r, c) =&gt; <span class="built_in">col</span> != c &amp;&amp; math.<span class="built_in">abs</span>(<span class="built_in">col</span> - c) != <span class="built_in">row</span> - r</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column에 속하지 않으면서 대각선에 위치하지 않으면 safe하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">show</span>(queens: <span class="keyword">List</span>[<span class="built_in">Int</span>]) = &#123;</span><br><span class="line">  val <span class="keyword">lines</span> =</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">col</span> &lt;- queens)</span><br><span class="line">    yield Vector.fill(queens.length)(<span class="string">"* "</span>).updated(<span class="keyword">col</span>, <span class="string">"X "</span>).mkString</span><br><span class="line">  <span class="string">"\n"</span> + (<span class="keyword">lines</span> mkString <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(queens(<span class="number">8</span>) take <span class="number">3</span> <span class="keyword">map</span> <span class="keyword">show</span>) mkString <span class="string">"\n"</span></span><br></pre></td></tr></table></figure><p>마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다.<br>결과는 아래와 같다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">res0: String = </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* X *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line">X <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> * </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* X *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* X *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> X </span><br><span class="line"><span class="bullet">* </span>X <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> X <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> X <span class="bullet">* *</span> </span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> X <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* X *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line">X <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> * </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> X </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> X <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span>X <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* X *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* X *</span> <span class="bullet">* *</span> </span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* X *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span>X <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> X </span><br><span class="line">X <span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> * </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> X <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> <span class="bullet">* X *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* X *</span> <span class="bullet">* *</span> <span class="bullet">* *</span> </span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span> <span class="bullet">* *</span> X <span class="bullet">* *</span></span><br></pre></td></tr></table></figure><h2 id="6-4-Maps"><a href="#6-4-Maps" class="headerlink" title="6.4 Maps"></a>6.4 Maps</h2><p>Map에 대해서 알아보자.<br>Map은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value는 숫자나 문자 등 어떤 타입이든 가능하다.<br>또한 Map[Key, Value]는 Key =&gt; Value의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value를 구할 수 있다는 말과 같다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key를 이용해 value를 가져올때</span></span><br><span class="line"><span class="function"><span class="title">capitalOfCountry</span><span class="params">(<span class="string">"andorra"</span>)</span></span>   <span class="comment">// exception 발생</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 대신에 get을 사용한다.</span></span><br><span class="line">capitalOfCountry get <span class="string">"andorra"</span>  <span class="comment">// None</span></span><br></pre></td></tr></table></figure><h3 id="Option-Type"><a href="#Option-Type" class="headerlink" title="Option Type"></a>Option Type</h3><p>Option은 covariant 하기 때문에 Option[A] &gt; Option[Nothing]이다. 즉 None</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trait Option[+A]</span><br><span class="line">case class Some[<span class="string">+A</span>](<span class="link">value: A</span>) extend Option[A]</span><br><span class="line">object None extend Option[Nothing]</span><br></pre></td></tr></table></figure><p>패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def showCapital(country: <span class="built_in">String</span>) = capitalOfCountry.<span class="keyword">get</span>(country) match &#123;</span><br><span class="line">  <span class="keyword">case</span> Some(capital) =&gt; capital</span><br><span class="line">  <span class="keyword">case</span> None =&gt; <span class="string">"missing data"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sorted-and-GroupBy"><a href="#Sorted-and-GroupBy" class="headerlink" title="Sorted and GroupBy"></a>Sorted and GroupBy</h3><p>sql 쿼리의 opertaion을 사용해보자.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> sorted</span><br><span class="line">val fruit = List(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>, <span class="string">"pineapple"</span>)</span><br><span class="line">fruit.sortWith (_.length &lt; _.length)  <span class="regexp">//</span> List(<span class="string">"pear"</span>, <span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"pineapple"</span>)</span><br><span class="line">fruit.sorted    <span class="regexp">//</span> List(<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>, <span class="string">"pineapple"</span>)</span><br><span class="line">      </span><br><span class="line"><span class="regexp">//</span> groupBy</span><br><span class="line">fruit groupBy (_.head)    </span><br><span class="line"><span class="regexp">//</span> Map(p -&gt; List(pear, pineapple)),</span><br><span class="line"><span class="regexp">//</span>     a -&gt; List(apple),</span><br><span class="line"><span class="regexp">//</span>     o -&gt; List(orange))</span><br></pre></td></tr></table></figure><p>groubBy 명령은 식별 함수 f에 따라 collection의 map을 만든다.</p><h3 id="Polynoial-Example"><a href="#Polynoial-Example" class="headerlink" title="Polynoial Example"></a>Polynoial Example</h3><p>from exponents to coefficient 방식으로 map을 만든다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poly</span>(<span class="params">val terms: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Double</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span> </span>(other: <span class="type">Poly</span>) = <span class="keyword">new</span> <span class="type">Poly</span>(terms ++ other.terms)</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>=</span><br><span class="line">    (<span class="keyword">for</span> ((exp, coeff) &lt;- terms.toList.sorted.reverse) <span class="keyword">yield</span> coeff+<span class="string">"x^"</span>+exp) mkString <span class="string">" + "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Poly</span>(<span class="type">Map</span>(<span class="number">1</span> -&gt; <span class="number">2.0</span>, <span class="number">3</span> -&gt; <span class="number">4.0</span>, <span class="number">5</span> -&gt; <span class="number">6.2</span>))</span><br><span class="line"><span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Poly</span>(<span class="type">Map</span>(<span class="number">0</span> -&gt; <span class="number">3.0</span>, <span class="number">3</span> -&gt; <span class="number">7.0</span>))</span><br><span class="line">p1 + p2</span><br></pre></td></tr></table></figure><p>두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents가 같은 coefficient 끼리 더해주고 나머지 exponents들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.<br>하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p<span class="number">1</span>: Poly = <span class="number">6.2</span><span class="keyword">x</span>^<span class="number">5</span> + <span class="number">4.0</span><span class="keyword">x</span>^<span class="number">3</span> + <span class="number">2.0</span><span class="keyword">x</span>^<span class="number">1</span></span><br><span class="line">p<span class="number">2</span>: Poly = <span class="number">7.0</span><span class="keyword">x</span>^<span class="number">3</span> + <span class="number">3.0</span><span class="keyword">x</span>^<span class="number">0</span></span><br><span class="line">res<span class="number">0</span>: Poly = <span class="number">6.2</span><span class="keyword">x</span>^<span class="number">5</span> + <span class="number">7.0</span><span class="keyword">x</span>^<span class="number">3</span> + <span class="number">2.0</span><span class="keyword">x</span>^<span class="number">1</span> + <span class="number">3.0</span><span class="keyword">x</span>^<span class="number">0</span></span><br></pre></td></tr></table></figure><p>왜 그럴까??<br>맵끼리 concatenating 할때는 아마 같은 키의 value를 합치는게 아니라 뒤에 나오는 map의 key의 value로 대체하기 때문에 이렇게 나오는 것이다.<br>다음과 같이 바꿔보자.</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def + (other: Poly) = new Poly(terms ++ (other.terms map adjust))</span><br><span class="line">def adjust(term: (<span class="built_in">Int</span>, <span class="keyword">Double</span>)): (<span class="built_in">Int</span>, <span class="keyword">Double</span>) = &#123;</span><br><span class="line">  val (<span class="built_in">exp</span>, coeff) = term</span><br><span class="line">  terms get <span class="built_in">exp</span> match &#123;</span><br><span class="line">    <span class="keyword">case</span> Some(coeff1) =&gt; <span class="built_in">exp</span> -&gt; (coeff + coeff1)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">None</span> =&gt; <span class="built_in">exp</span> -&gt; coeff</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>뒤에 오는 other에 adjust 함수를 매핑해보자.<br>adjust 함수는 other의 term 하나를 뽑아다가 terms에 해당 exponent가 있는지 확인하고 있으면 terms와 other(term)의 coefficient를 더해준다. 만약 없다면, othe의 coeff를 그대로 리턴한다.<br>결과를 보자. </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p<span class="number">1</span>: Poly = <span class="number">6.2</span><span class="keyword">x</span>^<span class="number">5</span> + <span class="number">4.0</span><span class="keyword">x</span>^<span class="number">3</span> + <span class="number">2.0</span><span class="keyword">x</span>^<span class="number">1</span></span><br><span class="line">p<span class="number">2</span>: Poly = <span class="number">7.0</span><span class="keyword">x</span>^<span class="number">3</span> + <span class="number">3.0</span><span class="keyword">x</span>^<span class="number">0</span></span><br><span class="line">res<span class="number">0</span>: Poly = <span class="number">6.2</span><span class="keyword">x</span>^<span class="number">5</span> + <span class="number">11.0</span><span class="keyword">x</span>^<span class="number">3</span> + <span class="number">2.0</span><span class="keyword">x</span>^<span class="number">1</span> + <span class="number">3.0</span><span class="keyword">x</span>^<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Default-Values"><a href="#Default-Values" class="headerlink" title="Default Values"></a>Default Values</h3><p>심플한 방법이 있었다.<br>withDefaultValue operation을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.<br>withDefaultValue를 이용해 좀더 개선해보자.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Poly</span>(<span class="title">terms0</span>: <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Double</span>]) &#123;</span></span><br><span class="line"><span class="class">  def this(<span class="title">bindings</span>: (<span class="type">Int</span>, <span class="type">Double</span>)*) = this(<span class="title">bindings</span>.<span class="title">toMap</span>)</span></span><br><span class="line"><span class="class">  val terms = terms0 withDefaultValue 0.0</span></span><br><span class="line"><span class="class">  def + (<span class="title">other</span>: <span class="type">Poly</span>) = new <span class="type">Poly</span>(<span class="title">terms</span> ++ (<span class="title">other</span>.<span class="title">terms</span> <span class="title">map</span> <span class="title">adjust</span>))</span></span><br><span class="line"><span class="class">  def adjust(<span class="title">term</span>: (<span class="type">Int</span>, <span class="type">Double</span>)): (<span class="type">Int</span>, <span class="type">Double</span>) = &#123;</span></span><br><span class="line"><span class="class">    val (<span class="title">exp</span>, <span class="title">coeff</span>) = term</span></span><br><span class="line"><span class="class">    exp -&gt; (<span class="title">coeff</span> + <span class="title">terms</span>(<span class="title">exp</span>))</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  override def toString =</span></span><br><span class="line"><span class="class">    (<span class="title">for</span> ((<span class="title">exp</span>, <span class="title">coeff</span>) &lt;- terms.toList.sorted.reverse) yield coeff+"x^"+exp) mkString " + "</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">val p1 = new <span class="type">Poly</span>(1 -&gt; 2.0, 3 -&gt; 4.0, 5 -&gt; 6.2)</span></span><br><span class="line"><span class="class">val p2 = new <span class="type">Poly</span>(0 -&gt; 3.0, 3 -&gt; 7.0)</span></span><br><span class="line"><span class="class">p1 + p2</span></span><br><span class="line"><span class="class">p1.terms(8)</span></span><br></pre></td></tr></table></figure><p>크게 두가지가 바뀌었다.<br>첫째는 Poly 클래스의 parameter에 default value를 적용해주어 adjust에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -&gt; (coeff + terms(exp)))<br>그리고 둘째는 새로운 Poly를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial하게 들어오면 이를 Map으로 바꿔주도록 하였다. </p><h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><p>위에서 보았던 ‘++’ 연산과 foldLeft를 이용한 연산중 어느것이 더 효율적일까? </p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def + (other: Poly) =</span><br><span class="line">  new Poly((other.terms foldLeft terms)(addTerm))</span><br><span class="line"></span><br><span class="line">def addTerm(terms: Map[<span class="built_in">Int</span>, <span class="keyword">Double</span>], term: (<span class="built_in">Int</span>, <span class="keyword">Double</span>)): Map[<span class="built_in">Int</span>, <span class="keyword">Double</span>] = &#123;</span><br><span class="line">  val (<span class="built_in">exp</span>, coeff) = term</span><br><span class="line">  terms + (<span class="built_in">exp</span> -&gt; (coeff + terms(<span class="built_in">exp</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fold를 이용하면 위에서처럼 Map을 생성하여 각 exponent를 비교해서 값을 넣는게 아니라 기존부터 있던 terms에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.</p><h2 id="6-5-Putting-the-Pieces-Together"><a href="#6-5-Putting-the-Pieces-Together" class="headerlink" title="6.5 Putting the Pieces Together"></a>6.5 Putting the Pieces Together</h2><p>전화번호를 문자로 바꾸는 예제를 살펴보자.<br>참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300라인정도의 코드가 나왔다고 한다.</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val mnemonics = Map(</span><br><span class="line">       <span class="string">'2'</span> -&gt; <span class="string">"ABC"</span>, <span class="string">'3'</span> -&gt; <span class="string">"DEF"</span>, <span class="string">'4'</span> =&gt; <span class="string">"GHI"</span>, <span class="string">'5'</span> -&gt; <span class="string">"JKL"</span>, </span><br><span class="line">       <span class="string">'6'</span> -&gt; <span class="string">"MNO"</span>, <span class="string">'7'</span> -&gt; <span class="string">"PQRS"</span>, <span class="string">'8'</span> -&gt; <span class="string">"TUV"</span>, <span class="string">'9'</span> -&gt; <span class="string">"WXYZ"</span>)</span><br></pre></td></tr></table></figure><p>위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.</p><p>예를 들어 “7225247386”를 convert해보면 그 중 하나가 “SCALAISFUN”(Scala is fun)이 된다.</p><p>전체코드는 다음과 같다.</p><pre><code>val in = Source.fromURL(&quot;http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt&quot;)val words = in.getLines.toList filter (word =&gt; word forall (chr =&gt; chr.isLetter))val mnem = Map(  &apos;2&apos; -&gt; &quot;ABC&quot;, &apos;3&apos; -&gt; &quot;DEF&quot;, &apos;4&apos; -&gt; &quot;GHI&quot;, &apos;5&apos; -&gt; &quot;JKL&quot;,  &apos;6&apos; -&gt; &quot;MNO&quot;, &apos;7&apos; -&gt; &quot;PQRS&quot;, &apos;8&apos; -&gt; &quot;TUV&quot;, &apos;9&apos; -&gt; &quot;WXYZ&quot;)val charCode: Map[Char, Char] =  for ((digit, str) &lt;- mnem; ltr &lt;- str) yield ltr -&gt; digit/** * 파라미터로 들어온 문자열을 charCode로 변경함 * @param word * @return */def wordCode(word: String): String =  word.toUpperCase map charCode  wordCode(&quot;Java&quot;)  // res0: String = 5282/** * A map form digit strings to the words that represent them, * e,g. &quot;5282&quot; -&gt; List(&quot;Java&quot;, &quot;Kata&quot;, &quot;Lava&quot;, ...) * Note: A missing number should map to the empty set, e,g. &quot;11111&quot; -&gt; List() */val wordsForNum: Map[String, Seq[String]] =  words groupBy wordCode withDefaultValue Seq()/** * Return all ways to encode a number as a list of words */def encode(number: String): Set[List[String]] =  if (number.isEmpty) Set(List())  // 1 to number.length는 IndexedReq 타입이므로 Set 타입으로 변경해준다  else {    for {      split &lt;- 1 to number.length      word &lt;- wordsForNum(number take split)      rest &lt;- encode(number drop split)    } yield word :: rest  }.toSetencode(&quot;7225247386&quot;)def translate(number: String): Set[String] =  encode(number) map(_ mkString &quot; &quot;)translate(&quot;7225247386&quot;)</code></pre><p>지금까지 살펴본 스칼라 collection은 아래와 같이 정리 할 수 있다.</p><ul><li>easy to use: few steps to do the job.</li><li>concise: one word replaces a whole loop.</li><li>safe: type checker is really good at catching errors.</li><li>fast: collection ops art tuned, can be parallelized.</li><li>universal: one vocabulary to work on all kinds of collections.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;6-1-Other-Collections&quot;&gt;&lt;a href=&quot;#6-1-Other-Collections&quot; class=&quot;headerlink&quot; title=&quot;6.1 Other Collections&quot;&gt;&lt;/a&gt;6.1 Other Collections&lt;/
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="scala" scheme="http://blueshw.github.io/tags/scala/"/>
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming in Scala week 5</title>
    <link href="http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week5/"/>
    <id>http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week5/</id>
    <published>2016-07-26T14:28:50.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-1-More-Functions-on-Lists"><a href="#5-1-More-Functions-on-Lists" class="headerlink" title="5.1 More Functions on Lists"></a>5.1 More Functions on Lists</h2><p>이번 챕터에서는 스칼라 List의 다른 메서드 들을 알아본다.<br>xs는 list의 object를 뜻한다.</p><h3 id="Sublists-and-element-access"><a href="#Sublists-and-element-access" class="headerlink" title="Sublists and element access"></a>Sublists and element access</h3><ul><li>xs.length xs의 길이</li><li>xs.last xs의 마지막 item return, xs가 비어있으면 exception 발생</li><li>xs.init 마지막 item을 제외한 list reutnr, xs가 비어있으면 exception 발생</li><li>xs take n 처음부터 n개의 element의 list 리턴, n이 xs의 length보다 크면 n개만 리턴</li><li>xs drop n n개를 제외한 나머지 리스트 리턴</li><li>xs(n) n번째 item 리턴</li></ul><h3 id="Creating-new-lists"><a href="#Creating-new-lists" class="headerlink" title="Creating new lists"></a>Creating new lists</h3><ul><li>xs ++ ys 두 list 더하기, :::와 같은 기능을 함</li><li>xs.reverse 역순의 리스트 생성</li><li>xs updated (n, x) n번째 item만 x로 바뀐 list 생성</li></ul><h3 id="Finding-elements"><a href="#Finding-elements" class="headerlink" title="Finding elements"></a>Finding elements</h3><ul><li>xs indexOf x x와 같은 첫번째 element의 index 값 리턴, 없으면 -1</li><li>xs contains x indexOf x &gt;= 0 과 같음</li></ul><p>last가 과연 필요한지 모르겠지만(tail을 recursive하게 반복하면 찾을 수 있음), 유용하게 쓰일 수 있다면 last의 복잡도는 어떻게 될까?</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def last[T](xs: <span class="built_in">List</span>[T]): T = xs match &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">List</span>() =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"last of empty list"</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">List</span>(x) =&gt; x</span><br><span class="line">  <span class="keyword">case</span> y :: ys =&gt; lsat(ys)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 list의 길이와 같으므로, 복잡도는 O(n)이 되겠다.<br>init 메서드는 어떨까?</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def init[T](xs: <span class="built_in">List</span>[T]): <span class="built_in">List</span>[T] = xs match &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">List</span>() =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"init of empty list"</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">List</span>(x) =&gt; <span class="built_in">List</span>()</span><br><span class="line">  <span class="keyword">case</span> y :: ys =&gt; y :: init(ys)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마찬가지로 O(n)<br>그다음은 concat(Same as :::)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def concat[<span class="string">T</span>](<span class="link">xs: List[T], ys: List[T]</span>) = xs match &#123;</span><br><span class="line">  case List() =&gt; ys</span><br><span class="line">  case z :: zs =&gt; z :: concat(zs, ys) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>복잡도는 |xs|, 즉 xs 의 길이가 된다.<br>다음은 reverse</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def reverse[<span class="string">T</span>](<span class="link">xs: List[T]</span>): List[T] = xs match &#123;</span><br><span class="line">  case List() =&gt; xs</span><br><span class="line">  case y :: ys =&gt; reverse(ys) ++ List(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reverse(ys) :: y 가 아니라 reverse(ys) ++ List(y)인 이유는 ::의 마지막엔 Nil이 와야하니깐 y가 Nil이 아니기 때문이 아닐까 생각한다.<br>복잡도는 각 요소마다 concatenating을 해주고 list의 length만큼 reverse를 해야하므로 O(n2)이 되겠다. reverse는 다소 실망스러운 성능을 보여주는데, 앞으로 더 개선해보도록 하겠다.</p><p>마지막으로 removeAt</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def removeAt[<span class="string">T</span>](<span class="link">n: Int, xs: List[T]</span>) = (xs take n) ::: (xs drop n+1)</span><br></pre></td></tr></table></figure><h2 id="5-2-Paires-and-Tuples"><a href="#5-2-Paires-and-Tuples" class="headerlink" title="5.2 Paires and Tuples"></a>5.2 Paires and Tuples</h2><p>앞서 살펴보앗던 insertion sort보다 더 개선된 merge sort 알고리즘에 대해서 살펴보자. 기본적인 개념은 zero or one element 리스트는 이미 sorted 하다는 것.</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def msort(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] = &#123;</span><br><span class="line">  val n = xs.length/<span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) xs</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// merge 메서드는 앞으로 더 개선해 나갈 예정임</span></span><br><span class="line">    def merge(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>], ys: <span class="keyword">List</span>[<span class="keyword">Int</span>]) = </span><br><span class="line">      xs mathch &#123;</span><br><span class="line">        <span class="keyword">case</span> Nil =&gt; ys</span><br><span class="line">        <span class="keyword">case</span> x :: xs1 =&gt;</span><br><span class="line">          ys match &#123;</span><br><span class="line">            <span class="keyword">case</span> Nil =&gt; xs</span><br><span class="line">            <span class="keyword">case</span> y :: ys1 =&gt;</span><br><span class="line">              <span class="keyword">if</span> (x &lt; y) x :: merge(xs1, ys)</span><br><span class="line">              <span class="keyword">else</span> y :: merge(xs, ys1)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    val (fst, snd) = xs splitAt n</span><br><span class="line">    merge(msort(fst), msort(snd))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>밑에서 나오는 splitAt 함수는 index n을 기준으로 리스트를 두개로 쪼개서 리턴한다. 여기서 리턴된 val의 모양을 보자. fst와 snd 두개의 타입으로 묶여져 있다. 이를 Pair라고 한다. 예를 들면</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val pair = (<span class="string">"answer"</span>, <span class="number">42</span>) &gt; pair: (<span class="built_in">String</span>, <span class="built_in">Int</span>) = (answer,<span class="number">42</span>)  </span><br><span class="line"></span><br><span class="line">val (label, value) = pare &gt; label: <span class="built_in">String</span> = answer | value : <span class="built_in">Int</span> = <span class="number">42</span></span><br></pre></td></tr></table></figure><p>위와 같이 타입으로도 쓰일 수 있고, 패턴으로도 사용될 수 있다. 이때 2개 이상의 요소를 가지면 Tuples라 한다. Tuples는 다양하게 사용될 수 있는데, parameterized type으로 사용될 경우, function applictaion으로 사용될 경우, constructor 패턴으로 사용될 경우 각각 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scala</span><span class="selector-class">.Tuplen</span><span class="selector-attr">[T1, ..., Tn]</span></span><br><span class="line"><span class="selector-tag">scala</span><span class="selector-class">.Tuplen</span>(<span class="selector-tag">e1</span>, ..., <span class="selector-tag">en</span>)</span><br><span class="line"><span class="selector-tag">scala</span><span class="selector-class">.Tuplen</span>(<span class="selector-tag">p1</span>, ..., <span class="selector-tag">pn</span>)</span><br></pre></td></tr></table></figure><p>과 같이 사용할 수 있다. (여기서 Tuplen의 n은 파라미터 개수 ex. Tuple2)<br>튜플의 각 element는 _1, _2와 같이 접근할 수 있다.<br>이제 merge 메소드를 개선해보자.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">merge</span>(xs: <span class="keyword">List</span>[<span class="built_in">Int</span>], ys: <span class="keyword">List</span>[<span class="built_in">Int</span>]): <span class="keyword">List</span>[<span class="built_in">Int</span>] = (xs, ys) <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> (Nil, ys) =&gt; ys</span><br><span class="line">  <span class="keyword">case</span> (xs, Nil) =&gt; xs</span><br><span class="line">  <span class="keyword">case</span> (x :: xs1, y :: ys1) =&gt; </span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) x :: <span class="keyword">merge</span>(xs1, ys)</span><br><span class="line">    <span class="keyword">else</span> y :: <span class="keyword">merge</span>(xs, ys1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>훨씬 깔끔해졌다.</p><h2 id="5-3-Implicit-Parameters"><a href="#5-3-Implicit-Parameters" class="headerlink" title="5.3 Implicit Parameters"></a>5.3 Implicit Parameters</h2><p>이전 장에서 보았던 msort는 List[Int] 타입으로 지정되어 있는데 parameterize를 통해서 Int 말고도 다른 타입이 들어올 수 있도록 임의의 타입 T로 변경해보자</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">mergesort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">msort</span></span>[<span class="type">T</span>](xs: <span class="type">List</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> n = xs.length/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) xs</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(xs: <span class="type">List</span>[<span class="type">T</span>], ys: <span class="type">List</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] = (xs, ys) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> (<span class="type">Nil</span>, ys) =&gt; ys</span><br><span class="line">        <span class="keyword">case</span> (xs, <span class="type">Nil</span>) =&gt; xs</span><br><span class="line">        <span class="keyword">case</span> (x :: xs1, y :: ys1) =&gt;</span><br><span class="line">          <span class="keyword">if</span> (x &lt; y) x :: merge(xs1, ys)</span><br><span class="line">          <span class="keyword">else</span> y :: merge(xs, ys1)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> (fst, snd) = xs splitAt n</span><br><span class="line">      merge(msort(fst), msort(snd))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> nums = <span class="type">List</span>(<span class="number">2</span>, <span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line">  msort(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x &lt; y 부분에서 에러가 발생한다. 왜냐하면 comparison ‘&lt;’가 임의의 타입 T에 정의되어 있지 않기 때문이란다….<br>그래서 우리는 comparison 함수가 필요하다. 이 때 가장 유연한 방법은 msort 함수에 comparison operation을 추가적인 파라미터로 붙이는 것이다. 아래처럼</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def msort[<span class="string">T</span>](<span class="link">xs: List[T]</span>)(lt: (T, T) =&gt; Boolean) = &#123;</span><br><span class="line">  ...</span><br><span class="line">  merge(msort(fst)(lt), msort(snd)(lt))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그래서 원래 mergesort에 적용하면 다음과 같다.</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">object mergesort &#123;</span><br><span class="line">  def msort[T](xs: <span class="keyword">List</span>[T])(lt: (T, T) =&gt; <span class="keyword">Boolean</span>): <span class="keyword">List</span>[T] = &#123;</span><br><span class="line">    val n = xs.length/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) xs</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      def merge(xs: <span class="keyword">List</span>[T], ys: <span class="keyword">List</span>[T]): <span class="keyword">List</span>[T] = (xs, ys) match &#123;</span><br><span class="line">        <span class="keyword">case</span> (Nil, ys) =&gt; ys</span><br><span class="line">        <span class="keyword">case</span> (xs, Nil) =&gt; xs</span><br><span class="line">        <span class="keyword">case</span> (x :: xs1, y :: ys1) =&gt;</span><br><span class="line">          <span class="keyword">if</span> (lt(x, y)) x :: merge(xs1, ys)</span><br><span class="line">          <span class="keyword">else</span> y :: merge(xs, ys1)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      val (fst, snd) = xs splitAt n</span><br><span class="line">      merge(msort(fst)(lt), msort(snd)(lt))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  val nums = <span class="keyword">List</span>(<span class="number">2</span>, <span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line">  msort(nums)((x, y) =&gt; x &lt; y)</span><br><span class="line"></span><br><span class="line">  val fruits = <span class="keyword">List</span>(<span class="string">"apple"</span>, <span class="string">"pineapple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>)</span><br><span class="line">  msort(fruits)((x, y) =&gt; x.compareTo(y) &lt; <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 Int 타입 뿐만 아니라 String과 같은 다른 타입도 정렬이 가능해졌다. 이 때 lt에 들어오는 함수 파라미터에 타입 붙이는 걸 생략해도 되는데, 컴파일러가 앞에 있는 리스트의 타입을 보고 유추할 수 있기 때문이란다. 즉 파라미터 셋의 마지막에 function value가 들어오게 되면, 컴파일러가 타입 체크를 미뤄버린다.</p><h3 id="scala-math-Ordering-T"><a href="#scala-math-Ordering-T" class="headerlink" title="scala.math.Ordering[T]"></a>scala.math.Ordering[T]</h3><p>사실 ordering을 위한 스탠다드 라이브러리 클래스가 있다. </p><blockquote><p>scala.math.Ordering[T]</p></blockquote><p>그래서 lt 명령어를 parameterizing 하는 대신 Orderging 클래스로 parameterize 할 수 있다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def msort[<span class="string">T</span>](<span class="link">xs: List[T]</span>)(ord: Ordering) = </span><br><span class="line"></span><br><span class="line">  def merge(xs: List[T], ys: List[T]) =</span><br><span class="line"><span class="code">    ... if (ord.lt(x, y)) ...</span></span><br><span class="line"></span><br><span class="line">  ... merge(msort(fst)(ord), msort(snd)(ord)) ...</span><br></pre></td></tr></table></figure><h3 id="implicit"><a href="#implicit" class="headerlink" title="implicit"></a>implicit</h3><p>대체로 완성된 느낌이 나지만, Ordering 함수가 처음 콜 될때부터 계속 전달되는게 좀 비효율적으로 보인다. 그래서 여기에다가 또하나를 추가해보자.<br>ord 파라미터에 implicit(절대적인이란 뜻) 키워드를 앞에 붙여보자. 그러면, 함수를 실제로 호출하는 부분에서 실제 파라미터를 넣어줄 필요가 없다.</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def msort[T](xs: List[T])(<span class="keyword">implicit</span> ord: Ordering) = </span><br><span class="line"></span><br><span class="line">  def <span class="built_in">merge</span>(xs: List[T], ys: List[T]) =</span><br><span class="line">    ... <span class="keyword">if</span> (ord.lt(x, y)) ...</span><br><span class="line"></span><br><span class="line">  ... <span class="built_in">merge</span>(msort(fst), msort(snd)) ...</span><br><span class="line"></span><br><span class="line">val nums = List(<span class="number">2</span>, -<span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line">msort(nums)</span><br></pre></td></tr></table></figure><p>더 간결해졌다. </p><h3 id="Rules-for-Implicit-Parameters"><a href="#Rules-for-Implicit-Parameters" class="headerlink" title="Rules for Implicit Parameters"></a>Rules for Implicit Parameters</h3><p>타입이 T인 implicit 파라미터가 있을때, 컴파일러는 </p><blockquote><p>(1) implicit이 쓰인 파라미터에 (2) T와 호환되는 타입을 가지고 (3) function call에서 보이거나 T와 관련된 companion 오브젝트(클래스와 객체 이름이 같은 오브젝트)에서<br>single implicit definition을 찾는다. 즉, Ordering[Int]가 함수 call의 파라미터로 존재하지 않지만, implicit으로 처리되어 어딘가에 존재하게 된다.</p></blockquote><h2 id="5-4-Higher-Order-List-Functions"><a href="#5-4-Higher-Order-List-Functions" class="headerlink" title="5.4 Higher-Order List Functions"></a>5.4 Higher-Order List Functions</h2><p>위에서 보았던 예제들은 종종 비슷한 구조를 보여준다. 요약해보면</p><ul><li>리스트의 각 element를 변경하는 것</li><li>어떤 조건을 만족하는 모든 element의 리스트를 구하는 것</li><li>연산자를 사용하여 element들을 결합하는 것</li></ul><p>함수형 언어는 higer-order functinos 패턴을 이용하는 generic function을 만들 수 있다.</p><p>첫번째 예제는 각 요소를 multiply 하는 것이다.</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def scaleList(xs: <span class="keyword">List</span>[<span class="keyword">Double</span>], factor: <span class="keyword">Double</span>): <span class="keyword">List</span>[<span class="keyword">Double</span>] = xs match &#123;</span><br><span class="line">  <span class="keyword">case</span> Nil =&gt; xs</span><br><span class="line">  <span class="keyword">case</span> y :: ys =&gt; y * factor :: scaleList(ys, factor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>위 예제는 list의 map 메서드를 이용하여 만들 수 있다.<br>map 메서드의 구조를 살펴보면 아래와 같다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> List[T] &#123; ...</span><br><span class="line">  def map[U](f: <span class="function"><span class="params">T</span> =&gt;</span> U): List[U] = <span class="keyword">this</span> match &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="function"><span class="params">Nil</span> =&gt;</span> <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">case</span> x :: <span class="function"><span class="params">xs</span> =&gt;</span> f(x) :: xs.map(f)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>파라미터로 들어온 함수f가 각 element에 적용되어서 새로운 리스트를 만들어 내는 함수가 바로 map이다. map 메서드를 이용하면 훨씬 간단하게 작성할 수 있다</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def scaleList(xs: <span class="keyword">List</span>[<span class="keyword">Double</span>], factor: <span class="keyword">Double</span>) =</span><br><span class="line">  xs.map(x =&gt; x * factor)</span><br></pre></td></tr></table></figure><p>또하나의 예제를 살펴보자</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def squareList(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] = xs match &#123;</span><br><span class="line">  <span class="keyword">case</span> Nil =&gt; Nil</span><br><span class="line">  <span class="keyword">case</span> y :: ys =&gt; y * y :: squareList(ys)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def squareList(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] =</span><br><span class="line">  xs map (y =&gt; y * y)</span><br></pre></td></tr></table></figure><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><p>필터링은 어떤 조건에 맞는 element를 모아 새로운 리스트를 만들어 내는 메서드이다.<br>0보다 큰수만 필터링 하는 다음의 함수를 보자</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def posElems(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] = xs match &#123;</span><br><span class="line">  <span class="keyword">case</span> Nil =&gt; xs</span><br><span class="line">  <span class="keyword">case</span> y :: ys =&gt; <span class="keyword">if</span> (y &gt; <span class="number">0</span>) y :: posElems(ys) <span class="keyword">else</span> posElems(ys)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필터를 이용하면 간단하게 해결할 수 있다. 우선은 filter 메서드가 어떻게 생겼는지부터 살펴보도록 하자.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> List[T] &#123;</span><br><span class="line">  ...</span><br><span class="line">  def filter(p: <span class="function"><span class="params">T</span> =&gt;</span> <span class="built_in">Boolean</span>): List[T] = <span class="keyword">this</span> match &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="function"><span class="params">Nil</span> =&gt;</span> <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">case</span> x :: <span class="function"><span class="params">xs</span> =&gt;</span> <span class="keyword">if</span> (p(x)) x :: xs.filter(p) <span class="keyword">else</span> xs.filter(p)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필터는 특정조건함수(p)가 true이면 :: 연산자를 이용하여 리스트에 붙이고 false이면 제외하는 방식으로 새로운 리스트를 만들어간다.<br>그럼 위에서 보았던 posElems를 filter를 이용해 재구성해보자</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def posElems(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] = </span><br><span class="line">  xs filter(x =&gt; x &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>그외에 유용한 메서드 목록은 아래와 같다.</p><ul><li>xs filterNot p  xs filter (x =&gt; !p(x))와 같다.</li><li>xs partition p  (xs filter p, xs filterNot) 튜플</li><li>xs takeWhile p  p를 만족하는 요소들의 가장 긴 리스트 </li><li>xs dropWhile p  p를 만족하는 요소들의 나머지</li><li>xs span p       (xs takeWhile p, xs dropWhile p) 튜플</li></ul><p>예를 들어보자</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val nums = <span class="keyword">List</span>(<span class="number">2</span>, <span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line">nums: <span class="keyword">List</span>[<span class="keyword">Int</span>] = <span class="keyword">List</span>(<span class="number">2</span>, <span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; nums filter (x =&gt; x &gt; <span class="number">0</span>)</span><br><span class="line">res0: <span class="keyword">List</span>[<span class="keyword">Int</span>] = <span class="keyword">List</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; nums filterNot (x =&gt; x &gt; <span class="number">0</span>)</span><br><span class="line">res1: <span class="keyword">List</span>[<span class="keyword">Int</span>] = <span class="keyword">List</span>(<span class="number">-4</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; nums partition (x =&gt; x &gt; <span class="number">0</span>)</span><br><span class="line">res2: (<span class="keyword">List</span>[<span class="keyword">Int</span>], <span class="keyword">List</span>[<span class="keyword">Int</span>]) = (<span class="keyword">List</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>),<span class="keyword">List</span>(<span class="number">-4</span>))</span><br><span class="line"></span><br><span class="line">scala&gt; nums takeWhile (x =&gt; x &gt; <span class="number">0</span>)</span><br><span class="line">res3: <span class="keyword">List</span>[<span class="keyword">Int</span>] = <span class="keyword">List</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; nums dropWhile (x =&gt; x &gt; <span class="number">0</span>)</span><br><span class="line">res4: <span class="keyword">List</span>[<span class="keyword">Int</span>] = <span class="keyword">List</span>(<span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; nums span (x =&gt; x &gt; <span class="number">0</span>)</span><br><span class="line">res5: (<span class="keyword">List</span>[<span class="keyword">Int</span>], <span class="keyword">List</span>[<span class="keyword">Int</span>]) = (<span class="keyword">List</span>(<span class="number">2</span>),<span class="keyword">List</span>(<span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="5-5-Reductino-of-Lists"><a href="#5-5-Reductino-of-Lists" class="headerlink" title="5.5 Reductino of Lists"></a>5.5 Reductino of Lists</h2><p>5.4절에 이어 higr-order Function 패턴을 이용한 List 메서드에 대해서 계속 알아보도록 하자. 5.4에서 보았던 세가지 패턴 중에 마지막인 element를 결합하는 방법들에 대한 내용들이 되겠다. </p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sum</span>(<span class="built_in">List</span>(x1, <span class="params">...</span>, xn))      = <span class="number">0</span> + x1 + <span class="params">...</span> + xn</span><br><span class="line">product(<span class="built_in">List</span>(x1, <span class="params">...</span>, xn))  = <span class="number">1</span> * x1 * <span class="params">...</span> * xn</span><br></pre></td></tr></table></figure><h3 id="ReduceLeft"><a href="#ReduceLeft" class="headerlink" title="ReduceLeft"></a>ReduceLeft</h3><p>각 요소를 더하거나 곱하는 sum과 product 메서드가 있다. 이를 ReduceLeft 메서드를 이용하여 구현해보도록하자. ReduceLeft 메서드는 아래와 같은 구조를 가진다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List(x1, ..., xn) reduceLeft op = (...(x1 op x2) op ... ) op xn</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위의 구조를 이용하면 sum과 product는 아래와 같이 구현가능하다.</span></span><br><span class="line">def sum(xs: List[Int]) = <span class="function">(<span class="params">0 :: xs</span>) <span class="params">reduceLeft</span> (<span class="params">(<span class="params">x, y</span>) =&gt; x + y</span>) // <span class="params">or</span> (<span class="params">_ + _</span>)</span></span><br><span class="line"><span class="function"><span class="params">def</span> <span class="params">product</span>(<span class="params">xs: List[Int]</span>) = (<span class="params">1 :: xs</span>) <span class="params">reduceLeft</span> (<span class="params">(<span class="params">x, y</span>) =&gt; x * y</span>) // <span class="params">or</span> (<span class="params">_ * _</span>)</span></span><br></pre></td></tr></table></figure><h3 id="FoldLeft"><a href="#FoldLeft" class="headerlink" title="FoldLeft"></a>FoldLeft</h3><p>foldLeft 함수는 reduceLeft 함수에 비해 좀더 일반적인 형태이다. foldLeft가 reduceLeft와 비슷하지만, foldLeft는 하나의 accumulator(z)를 가진다.<br>구조는 아래와 같다.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">List</span>(<span class="name">x1</span>, ..., xn) foldLeft z)(<span class="name">op</span>) = (...(<span class="name">z</span> op x1) op ...) op xn</span><br></pre></td></tr></table></figure><p>foldLeft로 sum과 product를 구현해보자</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def sum(<span class="name">xs</span>: List[Int]) = (<span class="name">xs</span> foldLeft <span class="number">0</span>) (<span class="name">_</span> + _)</span><br><span class="line">def product(<span class="name">xs</span>: List[Int]) = (<span class="name">xs</span> foldLeft <span class="number">1</span>) (<span class="name">_</span> * _)</span><br></pre></td></tr></table></figure><p>foldLeft와 reduceLeft는 List class에서 다음과 같이 구현된다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> List[T] &#123; ...</span><br><span class="line">  def reduceLeft(op: <span class="function">(<span class="params">T, T</span>) =&gt;</span> T): T = <span class="keyword">this</span> match &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="function"><span class="params">Nil</span> =&gt;</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Nil.reduceLeft"</span>)</span><br><span class="line">    <span class="keyword">case</span> x :: <span class="function"><span class="params">xs</span> =&gt;</span> (xs foldLeft x)(op)</span><br><span class="line">  &#125;</span><br><span class="line">  def foldLeft[U](z: U)(op: <span class="function">(<span class="params">U, T</span>) =&gt;</span> U): U = <span class="keyword">this</span> match &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="function"><span class="params">Nil</span> =&gt;</span> z</span><br><span class="line">    <span class="keyword">case</span> x :: <span class="function"><span class="params">xs</span> =&gt;</span> (xs foldLeft op(z, x))(op)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reduceLeft도 내부적으로는 foldLeft 메서드를 이용한다.<br>그리고 reduceRight와 foldRight도 위의 두 메서드와 비슷한 구조로 동작한다. 대신 좌측이 아닌 우측(뒤)부터 reduce한다.</p><h3 id="Difference-between-FoldLeft-and-FoldRight"><a href="#Difference-between-FoldLeft-and-FoldRight" class="headerlink" title="Difference between FoldLeft and FoldRight"></a>Difference between FoldLeft and FoldRight</h3><p>foldLeft와 foldRight는 무엇이 다를까? 기본적으로 sum을 가지고 생각했을때, 왼쪽부터 더하는 것이나 오른쪽부터 더하는 것이나 결과는 동일하다. 하지만 어떤 경우에는 둘 중 하나만 적절할 때도 있다. 아래의 예제를 보자</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def concat[<span class="string">T</span>](<span class="link">xs: List[T], ys: List[T]</span>): List[T] = (xs foldRight ys) (<span class="emphasis">_ :: _</span>)</span><br></pre></td></tr></table></figure><p>위의 함수에서 foldRight를 foldLeft로 변경하면, 타입에러가 발생한다.<br>1 :: List(2)는 가능하지만 List(1) :: 2 는 불가능한 연산이기 때문이다.</p><h2 id="5-6-Reasoning-About-Concat"><a href="#5-6-Reasoning-About-Concat" class="headerlink" title="5.6 Reasoning About Concat"></a>5.6 Reasoning About Concat</h2><p>이번 챕터에서는 어떤 연산자(or 함수)가 정확히 참임을 증명할 수 있는지에 대해 알아보도록 한다.<br>일반적으로 natural induction(자연 귀납?)에 의해 증명하는 방법의 예는 다음과 같다. </p><ul><li>P(n)이 모든 n &gt;= b 에대해서</li><li>P(b)가 참이다. (base case)</li><li>이때, 모든 n &gt;= b 에 대해서 P(n)이 참이면, P(n + 1)도 참이다.</li></ul><h3 id="Referential-Transparency-참조-투명성"><a href="#Referential-Transparency-참조-투명성" class="headerlink" title="Referential Transparency (참조 투명성)"></a>Referential Transparency (참조 투명성)</h3><p>순수한 함수형 프로그램에서는 사이드 이펙트가 없기 때문에, reduction steps가 어떤 부분에 대해서도 동일하게 적용된다. 이를 Referential Transparency(참조 투명성)이라 한다.</p><p>structural induction은 natural induction과 비슷하다.<br>structural induction은 다음과 같이 동작한다.</p><ul><li>P(xs)이 모든 리스트 xs에 대해서 </li><li>P(Nil)이 hold 된다면</li><li>리스트 xs와 어떤 element x에 대해서 P(xs)가 hold 되다면, P(x :: xs) 또한 hold 된다.</li></ul><p>이제 concat 함수를 다시 살펴보자</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def concat[<span class="string">T</span>](<span class="link">xs: List[T], ys: List[T]</span>) = xs match &#123;</span><br><span class="line">  case List() =&gt; ys</span><br><span class="line">  case x :: xs1 =&gt; x :: concat(xs1, ys)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 다음의 수식을 structural induction으로 증명해보자</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(xs</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">ys)</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">zs</span> <span class="comment">=</span> <span class="comment">xs</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">(ys</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">zs)</span></span><br><span class="line"><span class="comment">//</span> <span class="literal">+</span><span class="literal">+</span><span class="comment">(concat)</span> <span class="comment">연산자의</span> <span class="comment">두가지</span> <span class="comment">정리를</span> <span class="comment">참고한다</span></span><br><span class="line"><span class="comment">//</span> <span class="comment">Nil</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">ys</span> <span class="comment">=</span> <span class="comment">ys</span></span><br><span class="line"><span class="comment">//</span> <span class="comment">(x</span> <span class="comment">::</span> <span class="comment">xs1)</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">ys</span> <span class="comment">=</span> <span class="comment">x</span> <span class="comment">::</span> <span class="comment">(xs1</span> <span class="literal">+</span><span class="literal">+</span> <span class="comment">ys)</span></span><br></pre></td></tr></table></figure><p>우선 xs에 Nil이 들어갈 때인 P(Nil)을 살펴보자</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// <span class="built_in">left</span> </span><br><span class="line">(Nil ++ ys) ++ zs</span><br><span class="line">= ys ++ zs      // by <span class="number">1</span>st clause of ++</span><br><span class="line"></span><br><span class="line">// <span class="built_in">right</span></span><br><span class="line">Nil ++ (ys ++ zs)</span><br><span class="line">= ys ++ zs      // by <span class="number">1</span>st clause of ++</span><br></pre></td></tr></table></figure><p>다음은 xs 대신에 induction step인 ‘x :: xs’를 넣어보자</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// left</span></span><br><span class="line"><span class="bullet">((x :: </span>xs) <span class="code">++ ys) +</span> zs</span><br><span class="line"><span class="section">= (x :: (xs ++ ys)) ++ zs      // by 2st clause of ++</span></span><br><span class="line"><span class="section">= x :: ((xs ++ ys) ++ zs)      // by 2st clause of ++</span></span><br><span class="line"><span class="section">= x :: (xs ++ (ys ++ zs))    // by induction hypothesis </span></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="bullet">(x :: </span>xs) <span class="code">++ (ys +</span>+ zs)</span><br><span class="line"><span class="section">= x :: (xs ++ (ys ++ zs))    // by 2st clause of ++</span></span><br></pre></td></tr></table></figure><p>좌변과 우변이 같으므로 함수 P는 증명됨</p><h2 id="5-7-A-Larger-Equational-Proof-on-Lists"><a href="#5-7-A-Larger-Equational-Proof-on-Lists" class="headerlink" title="5.7 A Larger Equational Proof on Lists"></a>5.7 A Larger Equational Proof on Lists</h2><p>좀더 까다로운 function인 reverse에 대해서 알아보자<br>다음의 두가지 amenable한 사실을 가지고 그 아래의 식을 증명해보자</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) Nil<span class="selector-class">.reverse</span> = Nil               <span class="comment">// 1st clause</span></span><br><span class="line">(<span class="number">2</span>) (x :: xs)<span class="selector-class">.reverse</span> = xs<span class="selector-class">.reverse</span> ++ List(x)   <span class="comment">// 2nd clause</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 다음을 증명</span></span><br><span class="line">xs<span class="selector-class">.reverse</span><span class="selector-class">.reverse</span> = xs</span><br></pre></td></tr></table></figure><p>base case는 단순하다</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Nil.reverse.reverse</span><br><span class="line"><span class="section">= Nil.reverse</span></span><br><span class="line"><span class="section">= Nil</span></span><br></pre></td></tr></table></figure><p>이번엔 reduction step이다.</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// left</span></span><br><span class="line"><span class="bullet">(x :: </span>xs).reverse.reverse</span><br><span class="line"><span class="section">= (xs.reverse ++ List(x)).reverse     // by 2nd clause of reverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="bullet">x :: </span>xs</span><br><span class="line"><span class="section">= x :: xs.reverse.reverse       // by induction hypothesis (가설에 의해)</span></span><br></pre></td></tr></table></figure><p>두 개를 합쳐보면,</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(xs<span class="selector-class">.reverse</span> ++ List(x))<span class="selector-class">.reverse</span> = x :: xs<span class="selector-class">.reverse</span><span class="selector-class">.reverse</span></span><br></pre></td></tr></table></figure><p>직접적으로 induction이 불가하므로, 동일한 연산을 일반화 시켜보자<br>여기서는 xs.reverse를 ys로 치환하도록 하자. 그럼 수식이 아래와 같이 바뀐다.</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ys ++ <span class="built_in">List</span>(x)).<span class="built_in">reverse</span> = x :: ys.<span class="built_in">reverse</span></span><br></pre></td></tr></table></figure><p>그럼 이제 두번째 induction인 ys를 증명하면 동일함을 입증할 수 있겠다.<br>우선 base case 부터 살펴보자</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// <span class="built_in">left</span></span><br><span class="line">(Nil ++ List(x)).reverse</span><br><span class="line">= List(x).reverse       // by <span class="number">1</span>st clause of ++</span><br><span class="line">= (x <span class="symbol">:</span><span class="symbol">:</span> Nil).reverse    // by definition of List</span><br><span class="line">= Nil.reverse ++ List(x)</span><br><span class="line">= Nil ++ (x <span class="symbol">:</span><span class="symbol">:</span> Nil)     // by <span class="number">2</span>nd clause of reverse</span><br><span class="line">= x <span class="symbol">:</span><span class="symbol">:</span> Nil          // by <span class="number">1</span>st clause of ++</span><br><span class="line">= x <span class="symbol">:</span><span class="symbol">:</span> Nil.reverse      // by <span class="number">1</span>st clause of reverse</span><br></pre></td></tr></table></figure><p>결과는 우변의 ys에 Nil을 집어넣었을 때와 동일한 결과과 도출되었으므로 base case를 증명되었다. 이제 reduction step으로 가보자</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// left</span></span><br><span class="line"><span class="bullet">((y :: </span>ys) ++ List(x)).reverse</span><br><span class="line"><span class="section">= (y :: (ys ++ List(x))).reverse    // by 2nd clause of ++</span></span><br><span class="line"><span class="section">= (ys ++ List(x)).reverse ++ List(y)  // by 2nd clause reverse</span></span><br><span class="line"><span class="section">= (x :: ys.reverse) ++ List(y)      // by the induction hypothesis</span></span><br><span class="line"><span class="section">= x :: (ys.reverse ++ List(y))      // by 1st clause of ++</span></span><br><span class="line"><span class="section">= x :: (y :: ys).reverse        // by 2nd clause of reverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="bullet">x :: </span>(y :: ys).reverse</span><br></pre></td></tr></table></figure><p>좌변과 우변이 동일하므로 증명되었다.</p><h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(xs ++ ys) <span class="built_in">map</span> <span class="attr">f</span> = (xs <span class="built_in">map</span> f) ++ (ys <span class="built_in">map</span> f)</span><br><span class="line"></span><br><span class="line">Nil <span class="built_in">map</span> <span class="attr">f</span> = Nil</span><br><span class="line">(x :: xs) <span class="built_in">map</span> <span class="attr">f</span> = f(x) :: (xs <span class="built_in">map</span> f)</span><br></pre></td></tr></table></figure><p>base case..</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// <span class="built_in">left</span></span><br><span class="line">(Nil ++ ys) map f</span><br><span class="line">= ys map f</span><br><span class="line"></span><br><span class="line">// <span class="built_in">right</span></span><br><span class="line">(Nil map f) ++ (ys map f)</span><br><span class="line">= Nil ++ (ys map f)</span><br><span class="line">= ys map f</span><br></pre></td></tr></table></figure><p>reduction step</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// left</span></span><br><span class="line"><span class="bullet">((x :: </span>xs) ++ ys) map f</span><br><span class="line"><span class="section">= (x :: (xs ++ ys)) map f</span></span><br><span class="line"><span class="section">= f(x) :: ((xs ++ ys) map f)</span></span><br><span class="line"><span class="section">= f(x) :: ((xs map f) ++ (ys map f))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="bullet">((x :: </span>xs) map f) ++ (ys map f)</span><br><span class="line"><span class="section">= (f(x) :: (xs map f)) ++ (ys map f)</span></span><br><span class="line"><span class="section">= f(x) :: ((xs map f) ++ (ys map f))</span></span><br></pre></td></tr></table></figure><p>base case, reduction step 모두 좌변과 우변이 같으므로 같음이 증명되었다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;5-1-More-Functions-on-Lists&quot;&gt;&lt;a href=&quot;#5-1-More-Functions-on-Lists&quot; class=&quot;headerlink&quot; title=&quot;5.1 More Functions on Lists&quot;&gt;&lt;/a&gt;5.1 M
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="scala" scheme="http://blueshw.github.io/tags/scala/"/>
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming in Scala week 4</title>
    <link href="http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week4/"/>
    <id>http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week4/</id>
    <published>2016-07-26T14:27:50.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-1-Objects-Everywhere"><a href="#4-1-Objects-Everywhere" class="headerlink" title="4.1 Objects Everywhere"></a>4.1 Objects Everywhere</h2><blockquote><p>퓨어 object-oriented 언어란 모든 value가 object라는 말인데, 그렇다면 스칼라가 퓨어 object-oriented language인가?</p></blockquote><p>스칼라의 모든 값은 object로 표현되기 때문에 퓨어하다 할 수 있다. 예로 scala.Boolean 대신 커스텀으로 Boolean 클래스를 정의한다(자바의 래핑클래스(Integer 등)처럼)</p><p>Boolean 클래스에서는 실제 스칼라 Boolean으로 사용할 수 있었던 연산을 모두 재정의해준다.<br>ifThenElse는 if(cond) f1 else f2과 같다(여기서 f1, f2는 ifThenElse의 파라미터)<br>아래는 ‘&lt;’ 함수를 정의한 예제이다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">claass <span class="keyword">Boolean</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">def</span> &lt; (x: <span class="keyword">Boolean</span>): <span class="keyword">Boolean</span> = ifThenElse(<span class="keyword">false</span>, x)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-Functions-as-Objects"><a href="#4-2-Functions-as-Objects" class="headerlink" title="4.2 Functions as Objects"></a>4.2 Functions as Objects</h2><p>스칼라에서는 function values는 오브젝트로 취급된다. 사실 function type A =&gt; B는 scala.Function1[A, B]의 축약 형태와 같다고 할수 있다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[<span class="title">A</span>, <span class="title">B</span>] &#123;</span></span><br><span class="line">  <span class="keyword">def</span> aaply(<span class="string">x:</span> A): B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, 함수는 apply 메소드를 가진 오브젝트와 같다.<br>익명함수의 경우에는 다음과 같이 확장될 수 있다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(x: <span class="type">Int</span>) =&gt; x * x</span><br><span class="line"></span><br><span class="line"><span class="comment">// is expanded to</span></span><br><span class="line">&#123; <span class="class"><span class="keyword">class</span> <span class="title">AnonFun</span> <span class="keyword">extends</span> <span class="title">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">AnonFun</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shorter</span></span><br><span class="line"><span class="keyword">new</span> <span class="type">FUnctino1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그러니까 실제로 f(a, b) 라는 함수를 call 했을 때, f.apply(a, b)가 불리는 것과 같다는 말이다.<br>예를 들면,</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val f = (x: <span class="built_in">Int</span>) =&gt; x * x</span><br><span class="line">f(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">val f = new <span class="function"><span class="keyword">Function</span></span>[<span class="built_in">Int</span>. <span class="built_in">Int</span>] &#123;</span><br><span class="line">  def apply(x: <span class="built_in">Int</span>) = x * x</span><br><span class="line">&#125;</span><br><span class="line">f.apply(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>위에서 본것처럼 apply 메소드는 오브젝트 안에 있을 때 오브젝트 이름 그대로 호출할 수 있다. 지난번에 봤던 List를 예로 들어보면 아래와 같다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">T</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">List</span>[<span class="type">T</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cons</span>[<span class="type">T</span>](<span class="params">val head: <span class="type">T</span>, val tail: <span class="type">List</span>[<span class="type">T</span>]</span>) <span class="keyword">extends</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span> </span>= <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nil</span>[<span class="type">T</span>] <span class="keyword">extends</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">Nothing</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"Nil.head"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">Nothing</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"Nil.tail"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List()</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">List</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">T</span>]: <span class="type">List</span>[<span class="type">T</span>] = <span class="keyword">new</span> <span class="type">Nil</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">T</span>](x: <span class="type">T</span>): <span class="type">List</span>[<span class="type">T</span>] = <span class="keyword">new</span> <span class="type">Cons</span>(x, <span class="keyword">new</span> <span class="type">Nil</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>[<span class="type">T</span>](x1: <span class="type">T</span>, x2: <span class="type">T</span>): <span class="type">List</span>[<span class="type">T</span>] = <span class="keyword">new</span> <span class="type">Cons</span>(x1, <span class="keyword">new</span> <span class="type">Cons</span>(x2, <span class="keyword">new</span> <span class="type">Nil</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// objectd 이름 그대로 호출 가능, 파라미터가 맞는 apply 메소드를 알아서 찾아감</span></span><br><span class="line">  <span class="keyword">val</span> a = <span class="type">List</span>()</span><br><span class="line">  <span class="keyword">val</span> b = <span class="type">List</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">val</span> c = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-Subtyping-and-Generics"><a href="#4-3-Subtyping-and-Generics" class="headerlink" title="4.3 Subtyping and Generics"></a>4.3 Subtyping and Generics</h2><p>스칼라 언어에서 다형성을 표현하는 두가지 방법은 subtyping과 generic 이다.</p><h3 id="Type-Bounds"><a href="#Type-Bounds" class="headerlink" title="Type Bounds"></a>Type Bounds</h3><blockquote><p>takes an IntSet<br>returns the IntSet itself if all this elements are positive<br>throws an exception otherwise</p></blockquote><p>위의 세가지 조건을 충족시킬 수 있는 함수를 생각해보자.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assertAllPos</span><span class="params">(<span class="symbol">s:</span> IntSet)</span></span>: IntSet</span><br></pre></td></tr></table></figure><p>대부분의 경우는 위의 함수로 충분하지만 정확히 하자면 다음과 같이 쓸수 있다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def assertAllPos[<span class="string">S &lt;: IntSet</span>](<span class="link">r: S</span>): S = ...</span><br></pre></td></tr></table></figure><p>“S &lt;: IntSet”을 type parameter S의 upper bound라고 한다. 이것은 S가 반드시 IntSet의 subType(또는 자신)이어야 한다는 말과 같다.<br>반대로 “S :&gt; T”는 S가 T의 superType이거나 T가 S의 subType이라는 말이다. 이를 lower Bounds 라고 한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[S &gt;: NonEmpty]</span><br></pre></td></tr></table></figure><p>위에서 말했듯이 위의 의미는 S가 NonEmpty 클래스의 supertype인데, S는 NonEmpty의 모든 base 클래스(자신 포함)가 해당된다. 여기서 S는 NonEmpty, IntSet, AnyRef, Any가 될 수 있다.</p><p>마지막은 Mixed Bound</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[S &gt;: NonEmpty &lt;: IntSet]</span><br></pre></td></tr></table></figure><p>이것의 의미는 S가 NonEmtpy와 IntSet 타입 사이의 모든 타입이 될 수 있다는 말과 같다.</p><h3 id="Covariance"><a href="#Covariance" class="headerlink" title="Covariance"></a>Covariance</h3><p>서브클래스의 인스턴스 컬렉션을 상위클래스의 컬렉션으로 보내는 것을 Covariance(공변성)라고 한다. 왜냐하면 subtyping 관계가 컬렉션에서도 그대로 적용되었기 때문이다.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NonEmpty &lt;: <span class="built_in">IntSet</span></span><br><span class="line">// 위가 성립된다면 아래도 성립</span><br><span class="line">List[NonEmpty] &lt;: List[<span class="built_in">IntSet</span>]</span><br></pre></td></tr></table></figure><h3 id="Arrays-in-Scala"><a href="#Arrays-in-Scala" class="headerlink" title="Arrays in Scala"></a>Arrays in Scala</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T[]     <span class="comment">// Java</span></span><br><span class="line"><span class="keyword">Array</span>[T]  <span class="comment">// Scala</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Covariance에 의해 아래가 성립</span></span><br><span class="line">NonEmpty[] &lt;: IntSet[]        <span class="comment">// Java</span></span><br><span class="line"><span class="keyword">Array</span>[NonEmpty] &lt;: <span class="keyword">Array</span>[IntSet]  <span class="comment">// Scala</span></span><br></pre></td></tr></table></figure><p>자바의 Array Typing에는 타입과 관련된 아래의 문제가 있다.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NonEmpty[] <span class="selector-tag">a</span> = new NonEmpty[]&#123;new NonEmpty(<span class="number">1</span>, Empty, Empty)&#125;</span><br><span class="line">IntSet[] <span class="selector-tag">b</span> = a</span><br><span class="line"><span class="selector-tag">b</span>[<span class="number">0</span>] = Empty</span><br><span class="line">NonEmpty s = <span class="selector-tag">a</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>a는 NonEmpty 타입의 Array를 가리키는 포인터이다. 두번째 줄에서 IntSet Array b 에 a를 대입하였다. b가 실제로 카리키는 대상은 NonEmpty List지만, covariance 규칙에 의해 상위 타입의 컬렉션이 하위 타입의 컬렉션을 대신할 수 있다. 세번째 줄에서 b의 첫번째 item에 Empty 클래스를 대입하였다. 마지막으로 a의 첫번째 item을 NonEmpty 타입의 s에 대입하였다. b와 a 는 실제로 가리키는 대상이 같기 때문에 세번째 줄에서 b[0]에 들어간 Empty는 a[0]에서도 동일하게 작동한다. 그런데 마지막 줄에서 Empty 타입의 item 을 NonEmpty 타입에 할당하기 때문에 런타임 에러가 발생한다.</p><h3 id="Liskov-Substitution-Principle"><a href="#Liskov-Substitution-Principle" class="headerlink" title="Liskov Substitution Principle"></a>Liskov Substitution Principle</h3><blockquote><p>If A &lt;: B, then everything one can to do with a value of type B one should also be able to do with a value of type A<br>리스코프 치환원칙은 타입 A와 B가 있을때 하나의 타입이 다른 하나의 서브타입이 될 수 있는 조건에 대해 말해준다.</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in scala</span></span><br><span class="line">val <span class="selector-tag">a</span>: Array[NonEmpty] = Array(new NonEmpty(<span class="number">1</span>, Empty, Empty))</span><br><span class="line">val <span class="selector-tag">b</span>: Array[IntSet] = a</span><br><span class="line"><span class="function"><span class="title">b</span><span class="params">(<span class="number">0</span>)</span></span> = Empty</span><br><span class="line">val s: NonEmpty = a(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>스칼라의 경우에는 두번째 줄에서 컴파일 에러가 난다. 그 이유는 스칼라의 Array는 covariant하지 않기 때문이다. (NonEmpty )</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NonEmpty &lt;: <span class="built_in">IntSet</span></span><br><span class="line">not <span class="built_in">Array</span>[NonEmpty] &lt;: <span class="built_in">Array</span>[<span class="built_in">IntSet</span>]</span><br></pre></td></tr></table></figure><h2 id="4-4-Variance"><a href="#4-4-Variance" class="headerlink" title="4.4 Variance"></a>4.4 Variance</h2><p>스칼라에서 List는 covariant, Array는 성립하지 않는다. 그 이유는 list의 경우에는 immutable한 컬렉션이고, Array는 mutable 하기 때문이다. 보통 mutation을 허용하는 타입은 covariant하지 않다.</p><p>C[T]에서 A &lt;: B인 경우 다음이 성립한다.<br>B가 A의 수퍼타입이면서 C[B]가 C[A]의 수퍼타입인 경우에는 covariant, C[A]가 C[B]의 수퍼타입이면 contravariant</p><ul><li>C[A] &lt;: C[B] 이면 C는 covariant (class C[+A])</li><li>C[A] &gt;: C[B] 이면 C는 contravariant (class C[-A])</li><li>C[A]와 C[B] 둘다 다른것의 서브타입이 아니면 C는 nonvariant (class C[A])</li></ul><p>다음의 두 타입중 어떤 타입이 수퍼타입이고, 어떤 타입이 서브타입인가?<br>함수의 파라미터가 더 구체적인(서브타입) 타입이 들어 갔을때는 반드시 그 타입으로 인자가 넘어와야한다. type B를 보면 파라미터 타입이 IntSet의 서브타입인 NonEmpty이므로 인자가 반드시 NonEmpty 타입이어야 한다. 반면에 type A를 보면, 파라미터 타입이 IntSet이라 NonEmpty 포함 IntSet의 모든 서브타입이 들어 올 수 있다. 리턴타입은 NonEmpty이므로 IntSet이라 할 수 있다. 즉, A는 B의 규칙을 만족시킨다. 게다가 A는 파라미터에 추가로 Empty 같은 타입이 들어 올 수 있으므로, A가 B보다 더 확장된 형태이다.<br>그러므로, B가 A의 수퍼타입이다. 함수의 파라미터는 contravariant하고 함수의 리턴값은 covariant 하기 때문에 A &lt;: B가 참이다.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type A = IntSet =&gt; NonEmpty</span><br><span class="line">type B = NonEmpty =&gt; IntSet</span><br></pre></td></tr></table></figure><p>위의 내용을 요약하면 아래와 같다. </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">If</span> <span class="built_in">A2</span> &lt;: <span class="built_in">A1</span> <span class="keyword">and </span><span class="keyword">B1 </span>&lt;: <span class="keyword">B2, </span>then</span><br><span class="line">  <span class="built_in">A1</span> =&gt; <span class="keyword">B1 </span> &lt;:  <span class="built_in">A2</span> =&gt; <span class="keyword">B2</span></span><br></pre></td></tr></table></figure><blockquote><p>Functions are contravariant in their argument type(s) and covariant in their result type.</p></blockquote><h3 id="Variance-Checks"><a href="#Variance-Checks" class="headerlink" title="Variance Checks"></a>Variance Checks</h3><p>위에서 Array는 mutable한 속성 때문에 covariant하지 못하다는 문제를 살펴봤었다. mutable한 속성이라는 것은 update 가능하다는 말과 같은데, Array 클래스에서 update 함수의 파라미터의 타입이 어떤 문제를 가지고 있는지 살펴보자. 앞서서 covariant 타입은 함수의 result 타입에만 나타날 수 있다고 말했다.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array</span>[+<span class="title">T</span>] &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(<span class="symbol">x:</span> T)</span></span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그런데 위의 Array 클래스의 update 함수를 보면, covariant 타입 T가 파라미터에 쓰여졌기 때문에 Array는 covariant 하지 못<br>한 컨테이너라 할 수 있겠다.</p><p>그래서 앞서서 보았던(4.2) Function1은 사실 아래와 같은 형태이다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[-<span class="title">T</span>, +<span class="title">U</span>] &#123;</span></span><br><span class="line">  <span class="keyword">def</span> apply(<span class="string">x:</span> T): U</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그렇다면 List의 경우는 어떨까?<br>Nil, Cons 클래스의 경우로 살펴보자.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> week4</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">List</span>[+<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">T</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">List</span>[<span class="type">T</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cons</span>[<span class="type">T</span>](<span class="params">val head: <span class="type">T</span>, val tail: <span class="type">List</span>[<span class="type">T</span>]</span>) <span class="keyword">extends</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span> </span>= <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Nil</span> <span class="keyword">extends</span> <span class="title">List</span>[<span class="type">Nothing</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">Nothing</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"Nil.head"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">Nothing</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"Nil.tail"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// val x의 return 타입이 List[Nothing]을 상속받는 Nil object 이므로,</span></span><br><span class="line"><span class="comment">// covariant 규칙에 의해 List[String]으로 리턴 타입을 지정할 수 있다.</span></span><br><span class="line"><span class="comment">// List[Nothing] &lt;: List[String]</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> x: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">Nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nil이 List[Nothing]을 상속하게 만들면 모든 리스트의 서브타입이 된다. 그리고 trait List[T]를 trait List[+T]로 바꿔서 covariant하게 만들어 준다. val x: List[String] = Nil을 입력하게 되면, Nil이 List[Nothing]을 상속받으므로 covariant하게 바뀐 List 속성에 의해서 Nothing 보다 상위 클래스인 String 타입으로 리턴 할 수 있게 되었다.</p><p>List 클래스에 다음과 같은 prepend 메서드를 추가해보자.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> prepend(<span class="string">elem:</span> T): List[T] = <span class="keyword">new</span> Cons(eleml, <span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>컴파일 에러가 난다. 그 이유는 타입 T가 covariant하기 때문에 파라미터에 사용하면 안된다. prepend 메서드가 새로운 리스트를 생성함해도 불구하고 문제가 생기는 이유는 prepend 메서드에 elem의 타입이 T이기 때문이다. 타입 T가 covariant하다면 반드시 result type에만 사용해야 한다.</p><h3 id="Prepend-Violates-LSP"><a href="#Prepend-Violates-LSP" class="headerlink" title="Prepend Violates LSP"></a>Prepend Violates LSP</h3><p>prepend 메서드가 왜 Liskov Substitution Principle을 위반했는지 알아보자<br>xs의 타입이 List[IntSet]인 경우에는 문제가 없다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">xs</span><span class="selector-class">.prepend</span>(<span class="selector-tag">Empty</span>)</span><br></pre></td></tr></table></figure><p>하지만 ys의 타입이 List[NonEmpty]라고 했을 때는 문제가 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ys</span><span class="selector-class">.prepend</span>(<span class="selector-tag">Empty</span>)</span><br></pre></td></tr></table></figure><p>NonEmpty 타입이 들어와야 할 자리에 Empty 타입이 들어왔으므로 타입에러가 발생한다. 그래서 이 경우에는 List[NonEmpty]는 List[IntSet]의 서브타입이 될 수 없다.</p><p>하지만 prepend 메서드는 immutable list에 실제로 존재한다. 어떻게 이게 가능할까? 답은 lower bound에 있다. U &gt;: T는 U가 T의 부모 타입이라는 말이다. 이렇게 되면, elem이 T보다 상위 타입이 오더라도 문제가 되지 않는다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def prepend[<span class="string">U &gt;: T</span>](<span class="link">elem: U</span>): List[U] = new Cons(elem, list)</span><br></pre></td></tr></table></figure><h2 id="4-5-Decomposition"><a href="#4-5-Decomposition" class="headerlink" title="4.5 Decomposition"></a>4.5 Decomposition</h2><p>다음과 같은 class 구조가 있다고 하자</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="comment">// classification</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span></span>: <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isSum</span></span>: <span class="type">Boolean</span></span><br><span class="line">  <span class="comment">// accessor</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numValue</span></span>: <span class="type">Int</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">leftOp</span></span>: <span class="type">Expr</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rightOp</span></span>: <span class="type">Expr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isSum</span></span>: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numValue</span></span>: <span class="type">Int</span> = n</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">leftOp</span></span>: <span class="type">Expr</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">"Number.leftOp"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rightOp</span></span>: <span class="type">Expr</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">"Number.rightOp"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>(<span class="params">e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span></span>: <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isSum</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numValue</span></span>: <span class="type">Int</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">"Sum.numValue"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rightOp</span></span>: <span class="type">Expr</span> = e1</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">leftOp</span></span>: <span class="type">Expr</span> = e2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>무척 쓸모 없어 보이는 메서드들이 여럿 보인다. 일단은 더 나은 코드를 설명하기 위한 단계이므로 참고 살펴보자.<br>그리고 위의 클래스 구조를 evaluation하는 간단한 인터프리터 함수인 eval이 다음과 같다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">eval</span>(e: Expr): Int = &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.isNumber) e.numValue</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (e.isSum) <span class="built_in">eval</span>(e.leftOp) + <span class="built_in">eval</span>(e.rightOp)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unknown expression "</span> + e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이때 다음과 같은 코드가 있다면, 우선 eval 함수가 실행되면서 e가 어떤 타입인지 찾기 위해 classification method인 isSum으로 Sum 타입인지 찾을 것이다. 그리고 그 안의 두 인자가 각각 Number 이므로 또다시 eval 함수 내에서 isNumber에 의해 Number 타입인지 찾을 수 있을 것이다. 뭔가 비효율적으로 보인다.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="name">Sum</span>(<span class="name">Number</span>(<span class="number">1</span>), Number(<span class="number">2</span>))) = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>여기서 만약에 아래와 같은 두개의 클래스가 추가 된다면 어떨까?</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prod</span>(<span class="params">e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span>   <span class="title">//</span> <span class="title">e1</span> <span class="title">*</span> <span class="title">e2</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Var</span>(<span class="params">x: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span>         <span class="title">//</span> <span class="title">Variable</span> '<span class="title">x</span>'</span></span><br></pre></td></tr></table></figure><p>위의 두 클래스는 Number나 Sum과 마찬가지로 Expr을 상속받으므로 trait Expr의 메서드를 모두 구현해야한다. 그리고 isNum, isSum 과 같은 클래스 타입을 찾기 위한 메서드를 2개(isVar, isProd)더 추가해야 할 것이다. 또 var 값을 가져오기 위한 name 메서드도 추가되서 총 3개가 추가된다. 위의 구조에서만 15개의 메서드가 있는데, 단 2개의 클래스만 추가하더라도 더 필요한 메서드가 25개(Expr에 3개, Number에 3개, Sum에 3개, 그리고 새로운 클래스에 각각 8개)나 된다. 이건좀 아닌거 같다.</p><p>메서드를 좀 줄여보자<br>자바에서 사용하는 type test, type cast 메서드를 이용한다.</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scala           Java</span><br><span class="line">x.isInstanceOf[<span class="built_in">T</span>]     x instanceof <span class="built_in">T</span>    // <span class="built_in">type</span> test</span><br><span class="line">x.asInstanceOf[<span class="built_in">T</span>]     (<span class="built_in">T</span>) x       // <span class="built_in">type</span> cast</span><br></pre></td></tr></table></figure><p>평가함수인 eval을 조금 고쳐보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">eval</span>(e: Expr): Int = &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.isInstanceOf[<span class="built_in">Number</span>])</span><br><span class="line">    e.asInstanceOf[<span class="built_in">Number</span>].numValue</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (e.isInstanceOf[Sum])</span><br><span class="line">    <span class="built_in">eval</span>(e.asInstanceOf[Sum].leftOp) + <span class="built_in">eval</span>(e.asInstanceOf[Sum].rightOp)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unknown expression "</span> + e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자바에서 사용하는 타입 test 함수인 instanceof와 타입 캐스팅 하는 방법을 적용하였다. 스칼라에서는 각각의 방법을 함수로 만들어 두었다. 이 방법을 사용하면 위에서 보았던 classification 메서드(isNum, inSum)를 사용할 필요가 없다. 대신에 타입 체크 및 캐스팅 함수가 low-level 함수이기 때문에 불안정한다는 단점이 있다. </p><p>Object-Oriented Decomposition을 이용한 또다른 해법을 살펴보자</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>(<span class="params">e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = e1.eval + e2.eval</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각각의 클래스에 eval 함수를 구현하였다. 각 클래스에 맞게 구현되기 때문에 accessor 함수들도 불필요하다. 이제 많이 깔끔해졌다. 하지만 문제는 여전히 있다. rait에 하나의 메서드가 추가된다면, 나머지 클래스에 모두 구현해야한다는 점이다. 또다른 문제가 있다.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> * b + <span class="keyword">a</span> * c = <span class="keyword">a</span> * (b + <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>위와 같이 축약하기 어렵다. 왜냐하면 이것은 non-local simplification이기 때문이다. 이것은 single object의 메서드로 캡슐화 할 수 없다. sub-tree를 모두 테스트하고 접근해야하는 문제가 있다. </p><h2 id="4-6-Pattern-Matching"><a href="#4-6-Pattern-Matching" class="headerlink" title="4.6 Pattern Matching"></a>4.6 Pattern Matching</h2><p>이전챕터에서 Decomposition을 시도한 몇가지 방법은 아래와 같다.</p><ul><li>Classification and access methods: quadratic explosion</li><li>Type tests and casts: unsafe, low-level</li><li>Object-oriented decomposition: does not always work, need to touch all classes to add a new method.</li></ul><p>classification과 accessor 의 주 목적은 아래와 같다.</p><ul><li>Which subclass was used?</li><li>What were the arguments of the constructor?</li></ul><p>보통 사용되는 new Sum(e1, e2)와 같은 형태의 생성자를 스칼라는 case class라는 문법을 통해서 자동으로 Pattern Matching 시켜준다. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 두개의 case class</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Sum</span>(<span class="params">e1: </span></span></span><br><span class="line"><span class="class"><span class="params"><span class="type">Expr</span>, e2: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">실제</span> <span class="title">apply</span> <span class="title">메서드의</span> <span class="title">형태</span></span></span><br><span class="line"><span class="class"><span class="title">//</span> <span class="title">Number</span>(<span class="params">1</span>), <span class="title">Sum</span>(<span class="params">2, 3</span>)<span class="title">과</span> <span class="title">같이</span> <span class="title">호출될꺼다</span></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(n: <span class="type">Int</span>) = <span class="keyword">new</span> <span class="type">Number</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Sum</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span>) = <span class="keyword">new</span> <span class="type">Sum</span>(e1, e2)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// eval 함수를 이용해서 패턴매칭, </span></span><br><span class="line"><span class="comment">// 파라미터 e가 Number냐 Sum이냐에 따라서 자동으로 선택되어 처리</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(e: <span class="type">Expr</span>): <span class="type">Int</span> = e <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Sum</span>(e1, e2) =&gt; eval(e1) + eval(e2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Match-Syntax-rules"><a href="#Match-Syntax-rules" class="headerlink" title="Match Syntax rules"></a>Match Syntax rules</h3><ul><li>match is followed by a sequence of cases, pat =&gt; expr.</li><li>Each case associates an expression expr with a pattern pat.</li><li>A matchError exception is thrown if no pattern matches the value of the selector.</li></ul><p>패턴은 Number, Sum과 같은 contructor로 만들어지며, 인자(variables)는 반드시 소문자로 시작해야한다. 그리고 한 pattern 안에 같은 파라미터 문자를 쓰면 안된다. 상수는 null, true, false를 제외하고는 반드시 대문자로 시작해야한다. 마지막으로 wildcard pattern인 ‘<em>‘은 해당 파라미터를 신경쓰지 않겠다는 것이다. 대체로 해당 case에서 사용되지 않는 파라미터에 ‘</em>‘를 사용한다.</p><p>eval 함수를 trait Expr에 넣어보자.</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> Expr &#123;</span><br><span class="line">  def <span class="keyword">eval</span>: <span class="keyword">Int</span> = this match &#123;</span><br><span class="line">    <span class="keyword">case</span> Number(n) =&gt; n</span><br><span class="line">    <span class="keyword">case</span> Sum(e1, e2) =&gt; e1.<span class="keyword">eval</span> + e2.<span class="keyword">eval</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-Lists"><a href="#4-7-Lists" class="headerlink" title="4.7 Lists"></a>4.7 Lists</h2><p>가장 기본적인 리스트 형태는 아래와 같이 정의할 수 있다.</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List(X1, ..., Xn)</span></span><br><span class="line">val fruit: <span class="keyword">List</span>[String] = <span class="keyword">List</span>(<span class="string">"Apples"</span>, <span class="string">"oranges"</span>, <span class="string">"pears"</span>)</span><br><span class="line">val nums: <span class="keyword">List</span>[<span class="keyword">Int</span>] = <span class="keyword">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">val diag3: <span class="keyword">List</span>[<span class="keyword">List</span>[<span class="keyword">Int</span>]] = <span class="keyword">List</span>(<span class="keyword">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="keyword">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="keyword">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">val <span class="keyword">empty</span>: <span class="keyword">List</span>[Nothing] = <span class="keyword">List</span>()</span><br></pre></td></tr></table></figure><p>스칼라에서 List와 Array는 중요한 두가지 차이가 있다.</p><ul><li>List are immutable - the elements of a list cannot be changed</li><li>Lists are recursive, while arrays are flat</li></ul><p>또한 스칼라에서는 construction operation인 ::(cons라 부름, 지난주의 prepend 함수랑 동일하다)를 이용하여 좀더 간단하게 리스트를 만들 수 있다. cons는 right-associative 연산이기 때문에 우측에서부터 왼쪽으로 하나씩 붙여 나간다는 생각으로 사용하면 된다. 위의 리스트 들을 cons를 이용해서 작성해보면 다음과 같다.</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fruit = <span class="string">"apples"</span> :: (<span class="string">"oranges"</span> :: (<span class="string">"pears"</span> :: Nil))</span><br><span class="line">fruit = <span class="string">"apples"</span> :: <span class="string">"oranges"</span> :: <span class="string">"pears"</span> :: Nil</span><br><span class="line"></span><br><span class="line">nums = <span class="number">1</span> :: (<span class="number">2</span> :: (<span class="number">3</span> :: (<span class="number">4</span> :: Nil)))</span><br><span class="line">nums = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="number">4</span> :: Nil</span><br><span class="line"></span><br><span class="line">empty = Nil</span><br></pre></td></tr></table></figure><p>right-associative 연산이기 때문에 실제 컴파일러는 위의 연산(nums)을 다음과 같이 해석한다.</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="number">4</span> :: Nil</span><br><span class="line">Nils.::(<span class="number">4</span>).::(<span class="number">3</span>).::(<span class="number">2</span>).::(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="sorting-Lists"><a href="#sorting-Lists" class="headerlink" title="sorting Lists"></a>sorting Lists</h3><p>재귀를 이용한 Insertion Sort</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def isort(xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] = &#123;</span><br><span class="line">  xs match &#123;</span><br><span class="line">    <span class="keyword">case</span> Nil =&gt; <span class="keyword">List</span>()</span><br><span class="line">    <span class="keyword">case</span> y :: ys =&gt; insert(y, isort(ys))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def insert(x: <span class="keyword">Int</span>, xs: <span class="keyword">List</span>[<span class="keyword">Int</span>]): <span class="keyword">List</span>[<span class="keyword">Int</span>] = &#123;</span><br><span class="line">  xs match &#123;</span><br><span class="line">    <span class="keyword">case</span> Nil =&gt; <span class="keyword">List</span>(x)</span><br><span class="line">    <span class="keyword">case</span> y :: ys =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (x &lt; y)  x :: xs</span><br><span class="line">      <span class="keyword">else</span> y :: insert(x, ys)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;4-1-Objects-Everywhere&quot;&gt;&lt;a href=&quot;#4-1-Objects-Everywhere&quot; class=&quot;headerlink&quot; title=&quot;4.1 Objects Everywhere&quot;&gt;&lt;/a&gt;4.1 Objects Everywhe
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="scala" scheme="http://blueshw.github.io/tags/scala/"/>
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming in Scala week 3</title>
    <link href="http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week3/"/>
    <id>http://blueshw.github.io/2016/07/26/2016-07-26-functional-programming-in-scala-week3/</id>
    <published>2016-07-26T14:26:50.000Z</published>
    <updated>2017-05-15T15:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-Class-Hierachies"><a href="#3-1-Class-Hierachies" class="headerlink" title="3.1 Class Hierachies"></a>3.1 Class Hierachies</h2><h3 id="abstract-class-추상-클래스"><a href="#abstract-class-추상-클래스" class="headerlink" title="abstract class (추상 클래스)"></a>abstract class (추상 클래스)</h3><p>추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1개 이상 멤버로 가진다. 스칼라의 추상클래스는 자바의 그것과는 달리 new로 선언할 수가 없다(자바의 추상클래스는 new 할당 가능, 대신 인터페이스는 new 할당이 불가함).</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span> <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span> = <span class="keyword">new</span> <span class="type">NonEmpty</span>(x, <span class="keyword">new</span> <span class="type">Empty</span>, <span class="keyword">new</span> <span class="type">Empty</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">"."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonEmpty</span>(<span class="params">elem: <span class="type">Int</span>, left: <span class="type">IntSet</span>, right: <span class="type">IntSet</span></span>) <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span> =</span><br><span class="line">    <span class="keyword">if</span> (x &lt; elem) <span class="keyword">new</span> <span class="type">NonEmpty</span>(elem, left incl x, right)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; elem) <span class="keyword">new</span> <span class="type">NonEmpty</span>(elem, left, right incl x)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> =</span><br><span class="line">    <span class="keyword">if</span> (x &lt; elem) left contains x</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; elem) right contains x</span><br><span class="line">    <span class="keyword">else</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">"&#123;"</span> + left + elem + right + <span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> t1 = <span class="keyword">new</span> <span class="type">NonEmpty</span>(<span class="number">3</span>, <span class="keyword">new</span> <span class="type">Empty</span>, <span class="keyword">new</span> <span class="type">Empty</span>)</span><br><span class="line"><span class="comment">// t1: NonEmpty = &#123;.3.&#125;</span></span><br><span class="line"><span class="keyword">val</span> t2 = t1 incl <span class="number">4</span></span><br><span class="line"><span class="comment">//t1: NonEmpty = &#123;.3.&#125;</span></span><br></pre></td></tr></table></figure><p>위에서 IntSet은 Empty와 NonEmpty클래스의 base class 이다. 구현체가 없는 incl 메소드와 contains 메소드는 각각 Empty와 NonEmpty 클래스에서 구현하게 된다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">foo</span> </span>= <span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bar</span></span>: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span> </span>= <span class="number">2</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bar</span> </span>= <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Base 클래스의 foo 메서드는 구현체가 있고 bar 메서드는 구현체가 없다. 구현체가 없는 bar 메서드 같은 경우에는 Sub 클래스에서 바로 구현해주면 되지만, 구현체가 없는 foo 메서드는 반드시 메서드 앞에 override 키워드를 붙여서 재정의 해야한다.(참고로 bar 메서드 앞에 override 키워드를 붙이는 것은 optional)<br>자바같은 경우 메소드 오버라이드 할때는 별도의 modifier를 지정해주지 않는다. scala에서 이렇게 하는 이유는 override 키워드가 없는 경우에는 실제로 어떤 메서드가 오버라이드되는지 모르기 때문에 잘못된 오버라이드로 인해 Base 클래스의 메서드가 영향을 받을 수도 있기 때문이다.</p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>여러개의 instance를 만들 필요 없는 클래스 같은 경우에는 간단히 object를 이용한다. object 정의는 class 정의와 동일하지만 new 키워드로 여러개의 instance를 만들 수 없고 단지 하나의 object로 작동한다(singleton object).<br>오직 Empty 클래스에만 object를 쓸 수 있는데, 그 이유는 NonEmpty 클래스는 몇개의 파라미터를 가지고 있다. object는 value라 했으므로, object가 정의됨과 동시에 모두 평가되어야하므로 파라미터로 인한 값의 변화를 취할수 없다.<br>evaluation 측면에서 보자면, 위에서도 얘기 했듯이  object 자체는 이미 value기 때문에 아래와 같이 Empty로 바뀐 부분이 별도의 evalutaion 과정이 불필요하다.  </p><h3 id="exercise-union-함수-구현"><a href="#exercise-union-함수-구현" class="headerlink" title="exercise - union 함수 구현"></a>exercise - union 함수 구현</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">incl</span></span>(x: <span class="type">Int</span>): <span class="type">IntSet</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">contains</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">union</span></span>(other: <span class="type">IntSet</span>): <span class="type">IntSet</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Empty</span> <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">union</span></span>(other: <span class="type">IntSet</span>) = other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonEmpty</span>(<span class="params">elem: <span class="type">Int</span>, left: <span class="type">IntSet</span>, right: <span class="type">IntSet</span></span>) <span class="keyword">extends</span> <span class="title">IntSet</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">union</span></span>(other: <span class="type">IntSet</span>) =</span><br><span class="line">    ((left union right) union other) incl elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>으아… 어렵다<br>대략 짐작해보자면, (left union right) 부분이 실행되면 left가 현재 node가 되고 right가 other가 된다. 계속해서 깊게 내려가다 보면, 언젠가 leaf node가 나오게 되는데 leaf node의 left와 right는 모두 Empty이므로 결국 incl elem에 의해 자기자신이 리턴된다. 그리고 한칸씩 올라오면서 left의 elem을 떼다가 right 트리에 include를 시도하는 과정을 거친다. 그 과정이 계속되면, 결국은 하나의 binary tree가 만들어진다.</p><h3 id="동적-바인딩"><a href="#동적-바인딩" class="headerlink" title="동적 바인딩"></a>동적 바인딩</h3><p>메소드를 포함하는 object 타입은 런타임에 메소드가 실행된다.</p><h2 id="3-2-How-Classes-Are-Organized"><a href="#3-2-How-Classes-Are-Organized" class="headerlink" title="3.2 How Classes Are Organized"></a>3.2 How Classes Are Organized</h2><h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><p>자바의 패키지 지정 방식과 같다. </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package progfun.examples</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">object</span> Hello &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>위와 같은 패키지와 object가 있다면, progfun.examples.Hello와 같은 full qualified name으로 Hello 오브젝트에 접근 가능하다</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> week3.Rational           <span class="comment">// imports just Rational</span></span><br><span class="line"><span class="keyword">import</span> week3.&#123;Rational, Hello&#125;  <span class="comment">// imports both Rational and Hello</span></span><br><span class="line"><span class="keyword">import</span> week3._                  <span class="comment">// import everything in package week3</span></span><br></pre></td></tr></table></figure><p>import 하는 방법은 자바와 거의 비슷한데 몇가지 다른점이 있다면, 첫째로는 한줄에 여러개의 class or object를 호출하기 위해서 중괄호를 사용하는 방법이 있다. 그리고 특정 패키지의 모든 class 와 object를 가져오기 위해 ‘_’를 이용할 수 있다.</p><p>스칼라 프로그램에서 자동으로 import되는 패키지 또는 obejct<br> All members of package scala<br> All members of package java.lang<br> All members of the singleton object scala.Predef</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require       scala<span class="selector-class">.Predef</span><span class="selector-class">.require</span></span><br><span class="line">assert        scala<span class="selector-class">.Predef</span><span class="selector-class">.assert</span></span><br></pre></td></tr></table></figure><h3 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h3><p>스칼라도 자바처럼 상속을 하나의 클래스에서만 받을 수 있다. 그렇기 때문에 자바와 동일하게 여러개의 슈퍼타입이 필요한 경우 traits 키워드를 이용하여 구현할 수 있다. 참고로 trait 키워드는 abstract class 와 동일하다.  </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Planar</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">height</span></span>: <span class="type">Int</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">width</span></span>: <span class="type">Int</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">surface</span> </span>= height  width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> <span class="keyword">with</span> <span class="title">Planar</span> <span class="keyword">with</span> <span class="title">Movable</span> ...</span></span><br></pre></td></tr></table></figure><p>클래스와 오브젝트 traits 셋다 traits를 상속받을 수 있다. 그리고 interface 처럼 하나의 클래스가 여러개의 traits 상속이 가능하다. traits가 자바의 interface와 비슷해보이지만 field를 가질 수 있는 점과, 실제 구현 메서드를 가질 수 있는 점에서 더 강력하다 할 수 있다. 자바에도 추상클래스(abstract class)가 있지만, 추상클래스는 말그대로 클래스이기 때문에 인터페이스처럼 여러개를 구현하지는 못한다. 그렇기 때문에 스칼라의 trait가 좀 더 유연하게 사용될 수 있다. 대신 traits는 파라미터를 가질 수 없다는 단점이 있다.</p><h3 id="스칼라-타입-클래스-구조-Scala’s-Class-Hierarchy"><a href="#스칼라-타입-클래스-구조-Scala’s-Class-Hierarchy" class="headerlink" title="스칼라 타입 클래스 구조 (Scala’s Class Hierarchy)"></a>스칼라 타입 클래스 구조 (Scala’s Class Hierarchy)</h3><p><img src="http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png" alt="스칼라 타입 클래스 구조"></p><p>출처 : <a href="http://docs.scala-lang.org/tutorials/tour/unified-types.html" rel="external nofollow noopener noreferrer" target="_blank">http://docs.scala-lang.org/tutorials/tour/unified-types.html</a></p><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><ul><li>모든 타입의 가장 상위 타입, ‘==’, ‘!=’, </li><li>‘equals’, ‘hashCode’, ‘toString’</li></ul><h4 id="AnyRef"><a href="#AnyRef" class="headerlink" title="AnyRef"></a>AnyRef</h4><ul><li>Any 클래스를 상속받는다. </li><li>모든 레퍼런스 타입(ex. List, String)의 기본 타입이다. </li><li>java.lang.Object의 별칭이다.</li></ul><h4 id="AnyVal"><a href="#AnyVal" class="headerlink" title="AnyVal"></a>AnyVal</h4><ul><li>Any 클래스를 상속받는다.</li><li>모든 primitive types(Int, Float, Char 등)의 베이스 타입이다</li></ul><h4 id="Scala-Nothing"><a href="#Scala-Nothing" class="headerlink" title="Scala.Nothing"></a>Scala.Nothing</h4><ul><li>모든 다른 AnyVal 타입의 subType이다. </li><li>값을 가지지 않는다. </li><li>함수가 비정상적으로 종료되거나 예외가 발생할 경우 Nothing을 리턴할 수 있다.</li><li>비어있는 collection을 요소 타입으로서 존재 (ex. Set[Nothing])</li></ul><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p> The type of null is Null, null의 타입은 Null이라는 말<br> 모든 다른 AnyRef 타입의 subType이다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">val</span> <span class="string">x</span> <span class="string">=</span> <span class="literal">null</span>          <span class="string">//</span> <span class="attr">x:</span> <span class="literal">Null</span></span><br><span class="line"><span class="string">val</span> <span class="attr">y:</span> <span class="string">String</span> <span class="string">=</span> <span class="literal">null</span>  <span class="string">//</span> <span class="attr">y:</span> <span class="string">String</span></span><br><span class="line"><span class="string">val</span> <span class="attr">z:</span> <span class="string">Int</span> <span class="string">=</span> <span class="literal">null</span>     <span class="string">//</span> <span class="attr">error:</span> <span class="string">type</span> <span class="string">mismatch,</span> <span class="string">레퍼런스</span> <span class="string">타입만</span> <span class="string">적용</span></span><br></pre></td></tr></table></figure><h2 id="3-3-Polymorphism"><a href="#3-3-Polymorphism" class="headerlink" title="3.3 Polymorphism"></a>3.3 Polymorphism</h2><p>아래 두 Cons 클래스는 동일한 표현이다.<br>클래스 파라미터에 value를 사용하는 것은, implementaion 해야할 함수를 파라미터에 직접 구현하는 것과 같다.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cons</span>(<span class="params">val head: <span class="type">Int</span>, val tail: <span class="type">IntList</span></span>) <span class="keyword">extends</span> <span class="title">IntList</span> </span>&#123; ... &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 즉, _head, _tail 은 쓰지 않는 이름</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cons</span>(<span class="params">_head: <span class="type">Int</span>, _tail: <span class="type">IntList</span></span>) <span class="keyword">extends</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> head = _head</span><br><span class="line">  <span class="keyword">val</span> tail = _tail</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cons 클래스와 List trait를 generic하게 구현한다</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">T</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">List</span>[<span class="type">T</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cons</span>[<span class="type">T</span>](<span class="params">val head: <span class="type">T</span>, val tail: <span class="type">List</span>[<span class="type">T</span>]</span>) <span class="keyword">extends</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span> </span>= <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nil</span>[<span class="type">T</span>] <span class="keyword">extends</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">head</span></span>: <span class="type">Nothing</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"Nil.head"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tail</span></span>: <span class="type">Nothing</span> = <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NoSuchElementException</span>(<span class="string">"Nil.tail"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수도 제네릭하게 구현할 수 있다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def singleton[<span class="string">T</span>](<span class="link">elem: T</span>) = new Cons(elem, new Nil[T])</span><br><span class="line"></span><br><span class="line">singleton[<span class="string">Int</span>](<span class="link">1</span>)</span><br><span class="line">singleton[<span class="string">Boolean</span>](<span class="link">true</span>)</span><br><span class="line"></span><br><span class="line">// 아래와 같이 호출가능</span><br><span class="line">singleton(1)</span><br><span class="line">singleton(true)</span><br></pre></td></tr></table></figure><p>마지막 두 줄과 같이 호출 가능한 이유는 스칼라 컴파일러가 함수 call이 발생하면 해당 함수의 파라미터 타입을 추론할 수 있기 때문이다.</p><h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><blockquote><p>Polymorphism means that a function type comes “in many forms”.<br>프로그램 측면에서 보면, 함수의 파라미터가 여러 타입으로 적용할 수 있고, 타입은 다양한 타입의 인스턴스를 가질 수 있다는 말이다.</p></blockquote><h3 id="다형성의-두가지-주요개념"><a href="#다형성의-두가지-주요개념" class="headerlink" title="다형성의 두가지 주요개념"></a>다형성의 두가지 주요개념</h3><ul><li>subtyping : instance of a subclass can be passed to a base class</li><li>generics : instances of a function or class are created by type parameterization</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-1-Class-Hierachies&quot;&gt;&lt;a href=&quot;#3-1-Class-Hierachies&quot; class=&quot;headerlink&quot; title=&quot;3.1 Class Hierachies&quot;&gt;&lt;/a&gt;3.1 Class Hierachies&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="programming" scheme="http://blueshw.github.io/categories/programming/"/>
    
    
      <category term="scala" scheme="http://blueshw.github.io/tags/scala/"/>
    
      <category term="coursera" scheme="http://blueshw.github.io/tags/coursera/"/>
    
  </entry>
  
</feed>
