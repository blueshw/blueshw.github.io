{"data":{"site":{"siteMetadata":{"title":"bono's blog","author":"bono"}},"markdownRemark":{"id":"bb030022-8c79-5e70-a047-ef0d278a7864","excerpt":"6.1 Other Collections 이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자. Vector 리스트의 경우에는 첫번째 element…","html":"<h2>6.1 Other Collections</h2>\n<p>이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자.</p>\n<h3>Vector</h3>\n<p>리스트의 경우에는 첫번째 element 에 접근하는게 마지막 element 에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector 는 리스트 보다 access pattern 이 훨씬 균형잡혀 있다.</p>\n<p>벡터는 최초에 2^5(32 개)의 원소를 가지는 array 가 만들어 진다. 32 개가 넘는 원소가 필요하게 되면, 그다음은 32 개를 추가로 만드는 것이 아니라, 2^5 * 2^5 개, 그러니깐 총 2^10(1024 개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32 개보다 커지면, 처음 만들어진 32 개짜리 벡터는 각각의 32 개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32 개짜리 원소에서 1024 개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다.</p>\n<p>또 다른 장점으로는 map, for, filter, fold 와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32 개가 하나의 묶음이다보니 a single cache line 에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list 는 vector 에 비해서 locality 가 나쁘다고 할 수 있다.</p>\n<p>vector 가 이렇게 좋다는데, list 를 써야하는 이유는 무엇일까? recursive data structure 의 head 를 취하고 나머지를 다시 연산하는 모델 안에서는 list 가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head 를 취하기가 훨씬 쉽기 때문이다. 하지만 vector 의 경우 depth 가 1 일때는 몰라도 depth 가 1 만 더 증가해도 훨씬 복잡해진다.</p>\n<p>list 의 concat 연산 (::)은 vector 에서 다음과 같이 쓰인다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>x&nbsp;+:&nbsp;xs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;xs&nbsp;앞에&nbsp;x를&nbsp;포함하는&nbsp;새로운&nbsp;벡터를&nbsp;붙인다.</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>xs&nbsp;:+&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;xs&nbsp;뒤에&nbsp;x를&nbsp;포함하는&nbsp;새로운&nbsp;벡터를&nbsp;붙인다.</span></span></div></pre></div>\n<p>벡터 또한 immutable 하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root 까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.</p>\n<h3>Collection Hierachy</h3>\n<p>스칼라의 collection 은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List 와 Vector 가 속하는 Seq, 나머지는 Set 과 Map 이다.</p>\n<p><img src=\"http://docs.scala-lang.org/resources/images/collections.immutable.png\" alt=\"Collectino Hierachy\"></p>\n<p>Array 와 String 는 점선으로 되어있는데, 이들도 Seq 로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;Array</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;xs&nbsp;=&nbsp;Array(1,&nbsp;2,&nbsp;3,&nbsp;44)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>xs&nbsp;map&nbsp;(x&nbsp;=&gt;&nbsp;x&nbsp;*&nbsp;2)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;res0&nbsp;:&nbsp;Array[Int]&nbsp;=&nbsp;Array(2,&nbsp;4,&nbsp;6,&nbsp;88)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;String</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;s&nbsp;=&nbsp;&quot;Hello&nbsp;World&quot;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>s&nbsp;filter&nbsp;(c&nbsp;=&gt;&nbsp;c.isUpper)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;res1:&nbsp;String&nbsp;=&nbsp;HW</span></span></div></pre></div>\n<h3>Range</h3>\n<p>Range 는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;r:&nbsp;Range&nbsp;=&nbsp;1&nbsp;until&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;s:&nbsp;Range&nbsp;=&nbsp;1&nbsp;to&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>1&nbsp;to&nbsp;10&nbsp;by&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1,&nbsp;4,&nbsp;7,&nbsp;10</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>6&nbsp;to&nbsp;1&nbsp;by&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;6,&nbsp;4,&nbsp;2</span></span></div></pre></div>\n<h3>Some more Sequence Operations</h3>\n<ul>\n<li>\n<p>xs exists p : p 함수의 조건을 만족하는 원소가 있는지</p>\n</li>\n<li>\n<p>xs forall p : 모든 원소가 p 함수의 조건을 만족하는지</p>\n</li>\n<li>\n<p>xs zip ys : 두 collection 의 원소를 pair 로 가지는 새로운 collection 생성, 타입은 xs</p>\n</li>\n<li>\n<p>xs.unzip : zip 형태의 collection 을 분해해서 List 의 tuples 을 만듦, Array 는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.</p>\n</li>\n<li>\n<p>xs.flatMap f : 모든 element 에 collection-valued functino f 를 적용</p>\n</li>\n<li>\n<p>xs.sum : numeric collection 의 요소들의 합</p>\n</li>\n<li>\n<p>xs.product : numeric collection 의 요소들의 곱</p>\n</li>\n<li>\n<p>xs.max : 최고값</p>\n</li>\n<li>\n<p>xs.min : 최소값</p>\n</li>\n</ul>\n<h3>Scalar Product</h3>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;a:&nbsp;Vector[Double]&nbsp;=&nbsp;Vector(1.0,&nbsp;2.0,&nbsp;3.0)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;b:&nbsp;Vector[Double]&nbsp;=&nbsp;Vector(3.0,&nbsp;4.0,&nbsp;5.0)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;scalarProduct(xs:&nbsp;Vector[Double],&nbsp;ys:&nbsp;Vector[Double]):&nbsp;Double&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;(xs&nbsp;zip&nbsp;ys).map(xy&nbsp;=&gt;&nbsp;xy._1&nbsp;*&nbsp;xy._2).sum</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>scalarProduct(a,&nbsp;b)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;scalarProduct2(xs:&nbsp;Vector[Double],&nbsp;ys:&nbsp;Vector[Double]):&nbsp;Double&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;(xs&nbsp;zip&nbsp;ys).map{&nbsp;case&nbsp;(x,&nbsp;y)&nbsp;=&gt;&nbsp;x&nbsp;*&nbsp;y&nbsp;}.sum</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>scalarProduct2(a,&nbsp;b)</span></span></div></pre></div>\n<p>두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs 와 ys 를 zip 으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case 문으로 대체할 수 있다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>{case&nbsp;p1&nbsp;=&gt;&nbsp;e1&nbsp;...&nbsp;case&nbsp;pn&nbsp;=&gt;&nbsp;en}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;위와&nbsp;동일</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>x&nbsp;=&gt;&nbsp;x&nbsp;match&nbsp;{&nbsp;case&nbsp;p1&nbsp;=&gt;&nbsp;e1&nbsp;...&nbsp;case&nbsp;pn&nbsp;=&gt;&nbsp;en&nbsp;}</span></span></div></pre></div>\n<h3>isPrime</h3>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;isPrime(n:&nbsp;Int):&nbsp;Boolean&nbsp;=&nbsp;(2&nbsp;until&nbsp;n)&nbsp;forall&nbsp;(x&nbsp;=&gt;&nbsp;(n&nbsp;%&nbsp;x)&nbsp;!=&nbsp;0)</span></span></div></pre></div>\n<p>2 부터 n 전까지의 수가 모두 n 으로 나누어 떨어지지 않으면 n 을 prime number(소수)라 할 수 있다.</p>\n<h2>6.2 Combinatorial Search and For-Expressions</h2>\n<p>양수 n 이 있고, 또다른 양수 i 와 j 가 1 &#x3C;= j &#x3C; i &#x3C; n 을 만족하고 i + j 가 소수라는 조건이 있다.\n코드로 나타내면 다음과 같다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;n&nbsp;=&nbsp;7</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>(1&nbsp;until&nbsp;n)&nbsp;map&nbsp;(i&nbsp;=&gt;&nbsp;(1&nbsp;until&nbsp;i)&nbsp;map&nbsp;(j&nbsp;=&gt;&nbsp;(i,&nbsp;j)))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;result</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>res0:&nbsp;scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Int,&nbsp;Int)]]&nbsp;=&nbsp;Vector(Vector(),&nbsp;Vector((2,1)),&nbsp;Vector((3,1),&nbsp;(3,2)),&nbsp;Vector((4,1),&nbsp;(4,2),&nbsp;(4,3)),&nbsp;Vector((5,1),&nbsp;(5,2),&nbsp;(5,3),&nbsp;(5,4)),&nbsp;Vector((6,1),&nbsp;(6,2),&nbsp;(6,3),&nbsp;(6,4),&nbsp;(6,5)))</span></span></div></pre></div>\n<p>음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores 가 나왔다.\nRange 는 Seq 의 하위 타입이지만 사실 그 중간에 IndexedSeq 라는 타입이 존재한다. 결과값으로 pair 가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair 를 담을 가장 적합한 타입인 Vector 가 선택되어 나타난것이다.</p>\n<p>원래 우리가 찾으려고 했던 결과는 Vector 의 Vector 가 아니라 pair 를 하나의 single list 에 담아져야 한다. 그래서 모든 sub-sequences 를 foldRight 와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>(xss&nbsp;foldRight&nbsp;Seq[Int]())(_&nbsp;++&nbsp;_)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;equvalently</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>xss.flatten</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;so,&nbsp;원래식&nbsp;포함해서&nbsp;아래와&nbsp;같이&nbsp;나타낼&nbsp;수&nbsp;있다.</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>((1&nbsp;until&nbsp;n)&nbsp;map&nbsp;(i&nbsp;=&gt;&nbsp;(1&nbsp;until&nbsp;i)&nbsp;map&nbsp;(j&nbsp;=&gt;&nbsp;(i,&nbsp;j)))).flatten</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;아래의&nbsp;법칙을&nbsp;이용하면</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>xs&nbsp;flatMap&nbsp;f&nbsp;=&nbsp;(xs&nbsp;map&nbsp;f).flatten</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;더&nbsp;간단해질&nbsp;수&nbsp;있다.</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>(1&nbsp;until&nbsp;n)&nbsp;flatMap&nbsp;(i&nbsp;=&gt;&nbsp;(1&nbsp;until&nbsp;i)&nbsp;map&nbsp;(j&nbsp;=&gt;&nbsp;(i,&nbsp;j)))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;result</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>res0:&nbsp;scala.collection.immutable.IndexedSeq[(Int,&nbsp;Int)]&nbsp;=&nbsp;Vector((2,1),&nbsp;(3,1),&nbsp;(3,2),&nbsp;(4,1),&nbsp;(4,2),&nbsp;(4,3),&nbsp;(5,1),&nbsp;(5,2),&nbsp;(5,3),&nbsp;(5,4),&nbsp;(6,1),&nbsp;(6,2),&nbsp;(6,3),&nbsp;(6,4),&nbsp;(6,5))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;두&nbsp;합이&nbsp;prime인것만&nbsp;추려야함,&nbsp;이전&nbsp;챕터에서&nbsp;만든&nbsp;isPrime&nbsp;이용</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>(1&nbsp;until&nbsp;n)&nbsp;flatMap&nbsp;(i&nbsp;=&gt;&nbsp;(1&nbsp;until&nbsp;i)&nbsp;map&nbsp;(j&nbsp;=&gt;&nbsp;(i,&nbsp;j)))&nbsp;filter&nbsp;(pair&nbsp;=&gt;&nbsp;isPrime(pair._1&nbsp;+&nbsp;pair._2))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;result</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>res0:&nbsp;scala.collection.immutable.IndexedSeq[(Int,&nbsp;Int)]&nbsp;=&nbsp;Vector((2,1),&nbsp;(3,2),&nbsp;(4,1),&nbsp;(4,3),&nbsp;(5,2),&nbsp;(6,1),&nbsp;(6,5))</span></span></div></pre></div>\n<h3>For-Expression</h3>\n<p>for loop 에 대해서 알아보자</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>case&nbsp;class&nbsp;Person(name:&nbsp;String,&nbsp;age:&nbsp;Int)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;20살&nbsp;이상인&nbsp;사람만&nbsp;가져오고&nbsp;싶을때</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>for&nbsp;(p&nbsp;&lt;-&nbsp;persons&nbsp;if&nbsp;p.age&nbsp;&gt;&nbsp;20)&nbsp;yield&nbsp;p.name</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;아래와&nbsp;같음</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>persons&nbsp;filter&nbsp;(p&nbsp;=&gt;&nbsp;p.age&nbsp;&gt;&nbsp;20)&nbsp;map&nbsp;(p&nbsp;=&nbsp;&gt;&nbsp;p.name)</span></span></div></pre></div>\n<p>기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop 는 어떤 요소가 변할 수 있는 side effect 가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>for&nbsp;(s)&nbsp;yield&nbsp;e</span></span></div></pre></div>\n<p>for-expression 을 위와같이 단순화 시킬 수 있다.</p>\n<blockquote>\n<p>s is a sequence of generators and filters\ne is an expression whose value is returned by an iteration</p>\n</blockquote>\n<ul>\n<li>generator 의 p &#x3C;- e 에서 p 는 하나의 패턴이고, e 는 컬렉션의 값이다.</li>\n<li>filter 의 f 는 boolean expression 이다.</li>\n<li>몇개의 generator 가 있을때는 마지막이 처음보다 빠르다. why?</li>\n<li>( s )는 { s }처럼 사용할 수도 있다.</li>\n</ul>\n<h3>example</h3>\n<p>이전에 보았던 문제를 for loop 를 이용해 다시 만들어 보자.\n첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair 를 구하는 함수</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>for&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;i&nbsp;&lt;-&nbsp;1&nbsp;until&nbsp;n</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;j&nbsp;&lt;-&nbsp;1&nbsp;until&nbsp;i</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;if&nbsp;isPrime(i+j)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}&nbsp;yield&nbsp;(i,&nbsp;j)</span></span></div></pre></div>\n<p>매우 심플해졌다.</p>\n<p>두번째는 scalarProduct</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;scalarProduct(xs:&nbsp;Vector[Double],&nbsp;ys:&nbsp;Vector[Double]):&nbsp;Double&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;(for&nbsp;((x,&nbsp;y)&nbsp;&lt;-&nbsp;xs&nbsp;zip&nbsp;ys)&nbsp;yield&nbsp;x&nbsp;*&nbsp;y).sum</span></span></div></pre></div>\n<p>따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.</p>\n<h2>6.3 Combinatorial Search Example</h2>\n<p>이번 챕터에서는 Set 에 대해 알아보자.\nSet 도 Seq 와 마찬가지로 Iterable 의 subclass 다. 그래서 Seq 에서 사용하는 대부분의 연산(map, filter 등)을 Set 에서도 동일하게 사용할 수 있다.</p>\n<h3>Sets vs Sequences</h3>\n<ul>\n<li>Set 은 unordered 하다.</li>\n<li>Set 은 중복되는 element 를 가질 수 없다.</li>\n<li>Set 의 fundamental operation 은 요소가 해당 Set 에 포함되는지 확인하는 contains 다.</li>\n</ul>\n<h3>Example: N-Queens</h3>\n<p>예제를 살펴보자.\n체스보드에 서로 위협이 되지 않는 8 개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal 에 둘 수 없는 문제와 같다.</p>\n<p>알고리즘을 살펴보자.</p>\n<ul>\n<li>사이즈 n 인 보드에 k-1 개의 퀸이 놓여진 모든 솔루션 추출</li>\n<li>각 솔루션을 0 에서 n-1 까지의 columns 숫자로 구성된 리스트로 변환</li>\n<li>리스트의 첫번째 요소는 k-1 번째 row 가 될 것이고, k-2, k-3 ...의 퀸을 붙여나간다.</li>\n<li>각 솔루션의 하나의 element 와 함께 set of lists 로 만들어진다.</li>\n<li>kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.</li>\n</ul>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;queens(n:&nbsp;Int):&nbsp;Set[List[Int]]&nbsp;=&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;def&nbsp;placeQueens(k:&nbsp;Int):&nbsp;Set[List[Int]]&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(k&nbsp;==&nbsp;0)&nbsp;Set(List())</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queens&nbsp;&lt;-&nbsp;placeQueens(k&nbsp;-&nbsp;1)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col&nbsp;&lt;-&nbsp;0&nbsp;until&nbsp;n</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;isSafe(col,&nbsp;queens)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;yield&nbsp;col&nbsp;::&nbsp;queens</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;placeQueens(n)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div></pre></div>\n<p>기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth 씩 내려가다보면 마지막에는 빈 셋에 0 에서 n 까지 각각 배치될것이다. 그리고 1 개의 퀸이 배치된 list 들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;isSafe(col:&nbsp;Int,&nbsp;queens:&nbsp;List[Int]):&nbsp;Boolean&nbsp;=&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;val&nbsp;row&nbsp;=&nbsp;queens.length</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;val&nbsp;queensWithRow&nbsp;=&nbsp;(row&nbsp;-1&nbsp;to&nbsp;0&nbsp;by&nbsp;-1)&nbsp;zip&nbsp;queens</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;queensWithRow&nbsp;forall&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;(r,&nbsp;c)&nbsp;=&gt;&nbsp;col&nbsp;!=&nbsp;c&nbsp;&amp;&amp;&nbsp;math.abs(col&nbsp;-&nbsp;c)&nbsp;!=&nbsp;row&nbsp;-&nbsp;r</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div></pre></div>\n<p>기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column 에 속하지 않으면서 대각선에 위치하지 않으면 safe 하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;show(queens:&nbsp;List[Int])&nbsp;=&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;val&nbsp;lines&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(col&nbsp;&lt;-&nbsp;queens)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;Vector.fill(queens.length)(&quot;*&nbsp;&quot;).updated(col,&nbsp;&quot;X&nbsp;&quot;).mkString</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&quot;\\n&quot;&nbsp;+&nbsp;(lines&nbsp;mkString&nbsp;&quot;\\n&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>(queens(8)&nbsp;take&nbsp;3&nbsp;map&nbsp;show)&nbsp;mkString&nbsp;&quot;\\n&quot;</span></span></div></pre></div>\n<p>마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다.\n결과는 아래와 같다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>res0:&nbsp;String&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;X&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;*</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;X&nbsp;*&nbsp;*</span></span></div></pre></div>\n<h2>6.4 Maps</h2>\n<p>Map 에 대해서 알아보자.\nMap 은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value 는 숫자나 문자 등 어떤 타입이든 가능하다.\n또한 Map[Key, Value]는 Key => Value 의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value 를 구할 수 있다는 말과 같다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;key를&nbsp;이용해&nbsp;value를&nbsp;가져올때</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>capitalOfCountry(&quot;andorra&quot;)&nbsp;&nbsp;&nbsp;//&nbsp;exception&nbsp;발생</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;대신에&nbsp;get을&nbsp;사용한다.</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>capitalOfCountry&nbsp;get&nbsp;&quot;andorra&quot;&nbsp;&nbsp;//&nbsp;None</span></span></div></pre></div>\n<h3>Option Type</h3>\n<p>Option 은 covariant 하기 때문에 Option[A] > Option[Nothing]이다. 즉 None</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>trait&nbsp;Option[+A]</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>case&nbsp;class&nbsp;Some[+A](value:&nbsp;A)&nbsp;extend&nbsp;Option[A]</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>object&nbsp;None&nbsp;extend&nbsp;Option[Nothing]</span></span></div></pre></div>\n<p>패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;showCapital(country:&nbsp;String)&nbsp;=&nbsp;capitalOfCountry.get(country)&nbsp;match&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;case&nbsp;Some(capital)&nbsp;=&gt;&nbsp;capital</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;case&nbsp;None&nbsp;=&gt;&nbsp;&quot;missing&nbsp;data&quot;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div></pre></div>\n<h3>Sorted and GroupBy</h3>\n<p>sql 쿼리의 opertaion 을 사용해보자.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;sorted</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;fruit&nbsp;=&nbsp;List(&quot;apple&quot;,&nbsp;&quot;pear&quot;,&nbsp;&quot;orange&quot;,&nbsp;&quot;pineapple&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>fruit.sortWith&nbsp;(_.length&nbsp;&lt;&nbsp;_.length)&nbsp;&nbsp;//&nbsp;List(&quot;pear&quot;,&nbsp;&quot;apple&quot;,&nbsp;&quot;orange&quot;,&nbsp;&quot;pineapple&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>fruit.sorted&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;List(&quot;apple&quot;,&nbsp;&quot;orange&quot;,&nbsp;&quot;pear&quot;,&nbsp;&quot;pineapple&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;groupBy</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>fruit&nbsp;groupBy&nbsp;(_.head)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;Map(p&nbsp;-&gt;&nbsp;List(pear,&nbsp;pineapple)),</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;-&gt;&nbsp;List(apple),</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;-&gt;&nbsp;List(orange))</span></span></div></pre></div>\n<p>groubBy 명령은 식별 함수 f 에 따라 collection 의 map 을 만든다.</p>\n<h3>Polynoial Example</h3>\n<p>from exponents to coefficient 방식으로 map 을 만든다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>class&nbsp;Poly(val&nbsp;terms:&nbsp;Map[Int,&nbsp;Double])&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;def&nbsp;+&nbsp;(other:&nbsp;Poly)&nbsp;=&nbsp;new&nbsp;Poly(terms&nbsp;++&nbsp;other.terms)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;override&nbsp;def&nbsp;toString&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;(for&nbsp;((exp,&nbsp;coeff)&nbsp;&lt;-&nbsp;terms.toList.sorted.reverse)&nbsp;yield&nbsp;coeff+&quot;x^&quot;+exp)&nbsp;mkString&nbsp;&quot;&nbsp;+&nbsp;&quot;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;p1&nbsp;=&nbsp;new&nbsp;Poly(Map(1&nbsp;-&gt;&nbsp;2.0,&nbsp;3&nbsp;-&gt;&nbsp;4.0,&nbsp;5&nbsp;-&gt;&nbsp;6.2))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;p2&nbsp;=&nbsp;new&nbsp;Poly(Map(0&nbsp;-&gt;&nbsp;3.0,&nbsp;3&nbsp;-&gt;&nbsp;7.0))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p1&nbsp;+&nbsp;p2</span></span></div></pre></div>\n<p>두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents 가 같은 coefficient 끼리 더해주고 나머지 exponents 들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.\n하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p1:&nbsp;Poly&nbsp;=&nbsp;6.2x^5&nbsp;+&nbsp;4.0x^3&nbsp;+&nbsp;2.0x^1</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p2:&nbsp;Poly&nbsp;=&nbsp;7.0x^3&nbsp;+&nbsp;3.0x^0</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>res0:&nbsp;Poly&nbsp;=&nbsp;6.2x^5&nbsp;+&nbsp;7.0x^3&nbsp;+&nbsp;2.0x^1&nbsp;+&nbsp;3.0x^0</span></span></div></pre></div>\n<p>왜 그럴까??\n맵끼리 concatenating 할때는 아마 같은 키의 value 를 합치는게 아니라 뒤에 나오는 map 의 key 의 value 로 대체하기 때문에 이렇게 나오는 것이다.\n다음과 같이 바꿔보자.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;+&nbsp;(other:&nbsp;Poly)&nbsp;=&nbsp;new&nbsp;Poly(terms&nbsp;++&nbsp;(other.terms&nbsp;map&nbsp;adjust))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;adjust(term:&nbsp;(Int,&nbsp;Double)):&nbsp;(Int,&nbsp;Double)&nbsp;=&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;val&nbsp;(exp,&nbsp;coeff)&nbsp;=&nbsp;term</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;terms&nbsp;get&nbsp;exp&nbsp;match&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;Some(coeff1)&nbsp;=&gt;&nbsp;exp&nbsp;-&gt;&nbsp;(coeff&nbsp;+&nbsp;coeff1)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;None&nbsp;=&gt;&nbsp;exp&nbsp;-&gt;&nbsp;coeff</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div></pre></div>\n<p>뒤에 오는 other 에 adjust 함수를 매핑해보자.\nadjust 함수는 other 의 term 하나를 뽑아다가 terms 에 해당 exponent 가 있는지 확인하고 있으면 terms 와 other(term)의 coefficient 를 더해준다. 만약 없다면, othe 의 coeff 를 그대로 리턴한다.\n결과를 보자.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p1:&nbsp;Poly&nbsp;=&nbsp;6.2x^5&nbsp;+&nbsp;4.0x^3&nbsp;+&nbsp;2.0x^1</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p2:&nbsp;Poly&nbsp;=&nbsp;7.0x^3&nbsp;+&nbsp;3.0x^0</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>res0:&nbsp;Poly&nbsp;=&nbsp;6.2x^5&nbsp;+&nbsp;11.0x^3&nbsp;+&nbsp;2.0x^1&nbsp;+&nbsp;3.0x^0</span></span></div></pre></div>\n<h3>Default Values</h3>\n<p>심플한 방법이 있었다.\nwithDefaultValue operation 을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.\nwithDefaultValue 를 이용해 좀더 개선해보자.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>class&nbsp;Poly(terms0:&nbsp;Map[Int,&nbsp;Double])&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;def&nbsp;this(bindings:&nbsp;(Int,&nbsp;Double)*)&nbsp;=&nbsp;this(bindings.toMap)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;val&nbsp;terms&nbsp;=&nbsp;terms0&nbsp;withDefaultValue&nbsp;0.0</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;def&nbsp;+&nbsp;(other:&nbsp;Poly)&nbsp;=&nbsp;new&nbsp;Poly(terms&nbsp;++&nbsp;(other.terms&nbsp;map&nbsp;adjust))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;def&nbsp;adjust(term:&nbsp;(Int,&nbsp;Double)):&nbsp;(Int,&nbsp;Double)&nbsp;=&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;val&nbsp;(exp,&nbsp;coeff)&nbsp;=&nbsp;term</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;exp&nbsp;-&gt;&nbsp;(coeff&nbsp;+&nbsp;terms(exp))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;override&nbsp;def&nbsp;toString&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;(for&nbsp;((exp,&nbsp;coeff)&nbsp;&lt;-&nbsp;terms.toList.sorted.reverse)&nbsp;yield&nbsp;coeff+&quot;x^&quot;+exp)&nbsp;mkString&nbsp;&quot;&nbsp;+&nbsp;&quot;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;p1&nbsp;=&nbsp;new&nbsp;Poly(1&nbsp;-&gt;&nbsp;2.0,&nbsp;3&nbsp;-&gt;&nbsp;4.0,&nbsp;5&nbsp;-&gt;&nbsp;6.2)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;p2&nbsp;=&nbsp;new&nbsp;Poly(0&nbsp;-&gt;&nbsp;3.0,&nbsp;3&nbsp;-&gt;&nbsp;7.0)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p1&nbsp;+&nbsp;p2</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>p1.terms(8)</span></span></div></pre></div>\n<p>크게 두가지가 바뀌었다.\n첫째는 Poly 클래스의 parameter 에 default value 를 적용해주어 adjust 에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -> (coeff + terms(exp)))\n그리고 둘째는 새로운 Poly 를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial 하게 들어오면 이를 Map 으로 바꿔주도록 하였다.</p>\n<h3>Exercise</h3>\n<p>위에서 보았던 '++' 연산과 foldLeft 를 이용한 연산중 어느것이 더 효율적일까?</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;+&nbsp;(other:&nbsp;Poly)&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;new&nbsp;Poly((other.terms&nbsp;foldLeft&nbsp;terms)(addTerm))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;addTerm(terms:&nbsp;Map[Int,&nbsp;Double],&nbsp;term:&nbsp;(Int,&nbsp;Double)):&nbsp;Map[Int,&nbsp;Double]&nbsp;=&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;val&nbsp;(exp,&nbsp;coeff)&nbsp;=&nbsp;term</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;terms&nbsp;+&nbsp;(exp&nbsp;-&gt;&nbsp;(coeff&nbsp;+&nbsp;terms(exp)))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>}</span></span></div></pre></div>\n<p>fold 를 이용하면 위에서처럼 Map 을 생성하여 각 exponent 를 비교해서 값을 넣는게 아니라 기존부터 있던 terms 에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.</p>\n<h2>6.5 Putting the Pieces Together</h2>\n<p>전화번호를 문자로 바꾸는 예제를 살펴보자.\n참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100 라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300 라인정도의 코드가 나왔다고 한다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;mnemonics&nbsp;=&nbsp;Map(</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;2&#39;&nbsp;-&gt;&nbsp;&quot;ABC&quot;,&nbsp;&#39;3&#39;&nbsp;-&gt;&nbsp;&quot;DEF&quot;,&nbsp;&#39;4&#39;&nbsp;=&gt;&nbsp;&quot;GHI&quot;,&nbsp;&#39;5&#39;&nbsp;-&gt;&nbsp;&quot;JKL&quot;,</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;6&#39;&nbsp;-&gt;&nbsp;&quot;MNO&quot;,&nbsp;&#39;7&#39;&nbsp;-&gt;&nbsp;&quot;PQRS&quot;,&nbsp;&#39;8&#39;&nbsp;-&gt;&nbsp;&quot;TUV&quot;,&nbsp;&#39;9&#39;&nbsp;-&gt;&nbsp;&quot;WXYZ&quot;)</span></span></div></pre></div>\n<p>위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.</p>\n<p>예를 들어 \"7225247386\"를 convert 해보면 그 중 하나가 \"SCALAISFUN\"(Scala is fun)이 된다.</p>\n<p>전체코드는 다음과 같다.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;in&nbsp;=&nbsp;Source.fromURL(&quot;</span><span class=\"syntax--markup syntax--underline syntax--link syntax--http syntax--hyperlink\"><span>http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt</span></span><span>&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;words&nbsp;=&nbsp;in.getLines.toList&nbsp;filter&nbsp;(word&nbsp;=&gt;&nbsp;word&nbsp;forall&nbsp;(chr&nbsp;=&gt;&nbsp;chr.isLetter))</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;mnem&nbsp;=&nbsp;Map(</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&#39;2&#39;&nbsp;-&gt;&nbsp;&quot;ABC&quot;,&nbsp;&#39;3&#39;&nbsp;-&gt;&nbsp;&quot;DEF&quot;,&nbsp;&#39;4&#39;&nbsp;-&gt;&nbsp;&quot;GHI&quot;,&nbsp;&#39;5&#39;&nbsp;-&gt;&nbsp;&quot;JKL&quot;,</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&#39;6&#39;&nbsp;-&gt;&nbsp;&quot;MNO&quot;,&nbsp;&#39;7&#39;&nbsp;-&gt;&nbsp;&quot;PQRS&quot;,&nbsp;&#39;8&#39;&nbsp;-&gt;&nbsp;&quot;TUV&quot;,&nbsp;&#39;9&#39;&nbsp;-&gt;&nbsp;&quot;WXYZ&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;charCode:&nbsp;Map[Char,&nbsp;Char]&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;for&nbsp;((digit,&nbsp;str)&nbsp;&lt;-&nbsp;mnem;&nbsp;ltr&nbsp;&lt;-&nbsp;str)&nbsp;yield&nbsp;ltr&nbsp;-&gt;&nbsp;digit</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>/**</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;파라미터로&nbsp;들어온&nbsp;문자열을&nbsp;charCode로&nbsp;변경함</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;@param&nbsp;word</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;@return</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*/</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;wordCode(word:&nbsp;String):&nbsp;String&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;word.toUpperCase&nbsp;map&nbsp;charCode</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;wordCode(&quot;Java&quot;)&nbsp;&nbsp;//&nbsp;res0:&nbsp;String&nbsp;=&nbsp;5282</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>/**</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;A&nbsp;map&nbsp;form&nbsp;digit&nbsp;strings&nbsp;to&nbsp;the&nbsp;words&nbsp;that&nbsp;represent&nbsp;them,</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;e,g.&nbsp;&quot;5282&quot;&nbsp;-&gt;&nbsp;List(&quot;Java&quot;,&nbsp;&quot;Kata&quot;,&nbsp;&quot;Lava&quot;,&nbsp;...)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;Note:&nbsp;A&nbsp;missing&nbsp;number&nbsp;should&nbsp;map&nbsp;to&nbsp;the&nbsp;empty&nbsp;set,&nbsp;e,g.&nbsp;&quot;11111&quot;&nbsp;-&gt;&nbsp;List()</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*/</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>val&nbsp;wordsForNum:&nbsp;Map[String,&nbsp;Seq[String]]&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;words&nbsp;groupBy&nbsp;wordCode&nbsp;withDefaultValue&nbsp;Seq()</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>/**</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*&nbsp;Return&nbsp;all&nbsp;ways&nbsp;to&nbsp;encode&nbsp;a&nbsp;number&nbsp;as&nbsp;a&nbsp;list&nbsp;of&nbsp;words</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;*/</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;encode(number:&nbsp;String):&nbsp;Set[List[String]]&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;if&nbsp;(number.isEmpty)&nbsp;Set(List())</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;//&nbsp;1&nbsp;to&nbsp;number.length는&nbsp;IndexedReq&nbsp;타입이므로&nbsp;Set&nbsp;타입으로&nbsp;변경해준다</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;else&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;{</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;split&nbsp;&lt;-&nbsp;1&nbsp;to&nbsp;number.length</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;word&nbsp;&lt;-&nbsp;wordsForNum(number&nbsp;take&nbsp;split)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rest&nbsp;&lt;-&nbsp;encode(number&nbsp;drop&nbsp;split)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;yield&nbsp;word&nbsp;::&nbsp;rest</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;}.toSet</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>encode(&quot;7225247386&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>def&nbsp;translate(number:&nbsp;String):&nbsp;Set[String]&nbsp;=</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;encode(number)&nbsp;map(_&nbsp;mkString&nbsp;&quot;&nbsp;&quot;)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>translate(&quot;7225247386&quot;)</span></span></div></pre></div>\n<p>지금까지 살펴본 스칼라 collection 은 아래와 같이 정리 할 수 있다.</p>\n<ul>\n<li>easy to use: few steps to do the job.</li>\n<li>concise: one word replaces a whole loop.</li>\n<li>safe: type checker is really good at catching errors.</li>\n<li>fast: collection ops art tuned, can be parallelized.</li>\n<li>universal: one vocabulary to work on all kinds of collections.</li>\n</ul>","frontmatter":{"title":"Functional Programming in Scala week 6","date":"July 26, 2016"}}},"pageContext":{"slug":"/2016/07/26/functional-programming-in-scala-week6/","previous":{"fields":{"slug":"/2016/07/26/functional-programming-in-scala-week5/"},"frontmatter":{"title":"Functional Programming in Scala week 5"}},"next":{"fields":{"slug":"/2016/08/18/frontend-javascript-framework-angularjs-week1/"},"frontmatter":{"title":"[coursera] AngularJS week 1"}}}}